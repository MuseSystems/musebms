# Source File: mscmp_syst_session.ex
# Location:    musebms/app_server/components/system/mscmp_syst_session/lib/mscmp_syst_session.ex
# Project:     Muse Systems Business Management System
#
# Copyright Â© Lima Buttgereit Holdings LLC d/b/a Muse Systems
# This file may include content copyrighted and licensed from third parties.
#
# See the LICENSE file in the project root for license terms and conditions.
# See the NOTICE file in the project root for copyright ownership information.
#
# muse.information@musesystems.com :: https://muse.systems

defmodule MscmpSystSession do
  alias MscmpSystSession.Impl
  alias MscmpSystSession.Types

  @external_resource "README.md"

  @moduledoc File.read!(Path.join([__DIR__, "..", "README.md"]))

  @default_expires_after_secs 3600

  @doc section: :session_management
  @doc """
  Creates a new session returning the session name for future reference.

  Using a starting set of data and a expiration period, creates a new Session
  record.  The return value is either a success tuple including the generated
  name of the session record or an error tuple explaining the failure.

  Currently, the Session name is an automatically generated random 96 bytes run
  through base 64 encoding.

  ## Parameters

    * `session_data` - the initial Session Data to use in creating the new
    Session record in the database.  Currently the expectation is that this
    value will be any arbitrary `Map`.  This parameter is required.

    * `expires_after_secs` - the number of seconds after the current time at
    which the expiration will be considered "expired".  Expired sessions may
    not be retrieved or otherwise updated, but may be deleted or purged from the
    system.  This parameter is optional and defaults to 3600 seconds (1 hour) if
    not provided.

  ## Examples

  Creating a new Session with the default expiration time.

      iex> {:ok, session_name} =
      ...>   MscmpSystSession.create_session(%{test: "test"})
      iex> is_binary(session_name)
      true
  """
  @spec create_session(Types.session_data(), non_neg_integer()) ::
          {:ok, Types.session_name()} | {:error, MscmpSystError.t()}
  defdelegate create_session(session_data, expires_after_secs \\ @default_expires_after_secs),
    to: Impl.DbSession

  @doc section: :session_management
  @doc """
  Retrieves the Session Data for the named Session and resets the Session
  Expiration.

  It should be noted that reading a Session will also refresh the expiration of
  that Session's expiration date.

  Trying to retrieve the Session data of an already expired Session results in
  a not found tuple being returned (`{:ok, :not_found}`).

  ## Parameters

    * `session_name` - the Session Name that was generated by `create_session/2`
    at Session create time.  This argument is required.

    * `expires_after_secs` - the number of seconds after the current time at
    which the expiration will be considered "expired".  This parameter is
    optional and defaults to 3600 seconds (1 hour) if not provided.

  ## Examples

  Retrieving a Session and setting the renewed expiration date/time to 30
  minutes from retrieval time.

      iex> {:ok, %{}} = MscmpSystSession.get_session("example_session", 1800)

  Attempting to retrieve an expired Session returns the not found value.

      iex> MscmpSystSession.get_session("example_expired_session")
      {:ok, :not_found}
  """
  @spec get_session(Types.session_name(), non_neg_integer()) ::
          {:ok, Types.session_data()} | {:ok, :not_found} | {:error, MscmpSystError.t()}
  defdelegate get_session(session_name, expires_after_secs \\ @default_expires_after_secs),
    to: Impl.DbSession

  @doc section: :session_management
  @doc """
  Refreshes the Session expiration date/time of the identified record.

  The function only returns its success status absent any data.

  Do note that all other interactions with the Session will also refresh the
  Session expiration date/time so in many cases there is no need to call this
  function explicitly.  Typically you'd only call this function if you've had
  interaction with the user, but not needed to access the session for some time.

  Trying to refresh the expiration date/time of an already expired Session will
  be treated as a "not found" record.

  ## Parameters

    * `session_name` - the Session Name that was generated by `create_session/2`
    at Session create time.  This argument is required.

    * `expires_after_secs` - the number of seconds after the current time at
    which the expiration will be considered "expired".  This parameter is
    optional and defaults to 3600 seconds (1 hour) if not provided.

  ## Examples

  Refreshing a Session expiration date/time to 30 minutes from refresh time.

      iex> MscmpSystSession.refresh_session_expiration("example_session", 1800)
      :ok

  Attempting to refresh an already expired Session returns the not found value.

      iex> MscmpSystSession.refresh_session_expiration("example_expired_session")
      {:ok, :not_found}

  """
  @spec refresh_session_expiration(Types.session_name(), non_neg_integer()) ::
          :ok | {:ok, :not_found} | {:error, MscmpSystError.t()}
  defdelegate refresh_session_expiration(
                session_name,
                expires_after_secs \\ @default_expires_after_secs
              ),
              to: Impl.DbSession

  @doc section: :session_management
  @doc """
  Replaces the Session Data of the named Session record with the Session Data
  provided.

  As with other kinds of interactions with the Session, updating the Session
  data will also update the expiration date/time.

  Attempting to update the Session Data of an already expired Session will
  be treated as attempting to update a not found record.

  ## Parameters

    * `session_name` - the Session Name that was generated by `create_session/2`
    at Session create time.  This argument is required.

    * `session_data` - the updated Session Data which replaces the existing
    Session Data.  Currently the expectation is that this value will be any
    arbitrary `Map`.  This argument is required.

    * `expires_after_secs` - the number of seconds after the current time at
    which the expiration will be considered "expired".  This parameter is
    optional and defaults to 3600 seconds (1 hour) if not provided.

  ## Examples

  Updating a Session with new data and resetting the expiration date/time to
  30 minutes from update time.

      iex> MscmpSystSession.update_session("example_update_session", %{updated_key: "updated_value"}, 1800)
      :ok
      iex> MscmpSystSession.get_session("example_update_session")
      {:ok, %{"updated_key" => "updated_value"}}

  Attempting to update an already expired Session returns the not found value.

      iex> MscmpSystSession.update_session("example_expired_session", %{updated_key: "updated_value"})
      {:ok, :not_found}
  """
  @spec update_session(Types.session_name(), Types.session_data(), non_neg_integer()) ::
          :ok | {:ok, :not_found} | {:error, MscmpSystError.t()}
  defdelegate update_session(
                session_name,
                session_data,
                expires_after_secs \\ @default_expires_after_secs
              ),
              to: Impl.DbSession

  @doc section: :session_management
  @doc """
  Deletes the named Session record from the database.

  This is the de facto method for terminating a session.

  Unlike the other functions in this module which treat expired Session records
  as though they've not been found, deleting an expired Session is permitted and
  will return the same value as deleting an unexpired Session record.

  ## Parameters

    * `session_name` - the Session Name that was generated by `create_session/2`
    at Session create time.  This argument is required.

  ## Examples

  Deleting a Session record.

      iex> MscmpSystSession.delete_session("example_delete_session")
      :ok

  Attempting to delete a nonexistent Session returns the not found value.

      iex> MscmpSystSession.delete_session("nonexistent_session")
      {:ok, :not_found}
  """
  @spec delete_session(Types.session_name()) ::
          :ok | {:ok, :not_found} | {:error, MscmpSystError.t()}
  defdelegate delete_session(session_name), to: Impl.DbSession

  @doc section: :session_management
  @doc """
  Purges the database of previously expired Session records.

  The intention of this function is for it to be called on a periodic, scheduled
  basis in order to keep the system clean of expired Sessions.  The expectations
  are that the purge process may take some time.  Currently, 4 minutes are
  allotted for the running of the process prior to timing out, so a schedule
  more aggressive than once every 5 minutes is not advised.

  ## Parameters

    * `session_name` - the Session Name that was generated by `create_session/2`
    at Session create time.  This argument is required.
  """
  @spec purge_expired_sessions() :: :ok | {:error, MscmpSystError.t()}
  defdelegate purge_expired_sessions, to: Impl.DbSession
end
