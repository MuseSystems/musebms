searchData={"items":[{"type":"task","title":"mix builddb","doc":"Builds database sources into their respective migrations according to build\nplans.","ref":"Mix.Tasks.Builddb.html"},{"type":"task","title":"Options: - mix builddb","doc":"* `--type` or `-t`: The type of database to build.  This is a required switch\n    and there is no default value.\n\n\n  * `--source` or `-s`: Directory where the `buildplans. .toml` can be\n    found.  If not provided a default directory of `database`in the project\n    root is assumed.\n\n\n  * `--destination` or `-d`: Directory where to build the migrations.  The\n    default value is `priv/database` is used if not provided.  Note that the\n    migrations files will be built inside a directory built from both the\n    destination directory from this switch and the database type:\n    ` / `.\n\n  * `--clean` or `-c`: Clean previously created migrations prior to building\n    the migrations.  If this flag is not provided, migrations that already\n    exist are skipped and only new migrations are built.  When the previous\n    migrations are cleaned out, the build process will create all migrations.","ref":"Mix.Tasks.Builddb.html#module-options"},{"type":"task","title":"Description: - mix builddb","doc":"This module implements the build process for a modified version of the common\n\"migrations\" database development/deployment strategy.  In the model\nimplemented here, the developer creates source files in PL/pgSQL and then\nupdates a build plans file which determines how the individual source files\nare copied into individual migration files which will then be deployed to the\ndatabase.  This allows the developer to treat database source more closely to\nnon-database source code, at least during initial database development.\n\nThis migrations model allows for creation of multiple, different databases for\napplications that require more than a single database definition.  These\nmultiple database definitions are referred to as _*database types*_.\n\nThis build process expects the source files to be kept within an independent\nsource directory, by default: `database` of the project root.  In addition to\nthe source files, the database directory should also contain TOML files named\n`buildplans. .toml` which define what migrations will be built\nand in what order the database source files will be copied to them.  Each\ndatabase type will have its own TOML build plans file.\n\nThe build plan file is a TOML file with an array of tables of `[[buildplan]]`:\n```toml\n[[build_plan]]\nrelease              = 1\nversion              = 1\nupdate               = 0\nsponsor              = 820\nsponsor_modification = 0\nload_files = [\n    \"tables/table_one.sql\",\n    {type = \"sql\", file = \"tables/table_two.sql\"},\n    {type = \"plan\", file = \"subplans/subplans.component.toml\"}\n]\n```\nThe fields above are defined as:\n\n  * `release` - The major version number of the migration.  The first element\n    of the migration file name.\n\n\n  * `version` - The minor version number of the migration.  The second element\n    of the migration file name.\n\n\n  * `update` - The patch version number of the migration.  The third element\n    of the migration name.\n\n\n  * `sponsor` - In cases where specific clients that use the software are able\n    to sponsor client-specific customizations, this field identifies the\n    client sponsoring the change.  This element is the fourth element of the\n    migration file name.  All sponsor numbers in the range 0 - 1295 are\n    reserved for Muse Systems internal use and some specific values in that\n    range currently have assigned meanings.  General public software releases\n    from Muse Systems will have a sponsor value of `820` (`MS` in Base 36),\n    software versions including sponsor number `821` (`MT` in Base 36)\n    indicate software created for internal, development testing purposes which\n    should never be part of a public release of the software.\n\n  * `sponsor_modification` - This field allows for sponsored customization to\n    both be versioned and sequenced in the migration process.  This is the\n    fifth element of the migration name.  For non-sponsored migrations, this\n    field should just be left at zero.\n\n\n  * `load_files` - A list of SQL files and sub-plans to include in the build.\n    Collectively, these are \"Load File Items\".\n\nEach Load File Item may take one of three forms:\n\n  1. `\"path/to/file.sql\"` - A simple string is interpreted as the path to an\n     SQL file to load into a migration.\n\n  2. `{type = \"sql\", file = \"path/to/file.sql\"}` - This is the same as the\n     simple file path of form 1.  Using this form could allow for a slightly\n     cleaner representation if sat in a group of sub-plan Load File Items.\n\n  3. `{type = \"plan\", file = \"path/to/subplan.toml\"}` - In this form the path\n     indicates that the file is a nested build plan, or sub-plan, whose\n     directives should be followed at this location.  A sub-plan is itself a\n     normal build plan.  By convention, a sub-plan file name should take the\n     form: `subplans. .toml`; unlike the build plan naming\n     convention, following the sub-plan naming convention is not required.\n     While build plans may be nested arbitrarily deep, a best practice is to\n     only use a single level of nesting.\n\nEach table in the array is a specific build plan which will build a single\nmigration.  The body of the migration itself is simply the files in the\n`load_files` list copied to the migration file in the order of the list.  Note\nthat the migration code is wrapped in a PostgreSQL `DO` block (PL/pgSQL) so\nsource files may use all the capabilities of PostgreSQL anonymous blocks as\nare they subject to its limitations.\n\nLater, on deployment, the migrations will be applied in migration name order.\nThe migration name is constructed from the versioning information in the\n`buildplan` table with each of the versioning fields (recorded as integers)\nbeing added in their zero padded, base-36 representations.","ref":"Mix.Tasks.Builddb.html#module-description"},{"type":"function","title":"Mix.Tasks.Builddb.run/1","doc":"","ref":"Mix.Tasks.Builddb.html#run/1"},{"type":"task","title":"mix dropdb","doc":"Drops a previously loaded development supporting Datastore.\n\nThis command takes a number of options many of which match `Mix.Tasks.Loaddb`.\nInsofar as they have corresponding options, the options used with this Mix\ntask should have values which match the command used to create the Datastore;\nfailing to do this could cause the drop operation to fail or fail partially.\n\n>#### Usage Note {: .warning}\n>\n> There is nothing stopping you from using this command from dropping any\n> Datastore in the system and technically it should work.  But the only\n> supported use of this command is for dropping development supporting\n> databases originally loaded with the `Mix.Tasks.Loaddb` task.  Any other use\n> is at your own risk.\n\nNote that all options other than `--type` have default values which match the\ncorresponding default values in `Mix.Task.Loaddb`.","ref":"Mix.Tasks.Dropdb.html"},{"type":"task","title":"Options - mix dropdb","doc":"* `--ds-name` - The Datastore Name used to identify the Datastore in the\n    application.  Specifically references parts of the supervisory system\n    which manage the Datastore Contexts.  This is an optional string\n    value which defaults to \"ms_devsupport_database\".\n\n  * `--db-host` - The IP address or resolvable host name of the database\n    server which hosts the Datastore to drop.  This is an optional string\n    value which defaults to \"127.0.0.1\".\n\n  * `--db-port` - The TCP port on which the database server is listening for\n    connections.  This is an optional integer value which defaults to `5432`.\n\n  * `--db-name` - The name of the database which backs the Datastore on the\n    database server.  Often times this will be the same as the Datastore\n    Name, but not necessarily so.  This is an optional string value which\n    defaults to \"ms_devsupport_database\".\n\n  * `--db-role-prefix`- a string value which is used to prefix the owner and\n    login Context database role names created by the `Mix.Tasks.Loaddb` mix\n    task.  This value is optional and defaults to \"ms_devsupport\".\n\n  * `--context-name` - the name by which the login Context can be found\n    withing the application.  This is an optional string value which defaults\n    to \"ms_devsupport_context\".\n\n  * `--dbadmin-pwd` - the password of the `ms_syst_privileged` database role\n    on the target database.  This is an optional string value which defaults\n    to \"musesystems.publicly.known.insecure.devsupport.password\".\n\n  * `--clean-all` - if this switch is set, this task will delete all Datastore\n    migration files created for the Component, including those that might not\n    be related to the Datastore being dropped.  This is done by simply\n    deleting the path directory provided in the `--destination` option.  This\n    switch will supersede the `--clean` option if both switches are set.\n\n  * `--clean` or `-c` - deletes any Datastore migrations built for the\n    Datastore type identified by the `--type` switch.  This switch is\n    superseded by the `--clean-all` option.\n\n  * `--type` or `-t` - identifies the type of Datastore to clean when using\n    the `--clean` option.  This option becomes required if the `--clean`\n    switch is set.\n\n  * `--destination` or `-d` - establishes the path in which Datastore\n    migrations were built.  This option is only used if either the\n    `--clean-all` or `--clean` options are also set.  This is an optional\n    value which defaults to \"priv/database\".","ref":"Mix.Tasks.Dropdb.html#module-options"},{"type":"function","title":"Mix.Tasks.Dropdb.drop_database/2","doc":"","ref":"Mix.Tasks.Dropdb.html#drop_database/2"},{"type":"function","title":"Mix.Tasks.Dropdb.get_datastore_options/1","doc":"","ref":"Mix.Tasks.Dropdb.html#get_datastore_options/1"},{"type":"function","title":"Mix.Tasks.Dropdb.load_database/2","doc":"","ref":"Mix.Tasks.Dropdb.html#load_database/2"},{"type":"function","title":"Mix.Tasks.Dropdb.run/1","doc":"","ref":"Mix.Tasks.Dropdb.html#run/1"},{"type":"task","title":"mix loaddb","doc":"Loads the identified Datastore \"type\" into a testing/development oriented\ndatabase server.","ref":"Mix.Tasks.Loaddb.html"},{"type":"task","title":"Options - mix loaddb","doc":"Most options come with reasonable default values for most development/testing\nscenarios.  Specific circumstances may require overriding the default values\nby explicitly providing the options documented below.\n\n  * `--type` - the Datastore \"type\" which to load to the database.  This is\n    a required string value and for which there is no default.  If the\n    `--build` option is also set, the value of this option will indicate the\n    type of the Datastore migrations to build.\n\n  * `--db-host` - a string indicating the host address of the database server.\n    This can be an IP address or resolvable DNS entry.  The default value is\n    `127.0.0.1`.\n\n  * `--db-port` - an integer indicating the TCP port on which to contact the\n    database server.  The default value is the standard PostgreSQL port number\n    `5432`.\n\n  * `--db-name` - a binary value indicating a name for the database to use.\n    The default database name is \"ms_devsupport_database\".\n\n  * `--dbadmin-pwd` - a binary value for the standard `ms_syst_privileged`\n    database role account created via the database bootstrapping script.  The\n    default value is\n    \"musesystems.publicly.known.insecure.devsupport.password\".\n\n  * `--ds-name` - The Datastore Name used to identify the Datastore in the\n    application.  Specifically references parts of the supervisory system\n    which manage the Datastore Contexts.  This is an optional string\n    value which defaults to \"ms_devsupport_database\".\n\n  * `--ds-code` - a binary value providing a Datastore level salting value\n    used in different hashing operations.  The default value is\n    \"musesystems.publicly.known.insecure.devsupport.code\"\n\n  * `--db-salt` - a binary value providing a Datastore level salting value\n    used in different hashing operations.  The default value is\n    \"musesystems.publicly.known.insecure.devsupport.salt\"\n\n  * `--db-role-prefix` - a binary value which is prefixed to the names of the\n    database roles created to back the Datastore Contexts. The default value\n    is \"ms_devsupport\".\n\n  * `--dbadmin-pool` - the number of database connections which will be opened\n    to support DBA or Privileged operations.  The default value is `1`.\n\n  * `--context-name` - a binary value which provides a unique context name for\n    the login Context identified by this function.  The default value is\n    \"ms_devsupport_context\".\n\n  * `--context-pwd` - a binary value which is the database password that the\n    login Datastore Context uses to log into the database.  The default value\n    is \"musesystems.publicly.known.insecure.devsupport.apppassword\".\n\n  * `--context-pool` - the number of database connections the login Context\n    will establish from the application.  The default value is 5.\n\n  * `--desc-prefix` - a binary value which is prefixed to the descriptions of\n    the created database contexts and which appear in the database role\n    descriptions.  The default value is \"Muse Systems DevSupport\".\n\n  * `--build` - a switch which, if set, indicates that the `Mix.Task.Builddb`\n    process should be called to build the Datastore migrations prior to\n    migrating the new Datastore.  See the documentation for\n    `Mix.Tasks.Builddb` for more information about that process.  By default,\n    Datastore migrations are not built.\n\n  * `--source` - only applies if the `--build` option is set.  Establishes the\n    database source code directory from which to build migrations.  See the\n    documentation for `Mix.Tasks.Builddb` for more.\n\n  * `--destination` - only applies if the `--build` option is set.  Sets the\n    destination path into which Datastore migrations will be built.  See the\n    documentation for `Mix.Tasks.Builddb` for more.\n\n  * `--clean` - a switch which indicates if the Datastore migrations to be\n    built should be deleted and entirely rebuilt from the database source\n    code.  This switch is only used if the `--build` option is also set.  See\n    the documentation for `Mix.Tasks.Builddb` for more.","ref":"Mix.Tasks.Loaddb.html#module-options"},{"type":"function","title":"Mix.Tasks.Loaddb.drop_database/2","doc":"","ref":"Mix.Tasks.Loaddb.html#drop_database/2"},{"type":"function","title":"Mix.Tasks.Loaddb.get_datastore_options/1","doc":"","ref":"Mix.Tasks.Loaddb.html#get_datastore_options/1"},{"type":"function","title":"Mix.Tasks.Loaddb.load_database/2","doc":"","ref":"Mix.Tasks.Loaddb.html#load_database/2"},{"type":"function","title":"Mix.Tasks.Loaddb.run/1","doc":"","ref":"Mix.Tasks.Loaddb.html#run/1"},{"type":"protocol","title":"MscmpSystDb.DbTypes","doc":"Defines the common functions which should be implemented for all custom\nDbTypes implemented in MscmpSystDb.","ref":"MscmpSystDb.DbTypes.html"},{"type":"function","title":"MscmpSystDb.DbTypes.compare/2","doc":"Compares two values and returns the effective operating describing the\nrelationship.\n\n# Parameters\n\n  * `left` - a range type or base type for use in the comparison which would\n  be the left side when used with an infix operator such as `>`.\n\n  * `right` - a range type or base type for use in the comparison which would\n  be the right side when used with an infix operator such as `>`.\n\n# Examples\n\nComparing two ranges where the left and right overlap, but the left side is\nless than the right (returns \"Less Than Overlapping\").\n\n    iex> left_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 10,\n    ...>     upper: 100\n    ...>   }\n    iex> right_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 20,\n    ...>     upper: 200\n    ...>   }\n    iex> MscmpSystDb.DbTypes.compare(left_range, right_range)\n    :lto\n\nComparing a range and a base type value where the range contains the base\ntype value (returns \"Left Contains Right\").\n\n    iex> left_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 10,\n    ...>     upper: 100\n    ...>   }\n    iex> MscmpSystDb.DbTypes.compare(left_range, 50)\n    :lcr\n\nComparing interval base types where the left is less than the right (returns\n\"Less Than\")\n\n    iex> left_interval =\n    ...>   %MscmpSystDb.DbTypes.Interval{\n    ...>     days: 1\n    ...>   }\n    iex> right_interval =\n    ...>   %MscmpSystDb.DbTypes.Interval{\n    ...>     months: 1\n    ...>   }\n    iex> MscmpSystDb.DbTypes.compare(left_interval, right_interval)\n    :lt","ref":"MscmpSystDb.DbTypes.html#compare/2"},{"type":"function","title":"MscmpSystDb.DbTypes.test_compare/3","doc":"Compares two values and tests the resulting effective operator against that\nsupplied by the user returning `true` or `false`.\n\n# Parameters\n\n  * `left` - a range type or base type for use in the comparison which would\n  be the left side when used with an infix operator such as `>`.\n\n  * `right` - a range type or base type for use in the comparison which would\n  be the right side when used with an infix operator such as `>`.\n\n  * `operator` - the desired operator to test.\n\n# Examples\n\nComparing two ranges where the left and right overlap, but the left side is\nless than the right.  In this case we match the desired \"Less Than\nOverlapping\" operator resulting in a return value of `true`.\n\n    iex> left_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 10,\n    ...>     upper: 100\n    ...>   }\n    iex> right_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 20,\n    ...>     upper: 200\n    ...>   }\n    iex> MscmpSystDb.DbTypes.test_compare(left_range, right_range, :lto)\n    true\n\n\nComparing a range and a base type value where the range contains the base\ntype value, but the desired operator is \"Greater Than\" which does not match\nresulting in a return value of `false`.\n\n    iex> left_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 10,\n    ...>     upper: 100\n    ...>   }\n    iex> MscmpSystDb.DbTypes.test_compare(left_range, 50, :gt)\n    false\n\nComparing interval base types where the intervals are equal and testing for\nequality resulting a `true` result.\n\n    iex> left_interval =\n    ...>   %MscmpSystDb.DbTypes.Interval{\n    ...>     secs: 100\n    ...>   }\n    iex> right_interval =\n    ...>   %MscmpSystDb.DbTypes.Interval{\n    ...>     secs: 100\n    ...>   }\n    iex> MscmpSystDb.DbTypes.test_compare(left_interval, right_interval, :eq)\n    true","ref":"MscmpSystDb.DbTypes.html#test_compare/3"},{"type":"type","title":"MscmpSystDb.DbTypes.t/0","doc":"All the types that implement this protocol.","ref":"MscmpSystDb.DbTypes.html#t:t/0"},{"type":"protocol","title":"MscmpSystDb.DbTypes.Range","doc":"Defines the common functions which should be implemented for all database\nrange types.","ref":"MscmpSystDb.DbTypes.Range.html"},{"type":"function","title":"MscmpSystDb.DbTypes.Range.bounds_compare/2","doc":"Compares a range with either a range or related base type and returns a map\nindicating the applicable comparison operator for the lower and upper bound\nof the range.","ref":"MscmpSystDb.DbTypes.Range.html#bounds_compare/2"},{"type":"function","title":"Examples - MscmpSystDb.DbTypes.Range.bounds_compare/2","doc":"Comparing two ranges where both the lower and upper values of the left range\nare less than the corresponding values of the right side.\n\n    iex> left_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 10,\n    ...>     upper: 100\n    ...>   }\n    iex> right_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 20,\n    ...>     upper: 200\n    ...>   }\n    iex> MscmpSystDb.DbTypes.Range.bounds_compare(left_range, right_range)\n    %MscmpSystDb.Types.BoundsCompareResult{lower_comparison: :lt, upper_comparison: :lt}\n\n\nComparing a range value on the left side with a base value on the right. In\nthis case the left side value is less than the right side value, but\nequal to the upper left side value.\n\n    iex> left_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 10,\n    ...>     upper: 100,\n    ...>     upper_inclusive: false\n    ...>   }\n    iex> MscmpSystDb.DbTypes.Range.bounds_compare(left_range, 99)\n    %MscmpSystDb.Types.BoundsCompareResult{lower_comparison: :lt, upper_comparison: :eq}\n\nComparing two ranges where the right side range is contained by the left side\nrange.  The left side lower bound is less than the right side lower bound and\nthe left side upper bound is greater than the right side upper bound.\n\n    iex> left_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 10,\n    ...>     upper: 100,\n    ...>     upper_inclusive: false\n    ...>   }\n    iex> right_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 20,\n    ...>     upper: 50\n    ...>   }\n    iex> MscmpSystDb.DbTypes.Range.bounds_compare(left_range, right_range)\n    %MscmpSystDb.Types.BoundsCompareResult{lower_comparison: :lt, upper_comparison: :gt}","ref":"MscmpSystDb.DbTypes.Range.html#bounds_compare/2-examples"},{"type":"function","title":"MscmpSystDb.DbTypes.Range.lower/1","doc":"Extracts and returns the lower bound of a range.\n\n# Examples\n\n    iex> range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 10,\n    ...>     upper: 100,\n    ...>     upper_inclusive: false\n    ...>   }\n    iex> MscmpSystDb.DbTypes.Range.lower(range)\n    10","ref":"MscmpSystDb.DbTypes.Range.html#lower/1"},{"type":"function","title":"MscmpSystDb.DbTypes.Range.upper/1","doc":"Extracts and returns the upper bound of a range.\n\n# Examples\n\n    iex> range =\n    ...>   %MscmpSystDb.DbTypes.DecimalRange{\n    ...>     lower: Decimal.new(\"11.55\"),\n    ...>     upper: Decimal.new(\"75.50\"),\n    ...>     upper_inclusive: false\n    ...>   }\n    iex> MscmpSystDb.DbTypes.Range.upper(range)\n    %Decimal{coef: 7549, exp: -2, sign: 1}","ref":"MscmpSystDb.DbTypes.Range.html#upper/1"},{"type":"type","title":"MscmpSystDb.DbTypes.Range.t/0","doc":"All the types that implement this protocol.","ref":"MscmpSystDb.DbTypes.Range.html#t:t/0"},{"type":"module","title":"MscmpSystDb","doc":"A database management Component for developing and managing database-per-tenant\noriented systems.  To achieve this we wrap and extend the popular `Ecto` and\n`EctoSql` libraries with a specialized templated (`EEx`) migrations system and add\nadditional, opinionated abstractions encapsulating the tenant model as it\nrelates to development, data access, and runtime concerns.\n\n>#### Important {: .warning}\n>\n> \"Database-per-tenant\" is not the typical tenancy implementation pattern for\n> Elixir/Phoenix based applications.  As with most choices in software\n> architecture and engineering there are trade-offs between the different\n> tenancy approaches that you should be well-versed with prior to committing to\n> this or any other tenancy model for your applications.","ref":"MscmpSystDb.html"},{"type":"module","title":"Concepts - MscmpSystDb","doc":"There are several concepts requiring definitions which should be understood\nbefore continuing.  Most of these concepts relate to runtime concerns though\nunderstanding them will inform your sense of the possibilities and constraints\non development and deployment scenarios.\n\n#### Datastore\n\nA Datastore can most simply be thought of as a single database created to\nsupport either a tenant environment or an administrative function of the\napplication.  More specifically speaking, a Datastore establishes a store of\ndata and a security boundary at the database level for the data of a tenant or\nof administrative functionality.\n\nUsing `MscmpSystDb.create_datastore/2` automatically will create the database\nbacking the Datastore.\n\nDatastores and the Ecto dynamic repositories which back them are started and\nstopped at runtime using this Component's API.  Datastores are not typically\nstarted directly via OTP application related functionality at application\nstartup.  This is chiefly because we don't assume to even know what Datastores\nactually exist until we've started up an administrative Datastore which records\nthe information.\n\n#### Datastore Context\n\nA Datastore Context represents a PostgreSQL database role which is used to\nestablish Datastore access and security contexts using database security\nfeatures. Datastore Contexts are specific to a single Datastore and are managed\nby the this Component, including the creation, maintenance, and dropping of them\nas needed, typically in conjunction with Datastore creation/deletion.\n\nBehind the scenes Datastore Contexts use the [\"Ecto Dynamic Repositories\"](https://hexdocs.pm/ecto/replicas-and-dynamic-repositories.html#dynamic-repositories) feature.\nEach Datastore Context is backed by an Ecto Dynamic Repo.   Starting a Datastore\nContext starts its Ecto Dynamic Repo including establishing the connections to\nthe database.  Stopping a Datastore Context shuts that associated Dynamic Repo\ndown and terminates its database connections.\n\nThere are several different kinds of Datastore Contexts which can be defined:\n\n  * __Owner__: This kind of Datastore Context creates a database role to serve\n    as the database owner of all the database objects backing the Datastore\n    making it the de facto admin role for the Datastore.  While the Owner\n    Datastore Context owns the database objects backing the Datastore, it is\n    only a regular database role (no special database rights) and it cannot be a\n    database login role itself.  All Datastores must have exactly one Owner\n    Datastore Context defined.\n\n  * __Login__: The Login Datastore Context is a regular database role with which\n    the application can log into the database and perform operations allowed by\n    the database security policies established by the database developer.  There\n    can be one or more Login Datastore Contexts in order to support various\n    security profiles that the application may assume or in order to build\n    connection pools with varying limits depending on some application specific\n    need (e.g. connections support web user interface vs. connections supporting\n    external API interactions.).  For a Datastore to be useful there must be at\n    least one Login Datastore Context defined for the Datastore.\n\n  * __Non-Login__: While the Owner Datastore Context is required, there are\n    other possible scenarios where non-login roles could be useful in managing\n    access to specific database objects, but how useful Non-Login roles might\n    be will depend on application specific factors; the expectation is that\n    their use will be rare.  Naturally, there is no requirement for Non-Login\n    Datastore Contexts to be defined for any Datastore.\n\nFinally, when we access the database from the application we'll always be doing\nso identifying one of our Login Datastore Contexts.  This is done using\n`MscmpSystDb.put_datastore_context/1` which behind the scenes is using the\n`Ecto.Repo` dynamic repository features (`c:Ecto.Repo.put_dynamic_repo/1`).\nNote that there is no default Ecto Repo, dynamic or otherwise, defined in the\nsystem.  Any attempts to access a Datastore Context without having established\nthe current Datastore Context for the process will cause the process to crash.\n\n>#### Warning! {: .warning}\n>\n> Datastore Contexts are created and destroyed by the application using the API\n> functions in this Component.  The current implementation of Login Datastore\n> Contexts, however, is expected to have certain security weaknesses related to\n> database role credential management.\n>\n> With this in mind, __*do not look to our implementation as an example of how\n> to approach such a problem*__ until this and other warnings disappear.  The\n> reality is that while in certain on-premises scenarios our current approach\n> might well be workable, it was designed with the idea of kicking the can of a\n> difficult and sensitive problem down the road and not as a final solution that\n> we'd stand behind.  We do believe this problem is solvable with sufficient\n> time and expertise.","ref":"MscmpSystDb.html#module-concepts"},{"type":"module","title":"Database Development - MscmpSystDb","doc":"Our development model assumes that there are fundamentally two phases of\ndevelopment related to the database: __*Initial/Major Development*__ and\n__*Ongoing Maintenance*__.\n\n#### Initial/Major Development\n\nWhen initially developing a database schema, prior to any releases of usable\nsoftware the typical \"migrations\" oriented development pattern of a continuing\nsequence of incremental changes is significantly less useful than it is during\nlater, maintenance oriented phases of development.  During initial development\nit is more useful to see database schema changes through the lens of traditional\nsource control methodologies.  The extend to which this is true will naturally\nvary depending on the application.  Larger, database-centric applications will\nbenefit from this phase of development significantly more than smaller\napplications where the database is simple persistence and data isn't significant\nbeyond this persistence support role.\n\n#### Ongoing Maintenance\n\nOnce there is an active release of the software and future deployments will be\nfocused on maintaining already running databases, our model shifts to the norms\ntypical of the traditional migrations database development model.  We expect\nsmaller, relatively independent changes which are simply applied in sequence.\nUnlike other migration tools such as the migrator built into `EctoSql`, we have\nsome additional ceremony related to sequencing migrations, but aside from these\nminor differences our migrations will resemble those of other tools once in the\nmaintenance phase of development.\n\n>#### Note {: .neutral}\n>\n> Despite the discussion above, the distinction between \"Initial/Major\n> Development\" and \"Ongoing Maintenance\" is a distinction in developer practice\n> only; the tool itself doesn't make this distinction but merely is designed to\n> work in a way which supports a workflow recognizing these phases.  The cost of\n> being able to support the Initial/Major Development concept is that migrations\n> are not numbered or sequenced automatically as will be shown below.  If you\n> don't need the Initial/Major Development phase, the traditional `EctoSql`\n> migrator may be more suitable to your needs.\n\n#### Source Files & Building Migrations Overview\n\nIn the more typical migrations model, the migration files are themselves the\nsource code of the database changes.  This Component separates the two concepts:\n\n  * Database source code files are written by the developer as the developer\n    sees fit.  Database source files are what we are most concerned with from a\n    source control perspective; and these files can be freely modified and\n    changes committed up to the point that they are built into released\n    migrations.  Database source files are written in (mostly) plain SQL; `EEx`\n    tags are allowed in the SQL and can be bound during migration time.\n\n  * Once the database source code has reached some stage of completion, the\n    developer can use the `mix builddb` task to generate migration files from\n    the database sources.  In order to build the migration files, the developer\n    will create a `TOML` \"build plan\" file which indicates which database source\n    files to include in the migrations and their sequence.  For more about the\n    build process and build plans see the `mix builddb` task documentation.\n\nNow let's connect this back to the development phases discussed previously.\nDuring the \"Initial/Major Development\" phase, we expect that there will be many\ndatabase source files and that these files will be written, committed to source\ncontrol, modified, and re-committed to source control not as migrations but as\nyou would any other source file (for example, maybe one file per table.); we\nmight also be building migration files at this time for testing purposes, but\nuntil the application is released we'd expect the migration files to be cleaned\nout and rebuilt.  Finally once tests, code, reviews, etc. are complete and a\nrelease is ready to be prepared, a final `mix builddb` is run to create the\nrelease migrations and those migrations are committed to source control.\n\nFrom this point forward we generally wouldn't modify the original database\nsource files or the final release migrations: the release migrations are\nessentially set in stone once they may be deployed to a environment where\ndropping the database is not an option.  Subsequent development in the \"Ongoing\nMaintenance\" phase looks similar to traditional migration development.  For any\nmodification to the database you'll create new a database source file(s) for\nthose modifications specifically and they'll get new version numbers which will\nin turn create new migrations when `mix builddb` builds them.  These will then\nbe deployed to the database as standard migrations would.","ref":"MscmpSystDb.html#module-database-development"},{"type":"module","title":"Migration Deployments - MscmpSystDb","doc":"Once built, migration files are deployed to a database similar to the way\ntraditional migration systems perform their deployments: the migrations are\nchecked, in migration number order, against a special database table listing the\npreviously deployed migrations (table `ms_syst_db.migrations`).  If a migration\nhas been previously deployed, it's skipped and the deployment process moves onto\nthe next migration; if the migration needs to be deployed it is applied to the\ndatabase and, assuming successful deployment, the process moves onto the next\nmigration or exits when all outstanding migrations have been applied.\n\nEach individual migration is applied in a single database transaction.  This\nmeans that if part of a migration fails to apply to the database successfully,\nthe entire migration is rolled back and the database will be in the state of the\nlast fully successful migration application.  A migration application failure\nwill abort the migration process, cancelling the attempted application of\nmigrations after the failed migration.\n\nUnlike the `EctoSql` based migration process, migrations in `MscmpSystDb` are\nexpected to be managed at runtime by the application.  There is no external\n`mix` oriented migration deployment process.  Migration processes are started\nfor each tenant database individually allowing for selective application of\nmigrations to the specified environment or allowing for \"upgrade window\" style\nfunctionality.  Migrations are also `EEx` templates and template bindings can be\nsupplied to the migrator to make each deployment specific to the database being\nmigrated if appropriate.   Naturally, much depends on the broader application\ndesign, but the migrator can support a number of different scenarios for\ndeployment of database changes.\n\nFinally, the migrator, can in a single application, manage and migrate different\ndatabase schemas/migration sets depending on the identified \"type\".  This means\nthat different database schemas for different subsystems can be supported by the\nmigration system in a single application.  This assumes that a single database\nis of a single type; that type may be any of the available types, but mixing of\ntypes in a single database is not allowed.","ref":"MscmpSystDb.html#module-migration-deployments"},{"type":"module","title":"Custom Database Types - MscmpSystDb","doc":"`Ecto`, `EctoSql`, and the underlying PostgreSQL library `Postgrex` offer decent\nPostgreSQL data type support out of box, but they don't directly map some of the\ndatabase types that can be helpful in business software such as PostgreSQL range\ntypes, internet address types, and interval types.  To this end we add some\ncustom database data types via the modules in the `MscmpSystDb.DbTypes.*`\nnamespace.","ref":"MscmpSystDb.html#module-custom-database-types"},{"type":"module","title":"Data Access Interface - MscmpSystDb","doc":"The `Ecto` library offers a data access and manipulation API via the `Ecto.Repo`\nmodule.  We wrap and in some cases extend the majority of that functionality in\nthis Component as documented in the [Query section](#query).  As a rule of\nthumb, you want to call on this module for such needs even if the same can be\nachieved with the `Ecto` library.  This recommendation is not meant to suggest\nthat you shouldn't use the `Ecto.Query` related DSL or methods for constructing\nqueries; using the Ecto Query DSL is, in fact, recommended absent compelling\nreason to do otherwise.","ref":"MscmpSystDb.html#module-data-access-interface"},{"type":"function","title":"MscmpSystDb.aggregate/4","doc":"A convenience function that currently wraps the `c:Ecto.Repo.aggregate/4`\nfunction.","ref":"MscmpSystDb.html#aggregate/4"},{"type":"function","title":"MscmpSystDb.all/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.all/2` function.","ref":"MscmpSystDb.html#all/2"},{"type":"function","title":"MscmpSystDb.create_datastore/2","doc":"Creates a new Datastore along with its contexts.\n\nThe creation of a new Datastore includes the following steps:\n\n  1. Creating database roles representing each of the Datastore contexts.\n  2. Creating a new database to back the Datastore.\n  3. Applying database connection privileges to the context roles.\n  4. Initializing the Datastore with necessary structures and data.","ref":"MscmpSystDb.html#create_datastore/2"},{"type":"function","title":"Parameters - MscmpSystDb.create_datastore/2","doc":"* `datastore_options` - A `DatastoreOptions` struct defining the Datastore\n    and its contexts.\n\n  * `opts` - a Keyword List of additional key/value call configurations.  See\n    the \"Options\" section for details.","ref":"MscmpSystDb.html#create_datastore/2-parameters"},{"type":"function","title":"Options - MscmpSystDb.create_datastore/2","doc":"* `:db_shutdown_timeout` (`t:timeout/0`) - The timeout in milliseconds to wait for the database to shutdown prior to\n  raising an error. The default value is `60000`.\n\n* `:migrations_schema` (`t:String.t/0`) - The database maintenance schema used to host the migrations state table. The default value is `\"ms_syst_db\"`.\n\n* `:migrations_table` (`t:String.t/0`) - The name of the table used to store database migration state data. The default value is `\"migrations\"`.","ref":"MscmpSystDb.html#create_datastore/2-options"},{"type":"function","title":"Returns - MscmpSystDb.create_datastore/2","doc":"* `{:ok, :ready, list(ContextState.t())}` - if the Datastore is successfully\n    created.\n\n  * `{:error, MscmpSystError.t()}` - if there's an error during the creation\n    process.","ref":"MscmpSystDb.html#create_datastore/2-returns"},{"type":"function","title":"Errors - MscmpSystDb.create_datastore/2","doc":"The function may return an error with code `:database_error` if there's a\nfailure in any step of the Datastore creation process.","ref":"MscmpSystDb.html#create_datastore/2-errors"},{"type":"function","title":"MscmpSystDb.create_datastore_contexts/3","doc":"Creates database roles to back all requested Datastore contexts.\n\nUsually Datastore contexts are created in the `create_datastore/1` call, but\nover the course of time it is expected that applications may define new\ncontexts as needs change.  This function allows applications to add new\ncontexts to existing Datastores.","ref":"MscmpSystDb.html#create_datastore_contexts/3"},{"type":"function","title":"Parameters - MscmpSystDb.create_datastore_contexts/3","doc":"* `datastore_options` - The Datastore configuration struct to use for the\n    operation.\n\n  * `datastore_contexts` - A nonempty list of Datastore contexts to create.\n\n  * `opts` - a Keyword List of additional key/value call configurations.  See\n    the \"Options\" section for details..","ref":"MscmpSystDb.html#create_datastore_contexts/3-parameters"},{"type":"function","title":"Options - MscmpSystDb.create_datastore_contexts/3","doc":"* `:db_shutdown_timeout` (`t:timeout/0`) - The timeout in milliseconds to wait for the database to shutdown prior to\n  raising an error. The default value is `60000`.","ref":"MscmpSystDb.html#create_datastore_contexts/3-options"},{"type":"function","title":"Returns - MscmpSystDb.create_datastore_contexts/3","doc":"* `{:ok, nonempty_list(ContextState.t())}` if successful, where\n    `nonempty_list(ContextState.t())` is a list of `ContextState` structs\n    representing the state of each created context.\n\n  * `{:error, MscmpSystError.t()}` if there is an error creating the contexts.","ref":"MscmpSystDb.html#create_datastore_contexts/3-returns"},{"type":"function","title":"MscmpSystDb.current_datastore_context/0","doc":"Retrieves either atom name or `t:pid/0` of the currently established Datastore\ncontext, unless no context has been established.","ref":"MscmpSystDb.html#current_datastore_context/0"},{"type":"function","title":"Returns - MscmpSystDb.current_datastore_context/0","doc":"* `atom()` - The currently established Datastore Context atom name, if the\n    Datastore Context was named and established for the session using the\n    standard Ecto dynamic repository naming conventions.\n\n  * `pid()` - The currently established Datastore Context pid, if the current\n    Datastore Context was set using a pid.  This will be the case when string\n    based Datastore Context names were used.\n\n  * `nil` - If no Datastore Context was established for the session.","ref":"MscmpSystDb.html#current_datastore_context/0-returns"},{"type":"function","title":"MscmpSystDb.delete/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.delete/2`\nfunction.","ref":"MscmpSystDb.html#delete/2"},{"type":"function","title":"MscmpSystDb.delete!/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.delete!/2`\nfunction.","ref":"MscmpSystDb.html#delete!/2"},{"type":"function","title":"MscmpSystDb.delete_all/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.delete_all/2`\nfunction.","ref":"MscmpSystDb.html#delete_all/2"},{"type":"function","title":"MscmpSystDb.drop_datastore/2","doc":"Drops a Datastore along with its contexts.\n\nDropping a Datastore will drop the database backing the Datastore from the\ndatabase server as well as all of the database roles associated with the\nDatastore as defined by the provided database options.\n\nPrior to dropping the Datastore, all active connections to the Datastore\nshould be terminated, or the function call could fail.\n\n> #### Warning! {: .warning}\n>\n> This is an irreversible, destructive action. Any successful call will result\n> in permanent data loss.","ref":"MscmpSystDb.html#drop_datastore/2"},{"type":"function","title":"Parameters - MscmpSystDb.drop_datastore/2","doc":"* `datastore_options` - A `DatastoreOptions` struct defining the Datastore\n    and its contexts.\n\n  * `opts` - a Keyword List of additional key/value call configurations.  See\n    the \"Options\" section for details.","ref":"MscmpSystDb.html#drop_datastore/2-parameters"},{"type":"function","title":"Options - MscmpSystDb.drop_datastore/2","doc":"* `:db_shutdown_timeout` (`t:timeout/0`) - The timeout in milliseconds to wait for the database to shutdown prior to\n  raising an error. The default value is `60000`.","ref":"MscmpSystDb.html#drop_datastore/2-options"},{"type":"function","title":"Returns - MscmpSystDb.drop_datastore/2","doc":"* `:ok` if the Datastore is successfully dropped.\n  * `{:error, MscmpSystError.t()}` if there's an error during the drop process.","ref":"MscmpSystDb.html#drop_datastore/2-returns"},{"type":"function","title":"Errors - MscmpSystDb.drop_datastore/2","doc":"The function may return an error with code `:database_error` if there's a failure\nin any step of the Datastore drop process, such as being unable to drop the\ndatabase or roles due to active connections.","ref":"MscmpSystDb.html#drop_datastore/2-errors"},{"type":"function","title":"MscmpSystDb.drop_datastore_contexts/3","doc":"Drops the requested Datastore contexts.\n\nThis function will drop the database roles from the database server that\ncorrespond to the requested Datastore contexts.  You should be sure that the\nrequested Datastore contexts do not have active database connections when\ncalling this function as active connections are likely to result in an\nerror condition.","ref":"MscmpSystDb.html#drop_datastore_contexts/3"},{"type":"function","title":"Parameters - MscmpSystDb.drop_datastore_contexts/3","doc":"* `datastore_options` - The Datastore configuration struct to use for the\n    operation.\n\n  * `datastore_contexts` - A nonempty list of Datastore contexts to drop.\n\n  * `opts` - a Keyword List of additional key/value call configurations.  See\n    the \"Options\" section for details..","ref":"MscmpSystDb.html#drop_datastore_contexts/3-parameters"},{"type":"function","title":"Options - MscmpSystDb.drop_datastore_contexts/3","doc":"* `:db_shutdown_timeout` (`t:timeout/0`) - The timeout in milliseconds to wait for the database to shutdown prior to\n  raising an error. The default value is `60000`.","ref":"MscmpSystDb.html#drop_datastore_contexts/3-options"},{"type":"function","title":"Returns - MscmpSystDb.drop_datastore_contexts/3","doc":"* `:ok` on success\n\n  * `{:error, reason}` on failure.","ref":"MscmpSystDb.html#drop_datastore_contexts/3-returns"},{"type":"function","title":"MscmpSystDb.exists?/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.exists?/2`\nfunction.","ref":"MscmpSystDb.html#exists?/2"},{"type":"function","title":"MscmpSystDb.get/3","doc":"A convenience function that currently wraps the `c:Ecto.Repo.get/3`\nfunction.","ref":"MscmpSystDb.html#get/3"},{"type":"function","title":"MscmpSystDb.get!/3","doc":"A convenience function that currently wraps the `c:Ecto.Repo.get!/3`\nfunction.","ref":"MscmpSystDb.html#get!/3"},{"type":"function","title":"MscmpSystDb.get_by/3","doc":"A convenience function that currently wraps the `c:Ecto.Repo.get_by/3`\nfunction.","ref":"MscmpSystDb.html#get_by/3"},{"type":"function","title":"MscmpSystDb.get_by!/3","doc":"A convenience function that currently wraps the `c:Ecto.Repo.get_by!/3`\nfunction.","ref":"MscmpSystDb.html#get_by!/3"},{"type":"function","title":"MscmpSystDb.get_datastore_context_states/2","doc":"Returns the state of the requested Datastore contexts.\n\nThis function will check for each given context that: it exists, whether or not\ndatabase connections may be started for it, and whether or not database\nconnections have been started.\n\nNote that only startable contexts are included in this list.  If the context\nis not startable or has `id: nil`, the context will be excluded from the\nresults of this function.","ref":"MscmpSystDb.html#get_datastore_context_states/2"},{"type":"function","title":"Parameters - MscmpSystDb.get_datastore_context_states/2","doc":"* `datastore_options` - A `DatastoreOptions` struct defining the Datastore\n    and its contexts.\n\n  * `opts` - a Keyword List of additional key/value call configurations.  See\n    the \"Options\" section for details..","ref":"MscmpSystDb.html#get_datastore_context_states/2-parameters"},{"type":"function","title":"Options - MscmpSystDb.get_datastore_context_states/2","doc":"* `:db_shutdown_timeout` (`t:timeout/0`) - The timeout in milliseconds to wait for the database to shutdown prior to\n  raising an error. The default value is `60000`.\n\n* `:context_registry` (`:global` or `t:module/0`) - Identifies a process registry which is used to register Datastore\n  Context (`Ecto.Repo`) instances. A valid value for this option can be\n  either `:global` to use the Erlang `:global` module or any other module\n  which implements a :global compatible API.","ref":"MscmpSystDb.html#get_datastore_context_states/2-options"},{"type":"function","title":"Returns - MscmpSystDb.get_datastore_context_states/2","doc":"* `{:ok, list(ContextState.t())}` if successful, where\n    `list(ContextState.t())` is a list of `ContextState` structs for each\n    context.\n\n  * `{:error, MscmpSystError.t()}` if there's an error retrieving the context\n    states.","ref":"MscmpSystDb.html#get_datastore_context_states/2-returns"},{"type":"function","title":"Errors - MscmpSystDb.get_datastore_context_states/2","doc":"The function may return an error with code `:database_error` if there's a\n  failure in retrieving the context states.","ref":"MscmpSystDb.html#get_datastore_context_states/2-errors"},{"type":"function","title":"MscmpSystDb.get_datastore_state/2","doc":"Returns the state of the Datastore and its contexts based on the provided\nDatastore Options.\n\nThis function performs the following checks:\n\n  1. Verifies the existence of the database backing the Datastore.\n  2. Checks the state of each database role representing the Datastore\n     Contexts.\n  3. Determines if database connections for the Datastore Contexts have been\n    started.","ref":"MscmpSystDb.html#get_datastore_state/2"},{"type":"function","title":"Parameters - MscmpSystDb.get_datastore_state/2","doc":"* `datastore_options` - A `DatastoreOptions` struct defining the Datastore\n    and its contexts.\n\n  * `opts` - a Keyword List of additional key/value call configurations.  See\n    the \"Options\" section for details.","ref":"MscmpSystDb.html#get_datastore_state/2-parameters"},{"type":"function","title":"Options - MscmpSystDb.get_datastore_state/2","doc":"* `:db_shutdown_timeout` (`t:timeout/0`) - The timeout in milliseconds to wait for the database to shutdown prior to\n  raising an error. The default value is `60000`.\n\n* `:context_registry` (`:global` or `t:module/0`) - Identifies a process registry which is used to register Datastore\n  Context (`Ecto.Repo`) instances. A valid value for this option can be\n  either `:global` to use the Erlang `:global` module or any other module\n  which implements a :global compatible API.","ref":"MscmpSystDb.html#get_datastore_state/2-options"},{"type":"function","title":"Returns - MscmpSystDb.get_datastore_state/2","doc":"* `{:ok, database_state, context_states}` - if successful, where:\n    - `database_state` is the state of the Datastore database (`:ready` or\n      `:not_found`)\n    - `context_states` is a list of `ContextState` structs for each context\n\n  * `{:error, MscmpSystError.t()}` - if there's an error retrieving the\n    Datastore state.","ref":"MscmpSystDb.html#get_datastore_state/2-returns"},{"type":"function","title":"Errors - MscmpSystDb.get_datastore_state/2","doc":"The function may return an error with code `:database_error` if there's a failure\nin retrieving the Datastore state.","ref":"MscmpSystDb.html#get_datastore_state/2-errors"},{"type":"function","title":"MscmpSystDb.get_datastore_version/2","doc":"Returns the most recently installed database migration version number.\n\nThe version is returned as the string representation of our segmented version\nnumber in the format `RR.VV.UUU.SSSSSS.MMM` where each segment represents a\nBase 36 number for specific versioning purposes.  The segments are defined as:\n\n  * `RR` - The major feature release number in the decimal range of 0 - 1,295.\n\n  * `VV` - The minor feature version within the release in the decimal range\n    of 0 - 1,295.\n\n  * `UUU` - The update patch number of the specified release/version in the\n    decimal range of 0 - 46,655.\n\n  * `SSSSSS` - Sponsor or client number for whom the specific migration or\n    version is being produced for in the decimal range of 0 - 2,176,782,335.\n\n  * `MMM` - Sponsor modification number in the decimal range of 0 - 46,655.\n\nSee `mix builddb` for further explanation version number segment meanings.","ref":"MscmpSystDb.html#get_datastore_version/2"},{"type":"function","title":"Parameters - MscmpSystDb.get_datastore_version/2","doc":"* `datastore_options` - The Datastore configuration struct to use for the\n    operation.\n\n  * `opts` - a Keyword List of additional key/value call configurations.  See\n    the \"Options\" section for details..","ref":"MscmpSystDb.html#get_datastore_version/2-parameters"},{"type":"function","title":"Options - MscmpSystDb.get_datastore_version/2","doc":"* `:db_shutdown_timeout` (`t:timeout/0`) - The timeout in milliseconds to wait for the database to shutdown prior to\n  raising an error. The default value is `60000`.","ref":"MscmpSystDb.html#get_datastore_version/2-options"},{"type":"function","title":"Returns - MscmpSystDb.get_datastore_version/2","doc":"* `{:ok, version}` - The current version of the Datastore as a string.\n\n  * `{:error, reason}` - An error occurred.","ref":"MscmpSystDb.html#get_datastore_version/2-returns"},{"type":"function","title":"MscmpSystDb.in_transaction?/0","doc":"A convenience function that currently wraps the `c:Ecto.Repo.in_transaction?/0`\nfunction.","ref":"MscmpSystDb.html#in_transaction?/0"},{"type":"function","title":"MscmpSystDb.insert/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.insert/2`\nfunction.","ref":"MscmpSystDb.html#insert/2"},{"type":"function","title":"MscmpSystDb.insert!/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.insert!/2`\nfunction.","ref":"MscmpSystDb.html#insert!/2"},{"type":"function","title":"MscmpSystDb.insert_all/3","doc":"A convenience function that currently wraps the `c:Ecto.Repo.insert_all/3`\nfunction.","ref":"MscmpSystDb.html#insert_all/3"},{"type":"function","title":"MscmpSystDb.insert_or_update/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.insert_or_update/2`\nfunction.","ref":"MscmpSystDb.html#insert_or_update/2"},{"type":"function","title":"MscmpSystDb.insert_or_update!/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.insert_or_update!/2`\nfunction.","ref":"MscmpSystDb.html#insert_or_update!/2"},{"type":"function","title":"MscmpSystDb.load/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.load/2`\nfunction.","ref":"MscmpSystDb.html#load/2"},{"type":"function","title":"MscmpSystDb.one/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.one/2`\nfunction.","ref":"MscmpSystDb.html#one/2"},{"type":"function","title":"MscmpSystDb.one!/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.one!/2`\nfunction.","ref":"MscmpSystDb.html#one!/2"},{"type":"function","title":"MscmpSystDb.preload/3","doc":"A convenience function that currently wraps the `c:Ecto.Repo.preload/3`\nfunction.","ref":"MscmpSystDb.html#preload/3"},{"type":"function","title":"MscmpSystDb.prepare_query/3","doc":"A convenience function that currently wraps the `c:Ecto.Repo.prepare_query/3`\nfunction.","ref":"MscmpSystDb.html#prepare_query/3"},{"type":"function","title":"MscmpSystDb.put_datastore_context/1","doc":"Establishes the Datastore Context to use for Datastore interactions in the\nElixir process where this function is called.\n\nUsing this function will set the given Datastore Context in the Process\nDictionary of the process from which the function call is made.\n\nThis version of the function uses normal Ecto dynamic repository naming\nconventions.","ref":"MscmpSystDb.html#put_datastore_context/1"},{"type":"function","title":"Parameters - MscmpSystDb.put_datastore_context/1","doc":"* `context` - The Datastore Context to use for Datastore interactions in the\n    Elixir process where this function is called.","ref":"MscmpSystDb.html#put_datastore_context/1-parameters"},{"type":"function","title":"Returns - MscmpSystDb.put_datastore_context/1","doc":"* `atom()` - The previously set Datastore Context value, if one was\n    previously set.\n\n  * `nil` - If no Datastore Context was previously set.","ref":"MscmpSystDb.html#put_datastore_context/1-returns"},{"type":"function","title":"MscmpSystDb.put_datastore_context/2","doc":"Establishes the Datastore Context to use for Datastore interactions in the\nElixir process where this function is called.\n\nUsing this function will set the given Datastore Context in the Process\nDictionary of the process from which the function call is made.\n\nThis version of the function allows you identify a Datastore Context using a\nstring based name registered in the provided registry.  Naturally, the\nDatastore Context must have been started using a string based name for this\nmethod to be applicable.","ref":"MscmpSystDb.html#put_datastore_context/2"},{"type":"function","title":"Parameters - MscmpSystDb.put_datastore_context/2","doc":"* `context` - The Datastore Context to use for Datastore interactions in the\n    Elixir process where this function is called.","ref":"MscmpSystDb.html#put_datastore_context/2-parameters"},{"type":"function","title":"Returns - MscmpSystDb.put_datastore_context/2","doc":"* `atom()` - The previously set Datastore Context value, if one was\n    previously set.\n\n  * `nil` - If no Datastore Context was previously set.","ref":"MscmpSystDb.html#put_datastore_context/2-returns"},{"type":"function","title":"MscmpSystDb.query_for_many/3","doc":"Executes a database query and returns all rows.","ref":"MscmpSystDb.html#query_for_many/3"},{"type":"function","title":"MscmpSystDb.query_for_many!/3","doc":"Executes a database query and returns all rows.  Raises on error.","ref":"MscmpSystDb.html#query_for_many!/3"},{"type":"function","title":"MscmpSystDb.query_for_none/3","doc":"Executes a database query but returns no results.","ref":"MscmpSystDb.html#query_for_none/3"},{"type":"function","title":"MscmpSystDb.query_for_none!/3","doc":"Executes a database query but returns no results.  Raises on error.","ref":"MscmpSystDb.html#query_for_none!/3"},{"type":"function","title":"MscmpSystDb.query_for_one/3","doc":"Executes a database query and returns a single row.","ref":"MscmpSystDb.html#query_for_one/3"},{"type":"function","title":"MscmpSystDb.query_for_one!/3","doc":"Executes a database query and returns a single row.  Raises on error.","ref":"MscmpSystDb.html#query_for_one!/3"},{"type":"function","title":"MscmpSystDb.query_for_value/3","doc":"Executes a database query returning a single value.","ref":"MscmpSystDb.html#query_for_value/3"},{"type":"function","title":"MscmpSystDb.query_for_value!/3","doc":"Executes a database query returning a single value.  Raises on error.","ref":"MscmpSystDb.html#query_for_value!/3"},{"type":"function","title":"MscmpSystDb.record_count/2","doc":"Returns the record count of the given queryable argument.","ref":"MscmpSystDb.html#record_count/2"},{"type":"function","title":"MscmpSystDb.reload/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.reload/2`\nfunction.","ref":"MscmpSystDb.html#reload/2"},{"type":"function","title":"MscmpSystDb.reload!/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.reload!/2`\nfunction.","ref":"MscmpSystDb.html#reload!/2"},{"type":"function","title":"MscmpSystDb.rollback/1","doc":"A convenience function that currently wraps the `c:Ecto.Repo.rollback/1`\nfunction.","ref":"MscmpSystDb.html#rollback/1"},{"type":"function","title":"MscmpSystDb.start_datastore/2","doc":"Starts database connections for all of login contexts in the Datastore options.","ref":"MscmpSystDb.html#start_datastore/2"},{"type":"function","title":"Parameters: - MscmpSystDb.start_datastore/2","doc":"* `datastore_options` - A `DatastoreOptions` struct containing the login\n    contexts.\n\n  * `opts` - a Keyword List of additional key/value call configurations.  See\n    the \"Options\" section for details.","ref":"MscmpSystDb.html#start_datastore/2-parameters"},{"type":"function","title":"Options: - MscmpSystDb.start_datastore/2","doc":"* `:context_registry` (`:global` or `t:module/0`) - Identifies a process registry which is used to register Datastore\n  Context (`Ecto.Repo`) instances. A valid value for this option can be\n  either `:global` to use the Erlang `:global` module or any other module\n  which implements a :global compatible API.\n\n* `:datastore_name` (`t:GenServer.name/0` or `nil`) - Specifies the name for the Datastore Supervisor. If this option is not\n  provided, the `datastore_options.datastore_name` value will be used as\n  the default name for the Datastore Supervisor.  If this value identifies a\n  process registry (e.g. `{:via, Registry, {MyApp.Registry, :my_registry}}`),\n  this registry will become the default registry for all Datastore Contexts;\n  a valid `context_registry` value overrides this default.","ref":"MscmpSystDb.html#start_datastore/2-options"},{"type":"function","title":"Returns: - MscmpSystDb.start_datastore/2","doc":"* `{:ok, :all_started | :some_started, list(Types.ContextState.t())}` -\n    Returns `:ok` with either `:all_started` or `:some_started` atom\n    indicating if all or some of the contexts were started successfully, along\n    with a list of `Types.ContextState` structs representing the state of each\n    context.\n\n  * `{:error, MscmpSystError.t()}` - Returns an error tuple with a\n    `MscmpSystError` struct if there was an error starting the database\n    connections.","ref":"MscmpSystDb.html#start_datastore/2-returns"},{"type":"function","title":"MscmpSystDb.start_datastore_context/3","doc":"Starts a database connection for the specific Datastore context provided.","ref":"MscmpSystDb.html#start_datastore_context/3"},{"type":"function","title":"Parameters: - MscmpSystDb.start_datastore_context/3","doc":"* `datastore_options` - The `t:MscmpSystDb.DatastoreOptions.t/0` struct\n    containing the Datastore options.\n\n  * `context` - The `t:MscmpSystDb.Types.context_name/0` atom or\n    `t:DatastoreContext.t/0` struct representing the Datastore\n    context.\n\n  * `opts` - a Keyword List of additional key/value call configurations.  See\n    the \"Options\" section for details.","ref":"MscmpSystDb.html#start_datastore_context/3-parameters"},{"type":"function","title":"Options: - MscmpSystDb.start_datastore_context/3","doc":"* `:context_registry` (`:global` or `t:module/0`) - Identifies a process registry which is used to register Datastore\n  Context (`Ecto.Repo`) instances. A valid value for this option can be\n  either `:global` to use the Erlang `:global` module or any other module\n  which implements a :global compatible API.","ref":"MscmpSystDb.html#start_datastore_context/3-options"},{"type":"function","title":"Returns: - MscmpSystDb.start_datastore_context/3","doc":"* `{:ok, pid()}` on success, where `pid()` is the process ID of the\n    Datastore context.\n\n  * `{:error, reason}` on failure, where `reason` is a\n    `t:MscmpSystDb.MscmpSystError.t/0` struct.","ref":"MscmpSystDb.html#start_datastore_context/3-returns"},{"type":"function","title":"MscmpSystDb.stop_datastore/2","doc":"Disconnects the database connections for all of the login Datastore option\ncontexts.","ref":"MscmpSystDb.html#stop_datastore/2"},{"type":"function","title":"Parameters - MscmpSystDb.stop_datastore/2","doc":"* `datastore_options_or_contexts` - A `DatastoreOptions` struct, a list of\n    `DatastoreContext` structs, or a list of maps with `:context_name` keys.\n\n  * `opts` - a Keyword List of additional key/value call configurations.  See\n    the \"Options\" section for details.","ref":"MscmpSystDb.html#stop_datastore/2-parameters"},{"type":"function","title":"Options - MscmpSystDb.stop_datastore/2","doc":"* `:db_shutdown_timeout` (`t:timeout/0`) - The timeout in milliseconds to wait for the database to shutdown prior to\n  raising an error. The default value is `60000`.\n\n* `:context_registry` (`:global` or `t:module/0`) - Identifies a process registry which is used to register Datastore\n  Context (`Ecto.Repo`) instances. A valid value for this option can be\n  either `:global` to use the Erlang `:global` module or any other module\n  which implements a :global compatible API.","ref":"MscmpSystDb.html#stop_datastore/2-options"},{"type":"function","title":"Returns - MscmpSystDb.stop_datastore/2","doc":"* `:ok` if the connections were successfully stopped.\n\n  * `{:error, reason}` if there was an error stopping the connections.","ref":"MscmpSystDb.html#stop_datastore/2-returns"},{"type":"function","title":"MscmpSystDb.stop_datastore_context/2","doc":"Disconnects the database connection for the specific Datastore context provided.","ref":"MscmpSystDb.html#stop_datastore_context/2"},{"type":"function","title":"Parameters - MscmpSystDb.stop_datastore_context/2","doc":"* `context` - The Datastore context to disconnect. This can be a `pid()`,\n    `atom()`, or `DatastoreContext` struct.\n\n  * `opts` - a Keyword List of additional key/value call configurations.  See\n    the \"Options\" section for details.","ref":"MscmpSystDb.html#stop_datastore_context/2-parameters"},{"type":"function","title":"Options - MscmpSystDb.stop_datastore_context/2","doc":"* `:db_shutdown_timeout` (`t:timeout/0`) - The timeout in milliseconds to wait for the database to shutdown prior to\n  raising an error. The default value is `60000`.\n\n* `:context_registry` (`:global` or `t:module/0`) - Identifies a process registry which is used to register Datastore\n  Context (`Ecto.Repo`) instances. A valid value for this option can be\n  either `:global` to use the Erlang `:global` module or any other module\n  which implements a :global compatible API.","ref":"MscmpSystDb.html#stop_datastore_context/2-options"},{"type":"function","title":"Returns - MscmpSystDb.stop_datastore_context/2","doc":"* `:ok` - On successful stopping of the requested Datastore Context.","ref":"MscmpSystDb.html#stop_datastore_context/2-returns"},{"type":"function","title":"MscmpSystDb.stream/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.stream/2`\nfunction.","ref":"MscmpSystDb.html#stream/2"},{"type":"function","title":"MscmpSystDb.transaction/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.transaction/2`\nfunction.","ref":"MscmpSystDb.html#transaction/2"},{"type":"function","title":"MscmpSystDb.update/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.update/2`\nfunction.","ref":"MscmpSystDb.html#update/2"},{"type":"function","title":"MscmpSystDb.update!/2","doc":"A convenience function that currently wraps the `c:Ecto.Repo.update!/2`\nfunction.","ref":"MscmpSystDb.html#update!/2"},{"type":"function","title":"MscmpSystDb.update_all/3","doc":"A convenience function that currently wraps the `c:Ecto.Repo.update_all/3`\nfunction.","ref":"MscmpSystDb.html#update_all/3"},{"type":"function","title":"MscmpSystDb.upgrade_datastore/4","doc":"Updates a Datastore to the most current version of the given type of Datastore.\n\nIf a Datastore is already up-to-date, this function is basically a \"no-op\"\nthat returns the current version.  Otherwise, database migrations for the\nDatastore type are applied until the Datastore is fully upgraded to the most\nrecent schema version.","ref":"MscmpSystDb.html#upgrade_datastore/4"},{"type":"function","title":"Parameters: - MscmpSystDb.upgrade_datastore/4","doc":"* `datastore_options` - The `DatastoreOptions` struct containing the\n    Datastore configuration.\n\n  * `datastore_type` - A string representing the type of the Datastore which\n    determines which migrations are applied.\n\n  * `migration_bindings` - A keyword list of bindings to be used in the\n    migration scripts.\n\n  * `opts` - a Keyword List of additional key/value call configurations.  See\n    the \"Options\" section for details.","ref":"MscmpSystDb.html#upgrade_datastore/4-parameters"},{"type":"function","title":"Options: - MscmpSystDb.upgrade_datastore/4","doc":"* `:db_shutdown_timeout` (`t:timeout/0`) - The timeout in milliseconds to wait for the database to shutdown prior to\n  raising an error. The default value is `60000`.\n\n* `:migrations_schema` (`t:String.t/0`) - The database maintenance schema used to host the migrations state table. The default value is `\"ms_syst_db\"`.\n\n* `:migrations_table` (`t:String.t/0`) - The name of the table used to store database migration state data. The default value is `\"migrations\"`.\n\n* `:migrations_root_dir` (`t:String.t/0`) - The directory relative to the project directory where the database\n  migration files are located. The default value is `\"priv/database\"`.","ref":"MscmpSystDb.html#upgrade_datastore/4-options"},{"type":"function","title":"Returns: - MscmpSystDb.upgrade_datastore/4","doc":"* `{:ok, [String.t()]}` - A tuple containing `:ok` and a list of migration\n    scripts that were applied.\n\n  * `{:error, MscmpSystError.t()}` - A tuple containing `:error` and an\n    `MscmpSystError` struct representing the error that occurred.","ref":"MscmpSystDb.html#upgrade_datastore/4-returns"},{"type":"module","title":"MscmpSystDb.Types","doc":"Defines public types for use with the MscmpSystDb module.","ref":"MscmpSystDb.Types.html"},{"type":"type","title":"MscmpSystDb.Types.context_name/0","doc":"The value type for names which describe a specific instance of an\nApplication's Datastore Context.\n\nA Context Name provides a reference to a specific Instance's database access\nin a way that decouples the application reference name from the database role\nwhich that name represents.\n\nThis name will commonly be used as the registered name for the Datastore\nContext when registering the associated database repository `pid` value.","ref":"MscmpSystDb.Types.html#t:context_name/0"},{"type":"type","title":"MscmpSystDb.Types.context_registry/0","doc":"The allowable Datastore Context name registration options.\n\nValues of this type describe the available options for registering a Datastore\nContext name.  The options are:\n\n  * `:global` - the Datastore Context name is registered globally and can be\n    using the Erlang `:global` registry.\n\n  * `{:via, module()}` - the Datastore Context name is registered\n    using the identified module which must implement the Registry behaviour.\n\n  * `nil` - the Datastore Context name will be registered locally using the\n    VM's built-in registration mechanisms.  In this case the Datastore Context\n    name must be represented as an atom.","ref":"MscmpSystDb.Types.html#t:context_registry/0"},{"type":"type","title":"MscmpSystDb.Types.context_role/0","doc":"The database role name for the specific access context defined by the\n`context_name()`.","ref":"MscmpSystDb.Types.html#t:context_role/0"},{"type":"type","title":"MscmpSystDb.Types.context_service_name/0","doc":"The extended naming value of a Datastore Context for use when starting a\nDatastore Context.\n\nThis name can include process registry information and takes the same for as\nthat allowed for `GenServer` naming.","ref":"MscmpSystDb.Types.html#t:context_service_name/0"},{"type":"type","title":"MscmpSystDb.Types.context_state_values/0","doc":"Defines the available states in which a context may exist.\n\n  * `:not_found` - The database role backing the context was not found on the\n    Datastore database server.\n\n  * `:not_ready` - The database role backing the context exists, but is not\n    completely set up yet.  This is an interim stage that usually has to cross\n    transaction boundaries.\n\n  * `:not_started` - When starting contexts the system doesn't check for the\n     existence of each context which in turn means that a start failure could\n     be indicative of either non-existence or some other problem.  In these\n     start-up scenarios the state would be `:not_started`.\n\n  * `:ready` - The context was found and may be connected to the database, but\n    the database connections for the context have not been started yet.\n\n  * `:started` - The context was found and database connections for the\n    context have already been started.","ref":"MscmpSystDb.Types.html#t:context_state_values/0"},{"type":"type","title":"MscmpSystDb.Types.database_state_values/0","doc":"Values indicating the state of the database which backs a given Datastore.\n\n  * `:not_found` - The database for the Datastore does not exist on the\n    database server.\n\n  * `:ready` - The database is ready for further processing by the migrations\n    subsystem.","ref":"MscmpSystDb.Types.html#t:database_state_values/0"},{"type":"type","title":"MscmpSystDb.Types.datastore_name/0","doc":"A type describing the allowed values for use in datastore_naming.","ref":"MscmpSystDb.Types.html#t:datastore_name/0"},{"type":"type","title":"MscmpSystDb.Types.datastore_service_name/0","doc":"The extended naming value of a Datastore for use when starting a Datastore.\n\nThis name can include process registry information and takes the same for as\nthat allowed for `GenServer` naming.","ref":"MscmpSystDb.Types.html#t:datastore_service_name/0"},{"type":"type","title":"MscmpSystDb.Types.db_type_comparison_operators/0","doc":"Defines operators for use in comparison functions.\n\nThese operators are used in conjunction with the `MscmpSystDb.DbTypes`\nand `MscmpSystDb.DbTypes.Range` protocols.\n\nThe range related operator values are generally the same as those defined by\nthe PostgreSQL database range types, but there are some small differences.\n\n  * `:gt` - left is greater than right.\n\n  * `:lt` - left is less than right.\n\n  * `:eq` - the values are equal.\n\n  * `:lcr` - left contains right.\n\n  * `:rcl` - right contains left.\n\n  * `:gto` - greater than overlapping.\n\n  * `:lto` - less than overlapping.\n\n# Examples\n\nGreater Than (`:gt`)\n\n    iex> left_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 200,\n    ...>     upper: 210\n    ...>   }\n    iex> right_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 100,\n    ...>     upper: 110\n    ...>   }\n    iex> MscmpSystDb.DbTypes.compare(left_range, right_range)\n    :gt\n\nLess Than (`:lt`)\n\n    iex> left_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 100,\n    ...>     upper: 110\n    ...>   }\n    iex> right_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 200,\n    ...>     upper: 210\n    ...>   }\n    iex> MscmpSystDb.DbTypes.compare(left_range, right_range)\n    :lt\n\nEqual (`:eq`)\n\n    iex> left_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 100,\n    ...>     upper: 110\n    ...>   }\n    iex> right_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 100,\n    ...>     upper: 110\n    ...>   }\n    iex> MscmpSystDb.DbTypes.compare(left_range, right_range)\n    :eq\n\nLeft Contains Right (`:lcr`)\n\n    iex> left_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 90,\n    ...>     upper: 110\n    ...>   }\n    iex> right_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 100,\n    ...>     upper: 110\n    ...>   }\n    iex> MscmpSystDb.DbTypes.compare(left_range, right_range)\n    :lcr\n\nRight Contains Left (`:rcl`)\n\n    iex> left_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 100,\n    ...>     upper: 110\n    ...>   }\n    iex> right_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 100,\n    ...>     upper: 111\n    ...>   }\n    iex> MscmpSystDb.DbTypes.compare(left_range, right_range)\n    :rcl\n\n\nGreater Than Overlapping (`:gto`)\n\n    iex> left_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 150,\n    ...>     upper: 250\n    ...>   }\n    iex> right_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 100,\n    ...>     upper: 175\n    ...>   }\n    iex> MscmpSystDb.DbTypes.compare(left_range, right_range)\n    :gto\n\n\nLess Than Overlapping (`:lto`)\n\n    iex> left_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 100,\n    ...>     upper: 150\n    ...>   }\n    iex> right_range =\n    ...>   %MscmpSystDb.DbTypes.IntegerRange{\n    ...>     lower: 125,\n    ...>     upper: 175\n    ...>   }\n    iex> MscmpSystDb.DbTypes.compare(left_range, right_range)\n    :lto","ref":"MscmpSystDb.Types.html#t:db_type_comparison_operators/0"},{"type":"type","title":"MscmpSystDb.Types.migration_state_values/0","doc":"Defines the available states in which a Datastore might exist in relation to\nits schema migrations.\n\n  * `:not_initialized` - The Datastore does not have the table which manages\n    the migrations installed.  This is also the value reported when the\n    `database_state_values()` value for the Datastore is `:not_found`.\n\n  * `:not_updated` - The Datastore database exists and has been initialized,\n    but does not have the most recent migrations available applied per the\n    migrations management table.\n\n  * `:ready` - The migrations are fully up-to-date and the Datastore is ready\n    to serve the application as needed.","ref":"MscmpSystDb.Types.html#t:migration_state_values/0"},{"type":"type","title":"MscmpSystDb.Types.timex_shift_options/0","doc":"Options which are expected by the `Timex` library.\n\nThe `MscmpSystDb.DbTypes.Interval` struct can be converted into a form\nwhich can be consumed by `Timex.shift/2` and this type defines the possible\nreturn values.\n\nNote that this type should closely match the `t:Timex.shift_options` types\nexcept that we limit it to the types present in the\n`t:MscmpSystDb.DbTypes.Interval.t/0` data type.","ref":"MscmpSystDb.Types.html#t:timex_shift_options/0"},{"type":"module","title":"MscmpSystDb.Types.BoundsCompareResult","doc":"The comparison operators for both the lower and upper bounds of a range type.\n\nThere are cases where normal comparisons are too coarse-grained to provide a\nmeaningful result when dealing with ranges.  In these cases you need the\ndetailed lower/upper comparison results.","ref":"MscmpSystDb.Types.BoundsCompareResult.html"},{"type":"type","title":"MscmpSystDb.Types.BoundsCompareResult.t/0","doc":"The comparison operators for both the lower and upper bounds of a range type.\n\nSee `MscmpSystDb.Types.BoundsCompareResult` for more.","ref":"MscmpSystDb.Types.BoundsCompareResult.html#t:t/0"},{"type":"module","title":"MscmpSystDb.Types.ContextState","doc":"A struct for reporting the runtime state of Datastore Contexts.","ref":"MscmpSystDb.Types.ContextState.html"},{"type":"type","title":"MscmpSystDb.Types.ContextState.t/0","doc":"A struct for reporting the runtime state of Datastore Contexts.","ref":"MscmpSystDb.Types.ContextState.html#t:t/0"},{"type":"type","title":"Attributes - MscmpSystDb.Types.ContextState.t/0","doc":"* `:context` - identifies the name of the Datastore Context for which\n  runtime state is being reported.\n\n  * `:state` - indicates the current runtime state of the named Datastore\n  Context.  See `t:MscmpSystDb.Types.context_state_values/0` for more.\n\n  * `:pid` - the process identifier of the Datastore Context supervisor\n  process.  Suitable for use with `MscmpSystDb.put_datastore_context/1`.","ref":"MscmpSystDb.Types.ContextState.html#t:t/0-attributes"},{"type":"module","title":"MscmpSystDb.Types.DatastoreContext","doc":"A struct defining an application level security context which maps to a\nspecific database role.\n\nDatastore contexts allow the application to access the database using database\nroles which are limited by their database security configuration.","ref":"MscmpSystDb.Types.DatastoreContext.html"},{"type":"type","title":"MscmpSystDb.Types.DatastoreContext.t/0","doc":"A struct defining an application level security context which maps to a\nspecific database role.","ref":"MscmpSystDb.Types.DatastoreContext.html#t:t/0"},{"type":"type","title":"Attributes - MscmpSystDb.Types.DatastoreContext.t/0","doc":"* `:context_name` - the application's identifier for a specific security context.\n    This isn't specific to a particular database, but to the application\n    overall.\n\n  * `:description` - a user friendly description of the context.\n\n  * `:database_role` - maps the application context to a specific database\n    role.  When establishing a connection to a database, this is the database\n    role name that will be used.\n\n  * `:database_password` - the password used to connect the `:database_role`\n    to the database server.\n\n  * `:starting_pool_size` - the number of database connections to initially\n    open for this context.\n\n  * `:start_context` - when working with application database connections\n    which are started and pooled at application start time, this value\n    indicates whether or not the specific context should be started as normal.\n    For normal startup to take place, both this value and the `:login_context`\n    value must be true.  This setting is disregarded in operations involving\n    database connections which are established on demand as needed, such as\n    DBA related connections.\n\n  * `:login_context` - if `true`, the context is a normal context associated\n    with a database login role and will be used in establishing connections to\n    the database.  If `false`, the context is an administrative context which\n    is only used in security definitions within the database.  Database owner\n    roles, roles which own all of the application database tables/functions\n    would typically not be login roles, even though the are highly privileged\n    when their context is active in a database session. (default: true)\n\n  * `:database_owner_context` - if `true` the context represents the database\n    owner role.  If `false` or not provided the database role is not used for\n    this purpose.  Note that there should only be one context defined as the\n    database owner for any Datastore.\n\nFor more see `MscmpSystDb.Types.DatastoreContext`.","ref":"MscmpSystDb.Types.DatastoreContext.html#t:t/0-attributes"},{"type":"module","title":"MscmpSystDb.Types.DatastoreOptions","doc":"A struct defining the connection parameters to use to connect to a Datastore\nbacking database.","ref":"MscmpSystDb.Types.DatastoreOptions.html"},{"type":"type","title":"MscmpSystDb.Types.DatastoreOptions.t/0","doc":"A struct defining the connection parameters to use to connect to a Datastore\nbacking database.","ref":"MscmpSystDb.Types.DatastoreOptions.html#t:t/0"},{"type":"type","title":"Attributes - MscmpSystDb.Types.DatastoreOptions.t/0","doc":"* `:database_name` - The name of the database in the database server to\n    which the connection will be made.  Often times this value will be the\n    same as the `:datastore_name` value, though they are permitted to differ.\n\n  * `:datastore_code` - Defines a Datastore specific salting value for use in\n    certain security and cryptographic related functions.\n\n  * `:datastore_name` - A name for use by the application to identify a given\n    Datastore.  This value will often time be the same as the `:database_name`\n    value, but allows for decoupling from that value.\n\n  * `:contexts` - A list of available Datastore Context values defining which\n    contexts are available for this Datastore.  See\n    `t:MscmpSystDb.Types.DatastoreContext.t/0` for more information concerning\n    the values of each entry in the list.\n\n  * `:db_server` - The database server information for the server where the\n    Datastore database resides.  See 't:MscmpSystDb.Types.DbServer.t/0' for\n    additional details.","ref":"MscmpSystDb.Types.DatastoreOptions.html#t:t/0-attributes"},{"type":"module","title":"MscmpSystDb.Types.DbServer","doc":"Provides the definition of a database server which can back application\ninstances.\n\nThe data in the struct includes fields which uniquely identifies the server,\nprovides information for where on the network the server can be found, and\nconnection related parameters.  Also, the full administrative credentials are\nincluded.","ref":"MscmpSystDb.Types.DbServer.html"},{"type":"type","title":"MscmpSystDb.Types.DbServer.t/0","doc":"Provides the definition of a database server which can back application\ninstances.","ref":"MscmpSystDb.Types.DbServer.html#t:t/0"},{"type":"type","title":"Attributes - MscmpSystDb.Types.DbServer.t/0","doc":"* `:server_name` - Provides a unique identifier for a database server\n  instance.\n\n  * `:start_server_instances` - If true, indicates that databases on the\n  server can be started and made available as application Datastores.\n\n  * `:server_pools` - The server pools in which the database server\n  participates.\n\n  * `:db_host` - The hostname or IP address of the database server on the\n  network.\n\n  * `:db_port` - The TCP port on which the database server is listening for\n  connections.\n\n  * `:db_show_sensitive` - If true, various logging events may show unredacted\n  \"sensitive\" database connectivity information.  Note that even when false,\n  the application still log sensitive application data.\n\n\n  * `:db_max_instances` - The total number of databases allowed to be\n  established for the db_server instance.\n\n  * `:server_salt` - For certain cryptographic operations, such as password\n  derivation, allows for the assignment of specific salting value for that is\n  specific to a given database server.  This value must be at least 32 bytes\n  long and should be a random string.\n\n  * `:dbadmin_password` - The ms_syst_privileged role password for privileged\n  operations such as creating a new database/Datastore or new database roles\n  on the database server instance.\n\n  * `:dbadmin_pool_size` - The pool size to use for creating connections for\n  privileged operations using the ms_syst_privileged role.\n\nSee `MscmpSystDb.Types.DbServer` for more.","ref":"MscmpSystDb.Types.DbServer.html#t:t/0-attributes"},{"type":"module","title":"MscmpSystDb.DbTypes.DateRange","doc":"An Elixir representation of the PostgreSQL `daterange` data type.\n\nDerived from the Postgrex.Range data type.  For more information about this\ndata type, see: [The PostgreSQL Documentation: Range Types](https://www.postgresql.org/docs/current/rangetypes.html)\n\nThis type implements the `MscmpSystDb.DbTypes` protocol.","ref":"MscmpSystDb.DbTypes.DateRange.html"},{"type":"function","title":"MscmpSystDb.DbTypes.DateRange.embed_as/1","doc":"","ref":"MscmpSystDb.DbTypes.DateRange.html#embed_as/1"},{"type":"function","title":"MscmpSystDb.DbTypes.DateRange.equal?/2","doc":"","ref":"MscmpSystDb.DbTypes.DateRange.html#equal?/2"},{"type":"type","title":"MscmpSystDb.DbTypes.DateRange.t/0","doc":"","ref":"MscmpSystDb.DbTypes.DateRange.html#t:t/0"},{"type":"module","title":"MscmpSystDb.DbTypes.DateTimeRange","doc":"An Elixir representation of the PostgreSQL `tstzrange` data type.\n\nDerived from the Postgrex.Range data type.  For more information about this\ndata type, see: [The PostgreSQL Documentation: Range Types](https://www.postgresql.org/docs/current/rangetypes.html)","ref":"MscmpSystDb.DbTypes.DateTimeRange.html"},{"type":"function","title":"MscmpSystDb.DbTypes.DateTimeRange.embed_as/1","doc":"","ref":"MscmpSystDb.DbTypes.DateTimeRange.html#embed_as/1"},{"type":"function","title":"MscmpSystDb.DbTypes.DateTimeRange.equal?/2","doc":"","ref":"MscmpSystDb.DbTypes.DateTimeRange.html#equal?/2"},{"type":"type","title":"MscmpSystDb.DbTypes.DateTimeRange.t/0","doc":"","ref":"MscmpSystDb.DbTypes.DateTimeRange.html#t:t/0"},{"type":"module","title":"MscmpSystDb.DbTypes.DecimalRange","doc":"An Elixir representation of the PostgreSQL `numrange` data type.\n\nDerived from the Postgrex.Range data type.  For more information about this\ndata type, see: [The PostgreSQL Documentation: Range Types](https://www.postgresql.org/docs/current/rangetypes.html)","ref":"MscmpSystDb.DbTypes.DecimalRange.html"},{"type":"function","title":"MscmpSystDb.DbTypes.DecimalRange.embed_as/1","doc":"","ref":"MscmpSystDb.DbTypes.DecimalRange.html#embed_as/1"},{"type":"function","title":"MscmpSystDb.DbTypes.DecimalRange.equal?/2","doc":"","ref":"MscmpSystDb.DbTypes.DecimalRange.html#equal?/2"},{"type":"type","title":"MscmpSystDb.DbTypes.DecimalRange.t/0","doc":"","ref":"MscmpSystDb.DbTypes.DecimalRange.html#t:t/0"},{"type":"module","title":"MscmpSystDb.DbTypes.Inet","doc":"An Elixir representation of the PostgreSQL `inet` and `cidr` data types.\n\nDerived from the Postgrex.INET data type.  For more information about this\ndata type, see: [The PostgreSQL Documentation: Network Address Types](https://www.postgresql.org/docs/current/datatype-net-types.html)","ref":"MscmpSystDb.DbTypes.Inet.html"},{"type":"function","title":"MscmpSystDb.DbTypes.Inet.embed_as/1","doc":"","ref":"MscmpSystDb.DbTypes.Inet.html#embed_as/1"},{"type":"function","title":"MscmpSystDb.DbTypes.Inet.equal?/2","doc":"","ref":"MscmpSystDb.DbTypes.Inet.html#equal?/2"},{"type":"function","title":"MscmpSystDb.DbTypes.Inet.from_net_address/1","doc":"Converts a network address represented either as a\n`t:MscmpSystNetwork.Types.IpV4.t/0` or `t:MscmpSystNetwork.Types.IpV6.t/0`\nvalue into one represented as a `t:MscmpSystDb.DbTypes.Inet.t/0` value.","ref":"MscmpSystDb.DbTypes.Inet.html#from_net_address/1"},{"type":"function","title":"MscmpSystDb.DbTypes.Inet.from_postgrex_inet/1","doc":"Converts a network address represented as a `t:Postgrex.INET.t/0`\nvalue into one represented as a `t:MscmpSystDb.DbTypes.Inet.t/0` value.","ref":"MscmpSystDb.DbTypes.Inet.html#from_postgrex_inet/1"},{"type":"function","title":"MscmpSystDb.DbTypes.Inet.to_net_address/1","doc":"Converts a network address represented as a `t:MscmpSystDb.DbTypes.Inet.t/0`\nvalue into one represented as either a `t:MscmpSystNetwork.Types.IpV4.t/0` or\n`t:MscmpSystNetwork.Types.IpV6.t/0` value.","ref":"MscmpSystDb.DbTypes.Inet.html#to_net_address/1"},{"type":"function","title":"MscmpSystDb.DbTypes.Inet.to_postgrex_inet/1","doc":"Converts a network address represented as a `t:MscmpSystDb.DbTypes.Inet.t/0`\nvalue into one represented as a `t:Postgrex.INET.t/0` value.","ref":"MscmpSystDb.DbTypes.Inet.html#to_postgrex_inet/1"},{"type":"type","title":"MscmpSystDb.DbTypes.Inet.t/0","doc":"","ref":"MscmpSystDb.DbTypes.Inet.html#t:t/0"},{"type":"module","title":"MscmpSystDb.DbTypes.IntegerRange","doc":"An Elixir representation of the PostgreSQL `int8range` data type.\n\nDerived from the Postgrex.Range data type.  For more information about this\ndata type, see: [The PostgreSQL Documentation: Range Types](https://www.postgresql.org/docs/current/rangetypes.html)","ref":"MscmpSystDb.DbTypes.IntegerRange.html"},{"type":"function","title":"MscmpSystDb.DbTypes.IntegerRange.embed_as/1","doc":"","ref":"MscmpSystDb.DbTypes.IntegerRange.html#embed_as/1"},{"type":"function","title":"MscmpSystDb.DbTypes.IntegerRange.equal?/2","doc":"","ref":"MscmpSystDb.DbTypes.IntegerRange.html#equal?/2"},{"type":"type","title":"MscmpSystDb.DbTypes.IntegerRange.t/0","doc":"","ref":"MscmpSystDb.DbTypes.IntegerRange.html#t:t/0"},{"type":"module","title":"MscmpSystDb.DbTypes.Interval","doc":"An Elixir representation of the PostgreSQL `interval` data type.\n\nDerived from the Postgrex.Interval data type.  For more information about this\ndata type, see: [The PostgreSQL Documentation: Date/Time Types](https://www.postgresql.org/docs/current/datatype-datetime.html#DATATYPE-INTERVAL-INPUT)","ref":"MscmpSystDb.DbTypes.Interval.html"},{"type":"function","title":"MscmpSystDb.DbTypes.Interval.embed_as/1","doc":"","ref":"MscmpSystDb.DbTypes.Interval.html#embed_as/1"},{"type":"function","title":"MscmpSystDb.DbTypes.Interval.equal?/2","doc":"","ref":"MscmpSystDb.DbTypes.Interval.html#equal?/2"},{"type":"function","title":"MscmpSystDb.DbTypes.Interval.to_timex_shift_options/1","doc":"Converts an Interval into a form that can be used by the `Timex` library's\n`Timex.shift/2` function.","ref":"MscmpSystDb.DbTypes.Interval.html#to_timex_shift_options/1"},{"type":"function","title":"Example - MscmpSystDb.DbTypes.Interval.to_timex_shift_options/1","doc":"iex> example_interval =\n    ...>   %MscmpSystDb.DbTypes.Interval{months: 1, days: 1, secs: 1, microsecs: 1}\n    iex> MscmpSystDb.DbTypes.Interval.to_timex_shift_options(example_interval)\n    [months: 1, days: 1, seconds: 1, microseconds: 1]","ref":"MscmpSystDb.DbTypes.Interval.html#to_timex_shift_options/1-example"},{"type":"type","title":"MscmpSystDb.DbTypes.Interval.t/0","doc":"","ref":"MscmpSystDb.DbTypes.Interval.html#t:t/0"},{"type":"module","title":"MscmpSystDb.Datastore","doc":"Provides basic OTP related features for Datastores.\n\nFunctions in this module support running Datastores under supervision and\ncreates a Datastore supervisor for managing Datastore Context worker\nprocesses.","ref":"MscmpSystDb.Datastore.html"},{"type":"function","title":"MscmpSystDb.Datastore.child_spec/2","doc":"Provides a Datastore child specification for use with supervisors.\n\nNote that this function is not `child_spec/1` as expected when a Supervisor\nattempts to start a process based on the module name alone.  This is because\nthere is a required parameter which renders that method of starting a process\ninvalid as there's no default value for the parameter (`datastore_options`).","ref":"MscmpSystDb.Datastore.html#child_spec/2"},{"type":"function","title":"Parameters - MscmpSystDb.Datastore.child_spec/2","doc":"* `datastore_options` - a required Map of values which describe the\n  Datastore and Datastore Context related connection options.  See\n  `t:MscmpSystDb.Types.DatastoreOptions.t/0` for more.\n\n  * `opts` - a Keyword list of options.  See the \"Options\" section for\n    details.","ref":"MscmpSystDb.Datastore.html#child_spec/2-parameters"},{"type":"function","title":"Options - MscmpSystDb.Datastore.child_spec/2","doc":"* `:datastore_name` (`t:GenServer.name/0` or `nil`) - Specifies the name for the Datastore Supervisor. If this option is not\n  provided, the `datastore_options.datastore_name` value will be used as\n  the default name for the Datastore Supervisor.  If this value identifies a\n  process registry (e.g. `{:via, Registry, {MyApp.Registry, :my_registry}}`),\n  this registry will become the default registry for all Datastore Contexts;\n  a valid `context_registry` value overrides this default.\n\n* `:context_registry` (`t:module/0` or `nil`) - Specifies the name of a registry to use for registering named Datastore\n  Contexts.\n\n* `:strategy` (`t:atom/0`) - Specifies the restart strategy for the Datastore Supervisor. The default value is `:one_for_one`.\n\n* `:restart` (`t:atom/0`) - Specifies the restart strategy for the Datastore Supervisor. The default value is `:transient`.\n\n* `:timeout` (`t:timeout/0`) - Specifies the timeout value for the Datastore Supervisor. The default value is `60000`.","ref":"MscmpSystDb.Datastore.html#child_spec/2-options"},{"type":"function","title":"MscmpSystDb.Datastore.start_link/2","doc":"Starts the Datastore Supervisor and its requested child Datastore Contexts.\n\nWhen this function is called, a new `DynamicSupervisor` for the datastore is\nstarted and any Datastore Contexts which are identified in the\n`datastore_options` are also started and places under the Datastore\nSupervisor.","ref":"MscmpSystDb.Datastore.html#start_link/2"},{"type":"function","title":"Parameters - MscmpSystDb.Datastore.start_link/2","doc":"* `datastore_options` - a required Map of values which describe the\n  Datastore and Datastore Context related connection options.  See\n  `t:MscmpSystDb.Types.DatastoreOptions.t/0` for more.\n\n  * `opts` - See the \"Options\" section for\n    details.","ref":"MscmpSystDb.Datastore.html#start_link/2-parameters"},{"type":"function","title":"Options - MscmpSystDb.Datastore.start_link/2","doc":"* `:datastore_name` (`t:GenServer.name/0` or `nil`) - Specifies the name for the Datastore Supervisor. If this option is not\n  provided, the `datastore_options.datastore_name` value will be used as\n  the default name for the Datastore Supervisor.  If this value identifies a\n  process registry (e.g. `{:via, Registry, {MyApp.Registry, :my_registry}}`),\n  this registry will become the default registry for all Datastore Contexts;\n  a valid `context_registry` value overrides this default.\n\n* `:context_registry` (`t:module/0` or `nil`) - Specifies the name of a registry to use for registering named Datastore\n  Contexts.\n\n* `:strategy` (`t:atom/0`) - Specifies the restart strategy for the Datastore Supervisor. The default value is `:one_for_one`.\n\n* `:restart` (`t:atom/0`) - Specifies the restart strategy for the Datastore Supervisor. The default value is `:transient`.\n\n* `:timeout` (`t:timeout/0`) - Specifies the timeout value for the Datastore Supervisor. The default value is `60000`.","ref":"MscmpSystDb.Datastore.html#start_link/2-options"},{"type":"module","title":"MscmpSystDb.DatastoreContext","doc":"Provides basic OTP related features for Datastore Contexts.\n\nUsually functions in this API are called when processing\n`MscmpSystDb.Datastore` module functions.  However, there are times\nwhen direct Datastore Context manipulation is appropriate, such as stopping\nand then restarting a specific Context for maintenance reasons.","ref":"MscmpSystDb.DatastoreContext.html"},{"type":"function","title":"MscmpSystDb.DatastoreContext.child_spec/3","doc":"Returns the Child Specification used to start the DatastoreContext service.","ref":"MscmpSystDb.DatastoreContext.html#child_spec/3"},{"type":"function","title":"Parameters - MscmpSystDb.DatastoreContext.child_spec/3","doc":"* `datastore_options` - a required Map of values which describe the\n    Datastore and Datastore Context related connection options.  See\n    `t:MscmpSystDb.Types.DatastoreOptions.t/0` for more.\n\n  * `context` - the identity of the context as understood by the system.\n    The context name is both the identity of the context as an Ecto Repo and\n    is also used for the child specification ID value as there is the\n    possibility of multiple contexts to start under the Datastore Supervisor\n    process.\n\n  * `opts` - a Keyword List of additional key/value call configurations.  See\n    the \"Options\" section for details.","ref":"MscmpSystDb.DatastoreContext.html#child_spec/3-parameters"},{"type":"function","title":"Options - MscmpSystDb.DatastoreContext.child_spec/3","doc":"* `:context_registry` (`t:module/0` or `nil`) - Specifies the name of a registry to use for registering named Datastore\n  Contexts.","ref":"MscmpSystDb.DatastoreContext.html#child_spec/3-options"},{"type":"function","title":"Returns - MscmpSystDb.DatastoreContext.child_spec/3","doc":"* `t:Supervisor.child_spec/0` - The Child Specification for the Datastore\n  Context to be started.","ref":"MscmpSystDb.DatastoreContext.html#child_spec/3-returns"},{"type":"function","title":"MscmpSystDb.DatastoreContext.start_link/3","doc":"Starts a Datastore Context as a linked process to the caller.\n\nTypically this function is called once for each Context defined for a\nDatastore by the `MscmpSystDb.Datastore.start_link/1` function.\nHowever there are some cases where starting a Datastore Context independently\ncan be desirable, such as the Context was earlier stopped for some reason and\nneeds to be started under it's original Datastore Supervisor.","ref":"MscmpSystDb.DatastoreContext.html#start_link/3"},{"type":"function","title":"Parameters - MscmpSystDb.DatastoreContext.start_link/3","doc":"* `datastore_options` - see the `datastore_options` parameter for\n    `MscmpSystDb.DatastoreContext.child_spec/3`.  This option is\n    required.\n\n  * `datastore_context` - a required map describing the Context to be started.\n    See `t:MscmpSystDb.Types.datastore_context()` for more information.\n\n  * `opts` - a Keyword List of additional key/value call configurations.  See\n    the \"Options\" section for details.","ref":"MscmpSystDb.DatastoreContext.html#start_link/3-parameters"},{"type":"function","title":"Options - MscmpSystDb.DatastoreContext.start_link/3","doc":"* `:context_registry` (`t:module/0` or `nil`) - Specifies the name of a registry to use for registering named Datastore\n  Contexts.","ref":"MscmpSystDb.DatastoreContext.html#start_link/3-options"},{"type":"module","title":"MscmpSystDb.Schema","doc":"Provides common attributes for use by most application Ecto Schema instances.\n\nChiefly, we ensure that the primary and foreign keys are all of a common type.\n\nTo use this module, simply add `use MscmpSystDb.Schema` in place of\n`use Ecto.Schema`.","ref":"MscmpSystDb.Schema.html"}],"content_type":"text/markdown","producer":{"name":"ex_doc","version":[48,46,51,52,46,50]}}