searchNodes=[{"doc":"Builds database sources into their respective migrations according to build plans. Options: --type or -t : The type of database to build. This is a required switch and there is no default value. --source or -s : Directory where the buildplans.&lt;type&gt;.toml can be found. If not provided a default directory of database in the project root is assumed. --destination or -d : Directory where to build the migrations. The default value is priv/database is used if not provided. Note that the migrations files will be built inside a directory built from both the destination directory from this switch and the database type: &lt;destination&gt;/&lt;type&gt; . --clean or -c : Clean previously created migrations prior to building the migrations. If this flag is not provided, migrations that already exist are skipped and only new migrations are built. When the previous migrations are cleaned out, the build process will create all migrations. Description: This module implements the build process for a modified version of the common &quot;migrations&quot; database development/deployment strategy. In the model implemented here, the developer creates source files in PL/pgSQL and then updates a build plans file which determines how the individual source files are copied into individual migration files which will then be deployed to the database. This allows the developer to treat database source more closely to non-database source code, at least during initial database development. This migrations model allows for creation of multiple, different databases for applications that require more than a single database definition. These multiple database definitions are referred to as database types . This build process expects the source files to be kept within an independent source directory, by default: database of the project root. In addition to the source files, the database directory should also contain TOML files named buildplans.&lt;database type&gt;.toml which define what migrations will be built and in what order the database source files will be copied to them. Each database type will have its own TOML build plans file. The build plan file is a TOML file with an array of tables of [[buildplan]] : [[build_plan]] release = 1 version = 1 update = 0 sponsor = 820 sponsor_modification = 0 load_files = [ &quot;tables/table_one.sql&quot;, {type = &quot;sql&quot;, file = &quot;tables/table_two.sql&quot;}, {type = &quot;plan&quot;, file = &quot;subplans/subplans.component.toml&quot;} ] The fields above are defined as: release - The major version number of the migration. The first element of the migration file name. version - The minor version number of the migration. The second element of the migration file name. update - The patch version number of the migration. The third element of the migration name. sponsor - In cases where specific clients that use the software are able to sponsor client-specific customizations, this field identifies the client sponsoring the change. This element is the fourth element of the migration file name. For non-sponsored changes, a special sponsor value designated to mean 'Muse Systems' is used ( 820 ). sponsor_modification - This field allows for sponsored customization to both be versioned and sequenced in the migration process. This is the fifth element of the migration name. For non-sponsored migrations, this field should just be left at zero. load_files - A list of SQL files and sub-plans to include in the build. Collectively, these are &quot;Load File Items&quot;. Each Load File Item may take one of three forms: &quot;path/to/file.sql&quot; - A simple string is interpreted as the path to an SQL file to load into a migration. {type = &quot;sql&quot;, file = &quot;path/to/file.sql&quot;} - This is the same as the simple file path of form 1. Using this form could allow for a slightly cleaner representation if sat in a group of sub-plan Load File Items. {type = &quot;plan&quot;, file = &quot;path/to/subplan.toml&quot;} - In this form the path indicates that the file is a nested build plan, or sub-plan, whose directives should be followed at this location. A sub-plan is itself a normal build plan. By convention, a sub-plan file name should take the form: subplans.&lt;descriptive_name&gt;.toml ; unlike the build plan naming convention, following the sub-plan naming convention is not required. While build plans may be nested arbitrarily deep, a best practice is to only use a single level of nesting. Each table in the array is a specific build plan which will build a single migration. The body of the migration itself is simply the files in the load_files list copied to the migration file in the order of the list. Note that the migration code is wrapped in a PostgreSQL DO block (PL/pgSQL) so source files may use all the capabilities of PostgreSQL anonymous blocks as are they subject to its limitations. Later, on deployment, the migrations will be applied in migration name order. The migration name is constructed from the versioning information in the buildplan table with each of the versioning fields (recorded as integers) being added in their zero padded, base-36 representations.","ref":"Mix.Tasks.Builddb.html","title":"Mix.Tasks.Builddb","type":"task"},{"doc":"Callback implementation for Mix.Task.run/1 .","ref":"Mix.Tasks.Builddb.html#run/1","title":"Mix.Tasks.Builddb.run/1","type":"function"},{"doc":"Defines functions which are useful in working with database supported range types.","ref":"MsbmsSystDatastore.DbTypes.Range.html","title":"MsbmsSystDatastore.DbTypes.Range","type":"protocol"},{"doc":"Compares two ranges or a range and its related base type value and returns the effective operating describing the relationship. Parameters left - a range type or base type for use in the comparison which would be the left side when used with an infix operator such as &gt; . right - a range type or base type for use in the comparison which would be the right side when used with an infix operator such as &gt; . Examples Comparing two ranges where the left and right overlap, but the left side is less than the right (returns &quot;Less Than Overlapping&quot;). iex&gt; left_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 10 , ...&gt; upper : 100 ...&gt; } iex&gt; right_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 20 , ...&gt; upper : 200 ...&gt; } iex&gt; MsbmsSystDatastore.DbTypes.Range . compare ( left_range , right_range ) :lto Comparing a range and a base type value where the range contains the base type value (returns &quot;Left Contains Right&quot;). iex&gt; left_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 10 , ...&gt; upper : 100 ...&gt; } iex&gt; MsbmsSystDatastore.DbTypes.Range . compare ( left_range , 50 ) :lcr","ref":"MsbmsSystDatastore.DbTypes.Range.html#compare/2","title":"MsbmsSystDatastore.DbTypes.Range.compare/2","type":"function"},{"doc":"Compares two ranges or a range and its related base type value and tests the effective operator against that supplied by the user returning true or false . Parameters left - a range type or base type for use in the comparison which would be the left side when used with an infix operator such as &gt; . right - a range type or base type for use in the comparison which would be the right side when used with an infix operator such as &gt; . operator - the desired operator to test. Examples Comparing two ranges where the left and right overlap, but the left side is less than the right. In this case we match the desired &quot;Less Than Overlapping&quot; operator resulting in a return value of true . iex&gt; left_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 10 , ...&gt; upper : 100 ...&gt; } iex&gt; right_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 20 , ...&gt; upper : 200 ...&gt; } iex&gt; MsbmsSystDatastore.DbTypes.Range . test_compare ( left_range , right_range , :lto ) true Comparing a range and a base type value where the range contains the base type value, but the desired operator is &quot;Greater Than&quot; which does not match resulting in a return value of false . iex&gt; left_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 10 , ...&gt; upper : 100 ...&gt; } iex&gt; MsbmsSystDatastore.DbTypes.Range . test_compare ( left_range , 50 , :gt ) false","ref":"MsbmsSystDatastore.DbTypes.Range.html#test_compare/3","title":"MsbmsSystDatastore.DbTypes.Range.test_compare/3","type":"function"},{"doc":"","ref":"MsbmsSystDatastore.DbTypes.Range.html#t:t/0","title":"MsbmsSystDatastore.DbTypes.Range.t/0","type":"type"},{"doc":"The public API for database interactions.","ref":"MsbmsSystDatastore.html","title":"MsbmsSystDatastore","type":"module"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.aggregate/4 .","ref":"MsbmsSystDatastore.html#aggregate/4","title":"MsbmsSystDatastore.aggregate/4","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.all/2 .","ref":"MsbmsSystDatastore.html#all/2","title":"MsbmsSystDatastore.all/2","type":"function"},{"doc":"Creates a new Datastore along with its contexts. The creation of a new Datastore includes creating new database to back the Datastore and database roles representing each of the Datastore contexts.","ref":"MsbmsSystDatastore.html#create_datastore/2","title":"MsbmsSystDatastore.create_datastore/2","type":"function"},{"doc":"Creates database roles to back all requested Datastore contexts. Usually Datastore contexts are created in the create_datastore/1 call, but over the course of time it is expected that applications may define new contexts as needs change. This function allows applications to add new contexts to existing Datastores.","ref":"MsbmsSystDatastore.html#create_datastore_contexts/3","title":"MsbmsSystDatastore.create_datastore_contexts/3","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.current_datastore_context/0 .","ref":"MsbmsSystDatastore.html#current_datastore_context/0","title":"MsbmsSystDatastore.current_datastore_context/0","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.delete!/2 .","ref":"MsbmsSystDatastore.html#delete!/2","title":"MsbmsSystDatastore.delete!/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.delete/2 .","ref":"MsbmsSystDatastore.html#delete/2","title":"MsbmsSystDatastore.delete/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.delete_all/2 .","ref":"MsbmsSystDatastore.html#delete_all/2","title":"MsbmsSystDatastore.delete_all/2","type":"function"},{"doc":"Drops a Datastore along with its contexts. Dropping a Datastore will drop the database backing the Datastore from the database server as well as all of the database roles associated defined by the provided database options. Prior to dropping the Datastore, all active connections to the Datastore should be terminated or the function call could fail. Note that this is am irreversible, destructive action. Any successful call will result in data loss.","ref":"MsbmsSystDatastore.html#drop_datastore/2","title":"MsbmsSystDatastore.drop_datastore/2","type":"function"},{"doc":"Drops the requested Datastore contexts. This function will drop the database roles from the database server that correspond to the requested Datastore contexts. You should be sure that the requested Datastore contexts do not have active database connections when calling this function as active connections are likely to result in an error condition.","ref":"MsbmsSystDatastore.html#drop_datastore_contexts/3","title":"MsbmsSystDatastore.drop_datastore_contexts/3","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.exists?/2 .","ref":"MsbmsSystDatastore.html#exists?/2","title":"MsbmsSystDatastore.exists?/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.get!/3 .","ref":"MsbmsSystDatastore.html#get!/3","title":"MsbmsSystDatastore.get!/3","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.get/3 .","ref":"MsbmsSystDatastore.html#get/3","title":"MsbmsSystDatastore.get/3","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.get_by!/3 .","ref":"MsbmsSystDatastore.html#get_by!/3","title":"MsbmsSystDatastore.get_by!/3","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.get_by/3 .","ref":"MsbmsSystDatastore.html#get_by/3","title":"MsbmsSystDatastore.get_by/3","type":"function"},{"doc":"Returns the state of the requested contexts. This function will check for each given context that: it exist, whether or not database connections may be started for it, and whether or not database connections have been started. Note that only startable contexts are included in this list. If the context is not startable or has id: nil , the context will be excluded from the results of this function.","ref":"MsbmsSystDatastore.html#get_datastore_context_states/2","title":"MsbmsSystDatastore.get_datastore_context_states/2","type":"function"},{"doc":"Returns the state of the database and database roles which back the Datastore and contexts, respectively, of the provided Datastore options definition.","ref":"MsbmsSystDatastore.html#get_datastore_state/2","title":"MsbmsSystDatastore.get_datastore_state/2","type":"function"},{"doc":"Returns the most recently installed database migration version number.","ref":"MsbmsSystDatastore.html#get_datastore_version/2","title":"MsbmsSystDatastore.get_datastore_version/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.in_transaction?/0 .","ref":"MsbmsSystDatastore.html#in_transaction?/0","title":"MsbmsSystDatastore.in_transaction?/0","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.insert!/2 .","ref":"MsbmsSystDatastore.html#insert!/2","title":"MsbmsSystDatastore.insert!/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.insert/2 .","ref":"MsbmsSystDatastore.html#insert/2","title":"MsbmsSystDatastore.insert/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.insert_all/3 .","ref":"MsbmsSystDatastore.html#insert_all/3","title":"MsbmsSystDatastore.insert_all/3","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.insert_or_update!/2 .","ref":"MsbmsSystDatastore.html#insert_or_update!/2","title":"MsbmsSystDatastore.insert_or_update!/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.insert_or_update/2 .","ref":"MsbmsSystDatastore.html#insert_or_update/2","title":"MsbmsSystDatastore.insert_or_update/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.load/2 .","ref":"MsbmsSystDatastore.html#load/2","title":"MsbmsSystDatastore.load/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.one!/2 .","ref":"MsbmsSystDatastore.html#one!/2","title":"MsbmsSystDatastore.one!/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.one/2 .","ref":"MsbmsSystDatastore.html#one/2","title":"MsbmsSystDatastore.one/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.preload/3 .","ref":"MsbmsSystDatastore.html#preload/3","title":"MsbmsSystDatastore.preload/3","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.prepare_query/3 .","ref":"MsbmsSystDatastore.html#prepare_query/3","title":"MsbmsSystDatastore.prepare_query/3","type":"function"},{"doc":"Executes a database query and returns all rows. Raises on error.","ref":"MsbmsSystDatastore.html#query_for_many!/3","title":"MsbmsSystDatastore.query_for_many!/3","type":"function"},{"doc":"Executes a database query and returns all rows.","ref":"MsbmsSystDatastore.html#query_for_many/3","title":"MsbmsSystDatastore.query_for_many/3","type":"function"},{"doc":"Executes a database query but returns no results. Raises on error.","ref":"MsbmsSystDatastore.html#query_for_none!/3","title":"MsbmsSystDatastore.query_for_none!/3","type":"function"},{"doc":"Executes a database query but returns no results.","ref":"MsbmsSystDatastore.html#query_for_none/3","title":"MsbmsSystDatastore.query_for_none/3","type":"function"},{"doc":"Executes a database query and returns a single row. Raises on error.","ref":"MsbmsSystDatastore.html#query_for_one!/3","title":"MsbmsSystDatastore.query_for_one!/3","type":"function"},{"doc":"Executes a database query and returns a single row.","ref":"MsbmsSystDatastore.html#query_for_one/3","title":"MsbmsSystDatastore.query_for_one/3","type":"function"},{"doc":"Executes a database query returning a single value. Raises on error.","ref":"MsbmsSystDatastore.html#query_for_value!/3","title":"MsbmsSystDatastore.query_for_value!/3","type":"function"},{"doc":"Executes a database query returning a single value.","ref":"MsbmsSystDatastore.html#query_for_value/3","title":"MsbmsSystDatastore.query_for_value/3","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.record_count/2 .","ref":"MsbmsSystDatastore.html#record_count/2","title":"MsbmsSystDatastore.record_count/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.reload!/2 .","ref":"MsbmsSystDatastore.html#reload!/2","title":"MsbmsSystDatastore.reload!/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.reload/2 .","ref":"MsbmsSystDatastore.html#reload/2","title":"MsbmsSystDatastore.reload/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.rollback/1 .","ref":"MsbmsSystDatastore.html#rollback/1","title":"MsbmsSystDatastore.rollback/1","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.set_datastore_context/1 .","ref":"MsbmsSystDatastore.html#set_datastore_context/1","title":"MsbmsSystDatastore.set_datastore_context/1","type":"function"},{"doc":"Starts database connections for all of login contexts in the Datastore options.","ref":"MsbmsSystDatastore.html#start_datastore/2","title":"MsbmsSystDatastore.start_datastore/2","type":"function"},{"doc":"Starts a database connection for the specific Datastore context provided.","ref":"MsbmsSystDatastore.html#start_datastore_context/2","title":"MsbmsSystDatastore.start_datastore_context/2","type":"function"},{"doc":"Disconnects the database connections for all of the login Datastore option contexts.","ref":"MsbmsSystDatastore.html#stop_datastore/2","title":"MsbmsSystDatastore.stop_datastore/2","type":"function"},{"doc":"Disconnects the database connection for the specific Datastore context provided.","ref":"MsbmsSystDatastore.html#stop_datastore_context/2","title":"MsbmsSystDatastore.stop_datastore_context/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.stream/2 .","ref":"MsbmsSystDatastore.html#stream/2","title":"MsbmsSystDatastore.stream/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.ecto_transaction/2 .","ref":"MsbmsSystDatastore.html#transaction/2","title":"MsbmsSystDatastore.transaction/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.update!/2 .","ref":"MsbmsSystDatastore.html#update!/2","title":"MsbmsSystDatastore.update!/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.update/2 .","ref":"MsbmsSystDatastore.html#update/2","title":"MsbmsSystDatastore.update/2","type":"function"},{"doc":"See MsbmsSystDatastore.Runtime.Datastore.update_all/3 .","ref":"MsbmsSystDatastore.html#update_all/3","title":"MsbmsSystDatastore.update_all/3","type":"function"},{"doc":"Updates a Datastore to the most current version of the given type of Datastore. If a Datastore is already up-to-date, this function is basically a &quot;no-op&quot; that returns the current version. Otherwise, database migrations for the Datastore type are applied until the Datastore is fully upgraded to the most recent schema version.","ref":"MsbmsSystDatastore.html#upgrade_datastore/4","title":"MsbmsSystDatastore.upgrade_datastore/4","type":"function"},{"doc":"Defines public types for use with the MsbmsSystDatastore module.","ref":"MsbmsSystDatastore.Types.html","title":"MsbmsSystDatastore.Types","type":"module"},{"doc":"An application wide designation for application defined datastore access accounts.","ref":"MsbmsSystDatastore.Types.html#t:context_name/0","title":"MsbmsSystDatastore.Types.context_name/0","type":"type"},{"doc":"The database role name for the specific access context defined by the context_name() .","ref":"MsbmsSystDatastore.Types.html#t:context_role/0","title":"MsbmsSystDatastore.Types.context_role/0","type":"type"},{"doc":"","ref":"MsbmsSystDatastore.Types.html#t:context_state/0","title":"MsbmsSystDatastore.Types.context_state/0","type":"type"},{"doc":"Defines the available states in which a context may exist. :not_found - The database role backing the context was not found on the Datastore database server. :not_ready - The database role backing the context exists, but is not completely set up yet. This is an interim stage that usually has to cross transaction boundaries. :not_started - When starting contexts the system doesn't check for the existence of each context which in turn means that a start failure could be indicative of either non-existence or some other problem. In these start-up scenarios the state would be :not_started . :ready - The context was found and may be connected to the database, but the database connections for the context have not been started yet. :started - The context was found and database connections for the context have already been started.","ref":"MsbmsSystDatastore.Types.html#t:context_state_values/0","title":"MsbmsSystDatastore.Types.context_state_values/0","type":"type"},{"doc":"Values indicating the state of the database which backs a given Datastore. :not_found - The database for the Datastore does not exist on the database server. :ready - The database is ready for further processing by the migrations subsystem.","ref":"MsbmsSystDatastore.Types.html#t:database_state_values/0","title":"MsbmsSystDatastore.Types.database_state_values/0","type":"type"},{"doc":"Defines an application level security context which maps to a specific database role. Datastore contexts allow the application to access the database using database roles which are limited by their database security configuration. :context_name - the application's identifier for a specific security context. This isn't specific to a particular database, but to the application overall. :description - a user friendly description of the context. :database_role - maps the application context to a specific database role. When establishing a connection to a database, this is the database role name that will be used. :database_password - the password used to connect the :database_role to the database server. :starting_pool_size - the number of database connections to initially open for this context. :start_context - when working with application database connections which are started and pooled at application start time, this value indicates whether or not the specific context should be started as normal. For normal startup to take place, both this value and the :login_context value must be true. This setting is disregarded in operations involving database connections which are established on demand as needed, such as DBA related connections. :login_context - if true , the context is a normal context associated with a database login role and will be used in establishing connections to the database. If false , the context is an administrative context which is only used in security definitions within the database. Database owner roles, roles which own all of the application database tables/functions would typically not be login roles, even though the are highly privileged when their context is active in a database session. (default: true) :database_owner_context - if true the context represents the database owner role. If false or not provided the database role is not used for this purpose. Note that there should only be one context defined as the database owner for any Datastore.","ref":"MsbmsSystDatastore.Types.html#t:datastore_context/0","title":"MsbmsSystDatastore.Types.datastore_context/0","type":"type"},{"doc":"Defines the options required for establishing the database connections which make up a Datastore. :database_name - The name of the database in the database server to which the connection will be made. Often times this value will be the same as the String.t() form of the :datastore_name value. :datastore_code - Defines a Datastore specific salting value for use in certain security and cryptographic related functions. :datastore_name - A name for use by the application to identify a given datastore. This value will often time be the same as the :database_name value, except as an atom() rather than a String.t(). :contexts - A list of available Datastore Context values defining which contexts are available for this Datastore. See datastore_context() for more information concerning the values of each entry in the list. :db_server - The database server information for the server where the Datastore database resides. See db_server() for additional details.","ref":"MsbmsSystDatastore.Types.html#t:datastore_options/0","title":"MsbmsSystDatastore.Types.datastore_options/0","type":"type"},{"doc":"Represents a specific database server. The data in the map includes fields which uniquely identifies the server, provides information for where on the network the server can be found, and connection related parameters. Also, the full administrative credentials are included. :server_name - Provides a unique identifier for a database server instance. :start_server_instances - If true, indicates that databases on the server can be started and made available as application Datastores. :server_pools - The server pools in which the database server participates. :db_host - The hostname or IP address of the database server on the network. :db_port - The TCP port on which the database server is listening for connections. :db_show_sensitive - If true, various logging events may show unredacted &quot;sensitive&quot; database connectivity information. Note that even when false, the application still log sensitive application data. :db_max_instances - The total number of databases allowed to be established for the db_server instance. :server_salt - For certain cryptographic operations, such as password derivation, allows for the assignment of specific salting value for that is specific to a given database server. This value must be at least 32 bytes long and should be a random string. :dbadmin_password - The msbms_syst_dba role password for privileged operations such as creating a new database/Datastore or new database roles on the database server instance. :dbadmin_pool_size - The pool size to use for creating connections for privileged operations using the msbms_syst_dba role.","ref":"MsbmsSystDatastore.Types.html#t:db_server/0","title":"MsbmsSystDatastore.Types.db_server/0","type":"type"},{"doc":"Defines operators for use in comparison functions such as those implementing the MsbmsSystDatastore.DbTypes.Range protocol. The range related operator values are generally the same as those defined by the PostgreSQL database range types, but there are some small differences. :gt - left is greater than right. :lt - left is less than right. :eq - the values are equal. :lcr - left contains right. :rcl - right contains left. :gto - greater than overlapping. :lto - less than overlapping. Examples Greater Than ( :gt ) iex&gt; left_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 200 , ...&gt; upper : 210 ...&gt; } iex&gt; right_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 100 , ...&gt; upper : 110 ...&gt; } iex&gt; MsbmsSystDatastore.DbTypes.Range . compare ( left_range , right_range ) :gt Less Than ( :lt ) iex&gt; left_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 100 , ...&gt; upper : 110 ...&gt; } iex&gt; right_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 200 , ...&gt; upper : 210 ...&gt; } iex&gt; MsbmsSystDatastore.DbTypes.Range . compare ( left_range , right_range ) :lt Equal ( :eq ) iex&gt; left_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 100 , ...&gt; upper : 110 ...&gt; } iex&gt; right_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 100 , ...&gt; upper : 110 ...&gt; } iex&gt; MsbmsSystDatastore.DbTypes.Range . compare ( left_range , right_range ) :eq Left Contains Right ( :lcr ) iex&gt; left_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 90 , ...&gt; upper : 110 ...&gt; } iex&gt; right_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 100 , ...&gt; upper : 110 ...&gt; } iex&gt; MsbmsSystDatastore.DbTypes.Range . compare ( left_range , right_range ) :lcr Right Contains Left ( :rcl ) iex&gt; left_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 100 , ...&gt; upper : 110 ...&gt; } iex&gt; right_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 100 , ...&gt; upper : 111 ...&gt; } iex&gt; MsbmsSystDatastore.DbTypes.Range . compare ( left_range , right_range ) :rcl Greater Than Overlapping ( :gto ) iex&gt; left_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 150 , ...&gt; upper : 250 ...&gt; } iex&gt; right_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 100 , ...&gt; upper : 175 ...&gt; } iex&gt; MsbmsSystDatastore.DbTypes.Range . compare ( left_range , right_range ) :gto Less Than Overlapping ( :lto ) iex&gt; left_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 100 , ...&gt; upper : 150 ...&gt; } iex&gt; right_range = ...&gt; % MsbmsSystDatastore.DbTypes.IntegerRange { ...&gt; lower : 125 , ...&gt; upper : 175 ...&gt; } iex&gt; MsbmsSystDatastore.DbTypes.Range . compare ( left_range , right_range ) :lto","ref":"MsbmsSystDatastore.Types.html#t:db_type_comparison_operators/0","title":"MsbmsSystDatastore.Types.db_type_comparison_operators/0","type":"type"},{"doc":"Defines the available states in which a Datastore might exist in relation to its schema migrations. :not_initialized - The Datastore does not have the table which manages the migrations installed. This is also the value reported when the database_state_values() value for the Datastore is :not_found . :not_updated - The Datastore database exists and has been initialized, but does not have the most recent migrations available applied per the migrations management table. :ready - The migrations are fully up-to-date and the Datastore is ready to serve the application as needed.","ref":"MsbmsSystDatastore.Types.html#t:migration_state_values/0","title":"MsbmsSystDatastore.Types.migration_state_values/0","type":"type"},{"doc":"An Elixir representation of the PostgreSQL daterange data type. Derived from the Postgrex.Range data type. For more information about this data type, see: The PostgreSQL Documentation: Range Types This type implements the MsbmsSystDatastore.DbTypes.Range protocol.","ref":"MsbmsSystDatastore.DbTypes.DateRange.html","title":"MsbmsSystDatastore.DbTypes.DateRange","type":"module"},{"doc":"Callback implementation for Ecto.Type.embed_as/1 .","ref":"MsbmsSystDatastore.DbTypes.DateRange.html#embed_as/1","title":"MsbmsSystDatastore.DbTypes.DateRange.embed_as/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.equal?/2 .","ref":"MsbmsSystDatastore.DbTypes.DateRange.html#equal?/2","title":"MsbmsSystDatastore.DbTypes.DateRange.equal?/2","type":"function"},{"doc":"","ref":"MsbmsSystDatastore.DbTypes.DateRange.html#t:t/0","title":"MsbmsSystDatastore.DbTypes.DateRange.t/0","type":"type"},{"doc":"An Elixir representation of the PostgreSQL tstzrange data type. Derived from the Postgrex.Range data type. For more information about this data type, see: The PostgreSQL Documentation: Range Types","ref":"MsbmsSystDatastore.DbTypes.DateTimeRange.html","title":"MsbmsSystDatastore.DbTypes.DateTimeRange","type":"module"},{"doc":"Callback implementation for Ecto.Type.embed_as/1 .","ref":"MsbmsSystDatastore.DbTypes.DateTimeRange.html#embed_as/1","title":"MsbmsSystDatastore.DbTypes.DateTimeRange.embed_as/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.equal?/2 .","ref":"MsbmsSystDatastore.DbTypes.DateTimeRange.html#equal?/2","title":"MsbmsSystDatastore.DbTypes.DateTimeRange.equal?/2","type":"function"},{"doc":"","ref":"MsbmsSystDatastore.DbTypes.DateTimeRange.html#t:t/0","title":"MsbmsSystDatastore.DbTypes.DateTimeRange.t/0","type":"type"},{"doc":"An Elixir representation of the PostgreSQL numrange data type. Derived from the Postgrex.Range data type. For more information about this data type, see: The PostgreSQL Documentation: Range Types","ref":"MsbmsSystDatastore.DbTypes.DecimalRange.html","title":"MsbmsSystDatastore.DbTypes.DecimalRange","type":"module"},{"doc":"Callback implementation for Ecto.Type.embed_as/1 .","ref":"MsbmsSystDatastore.DbTypes.DecimalRange.html#embed_as/1","title":"MsbmsSystDatastore.DbTypes.DecimalRange.embed_as/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.equal?/2 .","ref":"MsbmsSystDatastore.DbTypes.DecimalRange.html#equal?/2","title":"MsbmsSystDatastore.DbTypes.DecimalRange.equal?/2","type":"function"},{"doc":"","ref":"MsbmsSystDatastore.DbTypes.DecimalRange.html#t:t/0","title":"MsbmsSystDatastore.DbTypes.DecimalRange.t/0","type":"type"},{"doc":"An Elixir representation of the PostgreSQL inet and cidr data types. Derived from the Postgrex.INET data type. For more information about this data type, see: The PostgreSQL Documentation: Network Address Types","ref":"MsbmsSystDatastore.DbTypes.Inet.html","title":"MsbmsSystDatastore.DbTypes.Inet","type":"module"},{"doc":"Callback implementation for Ecto.Type.embed_as/1 .","ref":"MsbmsSystDatastore.DbTypes.Inet.html#embed_as/1","title":"MsbmsSystDatastore.DbTypes.Inet.embed_as/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.equal?/2 .","ref":"MsbmsSystDatastore.DbTypes.Inet.html#equal?/2","title":"MsbmsSystDatastore.DbTypes.Inet.equal?/2","type":"function"},{"doc":"","ref":"MsbmsSystDatastore.DbTypes.Inet.html#t:t/0","title":"MsbmsSystDatastore.DbTypes.Inet.t/0","type":"type"},{"doc":"An Elixir representation of the PostgreSQL int8range data type. Derived from the Postgrex.Range data type. For more information about this data type, see: The PostgreSQL Documentation: Range Types","ref":"MsbmsSystDatastore.DbTypes.IntegerRange.html","title":"MsbmsSystDatastore.DbTypes.IntegerRange","type":"module"},{"doc":"Callback implementation for Ecto.Type.embed_as/1 .","ref":"MsbmsSystDatastore.DbTypes.IntegerRange.html#embed_as/1","title":"MsbmsSystDatastore.DbTypes.IntegerRange.embed_as/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.equal?/2 .","ref":"MsbmsSystDatastore.DbTypes.IntegerRange.html#equal?/2","title":"MsbmsSystDatastore.DbTypes.IntegerRange.equal?/2","type":"function"},{"doc":"","ref":"MsbmsSystDatastore.DbTypes.IntegerRange.html#t:t/0","title":"MsbmsSystDatastore.DbTypes.IntegerRange.t/0","type":"type"},{"doc":"An Elixir representation of the PostgreSQL interval data type. Derived from the Postgrex.Interval data type. For more information about this data type, see: The PostgreSQL Documentation: Date/Time Types","ref":"MsbmsSystDatastore.DbTypes.Interval.html","title":"MsbmsSystDatastore.DbTypes.Interval","type":"module"},{"doc":"Callback implementation for Ecto.Type.embed_as/1 .","ref":"MsbmsSystDatastore.DbTypes.Interval.html#embed_as/1","title":"MsbmsSystDatastore.DbTypes.Interval.embed_as/1","type":"function"},{"doc":"Callback implementation for Ecto.Type.equal?/2 .","ref":"MsbmsSystDatastore.DbTypes.Interval.html#equal?/2","title":"MsbmsSystDatastore.DbTypes.Interval.equal?/2","type":"function"},{"doc":"","ref":"MsbmsSystDatastore.DbTypes.Interval.html#t:t/0","title":"MsbmsSystDatastore.DbTypes.Interval.t/0","type":"type"},{"doc":"Provides basic OTP related features for Datastores. Functions in this module support running Datastores under supervision and creates a Datastore supervisor for managing Datastore Context worker processes.","ref":"MsbmsSystDatastore.Datastore.html","title":"MsbmsSystDatastore.Datastore","type":"module"},{"doc":"Provides a Datastore child specification for use with supervisors. Note that this function is not child_spec/1 as expected when a Supervisor attempts to start a process based on the module name alone. This is because there is a required parameter which renders that method of starting a process invalid as there's no default value for the parameter ( datastore_options ). Parameters datastore_options - a required Map of values which describe the Datastore and Datastore Context related connection options. See MsbmsSystDatastore.Types.datastore_options/0 for more. opts - a Keyword list of various options accepted or required by the DynamicSupervisor.start_link/1 function. Note that we provide some default values: strategy: :one_for_one , restart: :transient , timeout: 60_000 , and the :name option is defaulted to the datastore_options.datastore_name value.","ref":"MsbmsSystDatastore.Datastore.html#child_spec/2","title":"MsbmsSystDatastore.Datastore.child_spec/2","type":"function"},{"doc":"Starts the Datastore Supervisor and its requested child Datastore Contexts. When this function is called, a new DynamicSupervisor for the datastore is started and any Datastore Contexts which are identified in the datastore_options are also started and places under the Datastore Supervisor. Options name - establishes the name of the Datastore Supervisor and accepts any name which is valid according to the documentation for GenServer . The default value for this parameter is the datastore_name value found in the datastore_options attribute which configures the Datastore. datastore_options - a required Map of values which describe the Datastore and Datastore Context related connection options. See MsbmsSystDatastore.Types.datastore_options/0 for more.","ref":"MsbmsSystDatastore.Datastore.html#start_link/1","title":"MsbmsSystDatastore.Datastore.start_link/1","type":"function"},{"doc":"Provides basic OTP related features for Datastore Contexts. Usually functions in this API are called when processing MsbmsSystDatastore.Datastore module functions. However, there are times when direct Datastore Context manipulation is appropriate, such as stopping and then restarting a specific Context for maintenance reasons.","ref":"MsbmsSystDatastore.DatastoreContext.html","title":"MsbmsSystDatastore.DatastoreContext","type":"module"},{"doc":"Returns the Child Specification used to start the DatastoreContext service. Parameters datastore_options - a required Map of values which describe the Datastore and Datastore Context related connection options. See MsbmsSystDatastore.Types.datastore_options/0 for more. context_name - the identity of the context as understood by the system. The context name is both the identity of the context as an Ecto Repo and is also used for the child specification ID value as there is the possibility of multiple contexts to start under the Datastore Supervisor process. options - a Keyword List of optional values. Currently there are no attributes which are expected in this list and it is safe to omit.","ref":"MsbmsSystDatastore.DatastoreContext.html#child_spec/3","title":"MsbmsSystDatastore.DatastoreContext.child_spec/3","type":"function"},{"doc":"Starts a Datastore Context as a linked process to the caller. Typically this function is called once for each Context defined for a Datastore by the MsbmsSystDatastore.Datastore.start_link/1 function. However there are some cases where starting a Datastore Context independently can be desirable, such as the Context was earlier stopped for some reason and needs to be started under it's original Datastore Supervisor. Options name - see the context_name parameter for MsbmsSystDatastore.DatastoreContext.child_spec/3 . datastore_options - see the datastore_options parameter for MsbmsSystDatastore.DatastoreContext.child_spec/3 . This option is required. context - a required map describing the Context to be started. See t:MsbmsSystDatastore.Types.datastore_context() for more information.","ref":"MsbmsSystDatastore.DatastoreContext.html#start_link/1","title":"MsbmsSystDatastore.DatastoreContext.start_link/1","type":"function"},{"doc":"Provides common attributes for use by most application Ecto Schema instances. Chiefly, we ensure that the primary and foreign keys are all of a common type. To use this module, simply add use MsbmsSystDatastore.Schema in place of use Ecto.Schema .","ref":"MsbmsSystDatastore.Schema.html","title":"MsbmsSystDatastore.Schema","type":"module"}]