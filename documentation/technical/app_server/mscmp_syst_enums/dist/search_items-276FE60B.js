searchNodes=[{"doc":"","ref":"DevSupport.html","title":"DevSupport","type":"module"},{"doc":"","ref":"DevSupport.html#get_datastore_context_id/0","title":"DevSupport.get_datastore_context_id/0","type":"function"},{"doc":"","ref":"DevSupport.html#start_dev_environment/1","title":"DevSupport.start_dev_environment/1","type":"function"},{"doc":"","ref":"DevSupport.html#stop_dev_environment/0","title":"DevSupport.stop_dev_environment/0","type":"function"},{"doc":"MscmpSystEnums - Enumerations Data &amp; Service Management A framework for user configurable 'list of values' type functionality.","ref":"MscmpSystEnums.html","title":"MscmpSystEnums","type":"module"},{"doc":"Create a new user defined enumeration, optionally including functional type and enumeration item definitions. Parameters enum_params - a map containing the enumeration field values used in creating the user defined enumerations. If the enumeration's functional types and enumeration items are known at enumeration creation time, it is recommended to nest values for those records under the functional_types and enum_items attributes as appropriate. See the documentation for MscmpSystEnums.Types.enum_params/0 , MscmpSystEnums.Types.enum_functional_type_params/0 , and MscmpSystEnums.Types.enum_item_params/0 for more information about the available and required attributes. Examples iex&gt; example_enumeration = ...&gt; %{ ...&gt; internal_name : &quot;example_create_enum&quot; , ...&gt; display_name : &quot;Create Example Enum&quot; , ...&gt; user_description : &quot;Demonstrate enumeration creation.&quot; , ...&gt; functional_types : [ ...&gt; %{ ...&gt; internal_name : &quot;example_create_enum_functional_type&quot; , ...&gt; display_name : &quot;Create Example Enum / Functional Type&quot; , ...&gt; external_name : &quot;Functional Type&quot; , ...&gt; user_description : &quot;Demonstrate Functional Type Creation&quot; ...&gt; } ...&gt; ] , ...&gt; enum_items : [ ...&gt; %{ ...&gt; internal_name : &quot;example_create_enum_item&quot; , ...&gt; display_name : &quot;Create Example Enum / Enum Item&quot; , ...&gt; external_name : &quot;Enum Item&quot; , ...&gt; user_description : &quot;Demonstration of enumeration item creation.&quot; , ...&gt; enum_default : true , ...&gt; functional_type_default : false , ...&gt; functional_type_name : &quot;example_create_enum_functional_type&quot; ...&gt; } ...&gt; ] ...&gt; } iex&gt; MscmpSystEnums . create_enum ( example_enumeration ) :ok","ref":"MscmpSystEnums.html#create_enum/1","title":"MscmpSystEnums.create_enum/1","type":"function"},{"doc":"Creates a new user defined functional type. User defined functional types may only be added to user defined enumerations. Parameters enum_name - the Enumeration to which the new functional type will be a child. functional_type_params - a map of type t:Types.enum_functional_type_params/0 which establishes the data values for the new functional type.","ref":"MscmpSystEnums.html#create_enum_functional_type/2","title":"MscmpSystEnums.create_enum_functional_type/2","type":"function"},{"doc":"Creates a new user defined enumeration item. User defined enumeration items may be added to either user defined enumerations or system defined enumerations which are also marked user maintainable. Parameters enum_name -the enumeration to which the new enumeration item will be a child. enum_item_params - a map of type MscmpSystEnums.Types.enum_item_params/0 which establishes the data values for the new enumeration item.","ref":"MscmpSystEnums.html#create_enum_item/2","title":"MscmpSystEnums.create_enum_item/2","type":"function"},{"doc":"Deletes a user defined enumeration and its child functional type and enumeration item records. You cannot delete a system defined enumeration nor can you delete an enumeration that has been referenced in other application data records. Parameters enum_name - the enumeration which is to be deleted by the function.","ref":"MscmpSystEnums.html#delete_enum/1","title":"MscmpSystEnums.delete_enum/1","type":"function"},{"doc":"Deletes a user defined enumeration functional type record. You cannot delete a system defined functional type nor can you delete a functional type which is still referenced by enumeration item records. Parameters enum_name - the enumeration which is is the parent of the functional type to be deleted. enum_functional_type_name - the target functional type of the delete operation.","ref":"MscmpSystEnums.html#delete_enum_functional_type/2","title":"MscmpSystEnums.delete_enum_functional_type/2","type":"function"},{"doc":"Deletes a user defined enumeration item record. You cannot delete a system defined enumeration item nor can you delete an an enumeration item record which has been referenced in application data. Parameters enum_name - the enumeration which is is the parent of the enumeration item to be deleted. enum_item_name - the target functional type of the delete operation.","ref":"MscmpSystEnums.html#delete_enum_item/2","title":"MscmpSystEnums.delete_enum_item/2","type":"function"},{"doc":"Finds the default enumeration item for the requested enumeration or for the enumeration functional type. When no qualifying options are specified, this function will return the enumeration item record which is marked as being default for the enumeration. If the functional_type_name option is used, then the function returns the record which is marked as default for the functional type. Parameters enum_name - the name of the enumeration for which to retrieve the default enumeration item. opts - a keyword list which takes one of the following optional values: functional_type_name - If the enumeration uses functional types, this option allows you to find the default for the functional type rather than the entire enumeration. Examples iex&gt; % Msdata.SystEnumItems { ...&gt; internal_name : &quot;example_enum_item_two&quot; ...&gt; } = ...&gt; MscmpSystEnums . get_default_enum_item ( &quot;example_enumeration&quot; ) iex&gt; % Msdata.SystEnumItems { ...&gt; internal_name : &quot;example_enum_item_one&quot; ...&gt; } = ...&gt; MscmpSystEnums . get_default_enum_item ( ...&gt; &quot;example_enumeration&quot; , ...&gt; [ functional_type_name : &quot;example_enum_func_type_1&quot; ] ...&gt; )","ref":"MscmpSystEnums.html#get_default_enum_item/2","title":"MscmpSystEnums.get_default_enum_item/2","type":"function"},{"doc":"Returns an Enumeration Item record from the named Enumeration as identified by its id value. Other than using a different identifier to locate the enumeration item record, this function behaves the same as get_enum_by_name/2 . Parameters enum_name - the name of the Enumeration that is parent to the target Enumeration Item record. enum_item_id - the id value of the Enumeration Item record to return.","ref":"MscmpSystEnums.html#get_enum_item_by_id/2","title":"MscmpSystEnums.get_enum_item_by_id/2","type":"function"},{"doc":"Returns an Enumeration Item record from the named Enumeration as identified by its name. Parameters enum_name - the name of the Enumeration that is parent to the target Enumeration Item record. enum_item_name - the name of the Enumeration Item record to return. Examples iex&gt; % Msdata.SystEnumItems { ...&gt; internal_name : &quot;example_enum_item_one&quot; ...&gt; } = ...&gt; MscmpSystEnums . get_enum_item_by_name ( ...&gt; &quot;example_enumeration&quot; , ...&gt; &quot;example_enum_item_one&quot; ...&gt; )","ref":"MscmpSystEnums.html#get_enum_item_by_name/2","title":"MscmpSystEnums.get_enum_item_by_name/2","type":"function"},{"doc":"Returns true if the requested enumeration is system defined, false otherwise. Parameters enum_name - the name of the enumeration to test as being system defined. Examples iex&gt; MscmpSystEnums . get_enum_syst_defined ( &quot;example_enumeration&quot; ) false","ref":"MscmpSystEnums.html#get_enum_syst_defined/1","title":"MscmpSystEnums.get_enum_syst_defined/1","type":"function"},{"doc":"Returns true if the requested enumeration is user maintainable, false otherwise. Parameters enum_name - the name of the enumeration to test as being user maintainable. Examples iex&gt; MscmpSystEnums . get_enum_user_maintainable ( &quot;example_enumeration&quot; ) true","ref":"MscmpSystEnums.html#get_enum_user_maintainable/1","title":"MscmpSystEnums.get_enum_user_maintainable/1","type":"function"},{"doc":"Retrieves all values associated with the requested enumeration. Parameters enum_name - indicates the name of the enumeration for which to retrieve values. The successful return of this function is an instance of the Msdata.SystEnums struct containing the values requested, including the enum_items association populated as well as each item's functional_type association populated. Examples iex&gt; MscmpSystEnums . get_enum_values ( &quot;example_enumeration&quot; )","ref":"MscmpSystEnums.html#get_enum_values/1","title":"MscmpSystEnums.get_enum_values/1","type":"function"},{"doc":"Retrieves the currently set Enumerations Service name or nil if none has been set. Examples iex&gt; MscmpSystEnums . get_enums_service ( ) :enums_instance","ref":"MscmpSystEnums.html#get_enums_service/0","title":"MscmpSystEnums.get_enums_service/0","type":"function"},{"doc":"Returns the internal name of the functional type to which the given Enum Item record belongs. Parameters enum_name - the name of the enumeration to which the Enum Item ID belongs. enum_item_id - the record ID of the Enum Item record of interest. Example iex&gt; example_enum_item = MscmpSystEnums . get_enum_item_by_name ( ...&gt; &quot;example_enumeration&quot; , ...&gt; &quot;example_enum_item_one&quot; ) iex&gt; MscmpSystEnums . get_functional_type_by_enum_item_id ( ...&gt; &quot;example_enumeration&quot; , ...&gt; example_enum_item . id ) &quot;example_enum_func_type_1&quot;","ref":"MscmpSystEnums.html#get_functional_type_by_enum_item_id/2","title":"MscmpSystEnums.get_functional_type_by_enum_item_id/2","type":"function"},{"doc":"Retrieves all values for all enumerations. This function returns all other enumeration metadata, such as the records' IDs, descriptions, etc. Also included is association data for the enum_items field and the functional_type association of each item. Examples iex&gt; MscmpSystEnums.list_all_enums()","ref":"MscmpSystEnums.html#list_all_enums/0","title":"MscmpSystEnums.list_all_enums/0","type":"function"},{"doc":"Returns the list of Enumeration Functional Types associated with the requested enumeration. Parameters enum_name - the name of the enumeration for which to retrieve the list of enumeration functional types.","ref":"MscmpSystEnums.html#list_enum_functional_types/1","title":"MscmpSystEnums.list_enum_functional_types/1","type":"function"},{"doc":"Returns the list of Enumeration Items associated with the requested enumeration. Parameters enum_name - the name of the enumeration for which to retrieve the list of enumeration items.","ref":"MscmpSystEnums.html#list_enum_items/1","title":"MscmpSystEnums.list_enum_items/1","type":"function"},{"doc":"Returns the list of Enumeration Items associated with the requested enumeration sorted by their sort_order value. In all other regards this function works the same MscmpSystEnums.list_enum_items/1 .","ref":"MscmpSystEnums.html#list_sorted_enum_items/1","title":"MscmpSystEnums.list_sorted_enum_items/1","type":"function"},{"doc":"Establishes the current Enumerations Service instance for the process. A running system is likely to have more than one instance of the Enums Service running. For example, in multi-tenant applications each tenant may have its own instance of the Enumerations Service, caching data unique to the tenant. Calling MscmpSystEnums.put_enums_service/1 will set the reference to the desired Enumerations Service instance for any subsequent MscmpSystEnums calls. The service name is set in the Process Dictionary of the process from which the calls are being made. As such, you must call put_enums_service at least once for any process from which you wish to access the Enumerations Service. Because we're just thinly wrapping Process.put/2 here, the return value will be the previous value set here, or nil if no previous value was set. Parameters service_name - The name of the service which is to be set as servicing the process. Examples iex&gt; MscmpSystEnums . put_enums_service ( :enums_instance )","ref":"MscmpSystEnums.html#put_enums_service/1","title":"MscmpSystEnums.put_enums_service/1","type":"function"},{"doc":"Change the values of an existing enumeration functional type record. The following fields may be changed using this function: internal_name - Note that you cannot change the internal name of a system defined functional type. display_name external_name user_description Other fields of the Msdata.SystEnumFunctionalTypes data type may not be modified via this module. Parameters enum_name - the enumeration which is parent to the functional type being modified. functional_type_name - the specific functional type which will be updated. functional_type_params - a map of type MscmpSystEnums.Types.enum_functional_type_params/0 which establishes the data values which are to be changed.","ref":"MscmpSystEnums.html#set_enum_functional_type_values/3","title":"MscmpSystEnums.set_enum_functional_type_values/3","type":"function"},{"doc":"Change the values of an existing enumeration item record. The following fields may be changed using this function: internal_name - Note that you cannot change the internal name of a system defined enumeration item. display_name external_name user_description enum_default functional_type_default sort_order user_options Other fields of the Msdata.SystEnumItems data type may not be modified via this module. Parameters enum_name - the enumeration which is parent to the enumeration item. enum_item_name - the specific enumeration item which will be updated. enum_item_params - a map of type MscmpSystEnums.Types.enum_item_params/0 which establishes the data values which are to be changed.","ref":"MscmpSystEnums.html#set_enum_item_values/3","title":"MscmpSystEnums.set_enum_item_values/3","type":"function"},{"doc":"Changes the values of an existing enumeration. You can change the following fields using the this function: internal_name - Note that you cannot change the internal name of a system defined enumeration. display_name user_description default_user_options Other fields of the Msdata.SystEnums data type may not be modified via this module. Also note that only the enumeration value itself can be modified. Changes to functional type or enumeration item records must be addressed individually. Parameters enum_name - the enumeration which is being modified. enum_params - a map of type MscmpSystEnums.Types.enum_params/0 which establishes the data values which are to be changed.","ref":"MscmpSystEnums.html#set_enum_values/2","title":"MscmpSystEnums.set_enum_values/2","type":"function"},{"doc":"Starts an instance of the Enumerations Service. Starting the service establishes the required processes and pre-populates the service cache with data from the database. Most other functions in this module require that the service is started prior to use and will fail if the service is not started. The service_name argument provides a unique name under which the service can be found. This argument is a subset of those that allowed for registering GenServers; the allowed forms for service name are simple atoms for basic local name registry or a &quot;via tuple&quot;, such as might be used with the Registry module. The datastore_context_name is an atom which represents a started MscmpSystDb context. This context will be used for accessing and modifying database data.","ref":"MscmpSystEnums.html#start_link/1","title":"MscmpSystEnums.start_link/1","type":"function"},{"doc":"The data structure defining the functional types associated with a given enumeration. Functional types allow the application behavior associated with list choices to be decoupled from the information conveyance that the same list of choices may be able to provide. For example, the application may only need to recognize the difference between 'active' and 'inactive' order records as a status, however a user may want to see some reflection of why an order was made inactive, such as it was cancelled or that it was fulfilled. In this case would create two entries of functional type inactive, one each for cancelled and fulfilled. Functionally the application will see the same value, but user reporting can reflect the nuance not needed by the application functionality. Defined in MscmpSystEnums .","ref":"Msdata.SystEnumFunctionalTypes.html","title":"Msdata.SystEnumFunctionalTypes","type":"module"},{"doc":"","ref":"Msdata.SystEnumFunctionalTypes.html#t:t/0","title":"Msdata.SystEnumFunctionalTypes.t/0","type":"type"},{"doc":"The data structure defining individual enumerated values. Defined in MscmpSystEnums .","ref":"Msdata.SystEnumItems.html","title":"Msdata.SystEnumItems","type":"module"},{"doc":"","ref":"Msdata.SystEnumItems.html#changeset/3","title":"Msdata.SystEnumItems.changeset/3","type":"function"},{"doc":"","ref":"Msdata.SystEnumItems.html#t:t/0","title":"Msdata.SystEnumItems.t/0","type":"type"},{"doc":"The data structure defining available system enumerations (lists of values). Defined in MscmpSystEnums .","ref":"Msdata.SystEnums.html","title":"Msdata.SystEnums","type":"module"},{"doc":"","ref":"Msdata.SystEnums.html#changeset/3","title":"Msdata.SystEnums.changeset/3","type":"function"},{"doc":"","ref":"Msdata.SystEnums.html#t:t/0","title":"Msdata.SystEnums.t/0","type":"type"},{"doc":"Types used by the Enums service module.","ref":"MscmpSystEnums.Types.html","title":"MscmpSystEnums.Types","type":"module"},{"doc":"Identification of each unique Enum Functional Type that can be associated with an Enum.","ref":"MscmpSystEnums.Types.html#t:enum_functional_type_name/0","title":"MscmpSystEnums.Types.enum_functional_type_name/0","type":"type"},{"doc":"A map definition describing what specific key/value pairs are available for passing as SystEnumFunctionalTypes changeset parameters.","ref":"MscmpSystEnums.Types.html#t:enum_functional_type_params/0","title":"MscmpSystEnums.Types.enum_functional_type_params/0","type":"type"},{"doc":"Record ID type for the Enum Item record.","ref":"MscmpSystEnums.Types.html#t:enum_item_id/0","title":"MscmpSystEnums.Types.enum_item_id/0","type":"type"},{"doc":"Identification of each unique Enum Value that can be associated with an Enum.","ref":"MscmpSystEnums.Types.html#t:enum_item_name/0","title":"MscmpSystEnums.Types.enum_item_name/0","type":"type"},{"doc":"A map definition describing what specific key/value pairs are available for passing as SystEnumItems changeset parameters.","ref":"MscmpSystEnums.Types.html#t:enum_item_params/0","title":"MscmpSystEnums.Types.enum_item_params/0","type":"type"},{"doc":"Identification of each unique Enum managed by the Enums Service instance.","ref":"MscmpSystEnums.Types.html#t:enum_name/0","title":"MscmpSystEnums.Types.enum_name/0","type":"type"},{"doc":"A map definition describing what specific key/value pairs are available for passing as SystEnums changeset parameters.","ref":"MscmpSystEnums.Types.html#t:enum_params/0","title":"MscmpSystEnums.Types.enum_params/0","type":"type"},{"doc":"The expected form of the parameters used to start the Enums service.","ref":"MscmpSystEnums.Types.html#t:enum_service_params/0","title":"MscmpSystEnums.Types.enum_service_params/0","type":"type"},{"doc":"The valid forms of service name acceptable to identify the Enums service. Currently we expect the service name to be an atom, though we expect that any of a simple local name, the :global registry, or the Registry module to be used for service registration. Any registry compatible with those options should also work.","ref":"MscmpSystEnums.Types.html#t:service_name/0","title":"MscmpSystEnums.Types.service_name/0","type":"type"}]