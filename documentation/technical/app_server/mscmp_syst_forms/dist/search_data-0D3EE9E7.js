searchData={"items":[{"type":"module","title":"MscmpSystForms.Types.ComponentDisplayModes","doc":"A struct defining the different kinds of display mode data which can be\ncommunicated to a user interface component.\n\nUser interface components can be configured with a variety of display options,\ncalled \"modes\".  Between the functions which generate the effective modes for\nthe user interface and the user interface components themselves there must be\na standard way to communicate and this type defines the structure of that\ncommunication.\n\nIt is worth noting that the Component will receive its display modes in data\nwith this structure.","ref":"MscmpSystForms.Types.ComponentDisplayModes.html"},{"type":"type","title":"MscmpSystForms.Types.ComponentDisplayModes.t/0","doc":"A struct defining the different kinds of display mode data which can be\ncommunicated to a user interface component.\n\nSee `MscmpSystForms.Types.ComponentDisplayModes` for more.","ref":"MscmpSystForms.Types.ComponentDisplayModes.html#t:t/0"},{"type":"module","title":"MscmpSystForms.Types.ComponentInfo","doc":"This struct identifies the specific returned textual information describing\nthe component and configured in the Form Configurations.","ref":"MscmpSystForms.Types.ComponentInfo.html"},{"type":"type","title":"MscmpSystForms.Types.ComponentInfo.t/0","doc":"This struct identifies the specific returned textual information describing\nthe component and configured in the Form Configurations.\n\nSee `t:MscmpSystForms.Types.ComponentConfig.t/0` for information regarding the\nattributes here.","ref":"MscmpSystForms.Types.ComponentInfo.html#t:t/0"},{"type":"behaviour","title":"MscmpSystForms","doc":"The `MscmpSystForms` module provides a standard methodology for authoring\napplication user interface forms in support of business systems development.\n\n> #### `use MscmpSystForms` {: .info}\n>\n> When you `use MscmpSystForms`, the MscmpSystForms module will set `@behaviour\n> MscmpSystForms` and the following functions will be created for the using\n> module:\n>\n>  * `update_button_state/3`\n>  * `start_processing_override/2`\n>  * `finish_processing_override/2`\n>  * `update_display_data/3`\n>  * `get_component_info/1`\n>\n> Documentation for these functions is available in the module and they are\n> simply delegates to the same functions (give or take some arity) in\n> `MscmpSystForms`.","ref":"MscmpSystForms.html"},{"type":"behaviour","title":"Foundational Ideas - MscmpSystForms","doc":"At the heart of our methodology and support are several key ideas presented\nhere.\n\n> ##","ref":"MscmpSystForms.html#module-foundational-ideas"},{"type":"behaviour","title":"On \"Forms\" {: .neutral} - MscmpSystForms","doc":">\n> One thing to be mindful of as you read this section and the documentation\n> generally is our use of the word \"Form\".  In this documentation we will more\n> often use the word \"Form\" in the more generic sense of a user interface to a\n> particular subject or feature than to refer to a specific Form Component\n> or something like an HTML form; we will use the word in that manner as well and\n> hopefully context should make clear which sense we mean.\n\n##","ref":"MscmpSystForms.html#module-on-forms-neutral"},{"type":"behaviour","title":"Definitions vs. Rendering - MscmpSystForms","doc":"A \"Form\" conforming to the `MscmpSystForms` standard will be defined in two\ndistinct parts:\n\n  * __Definitional Concerns__\n\n    Our forms may be complex and include a variety of both informational and\n    input fields (elements) to which different users will have different\n    permission based entitlements.  Additionally, some element properties, such\n    as labels, may appear not just along side the element in the user interface\n    but also in tool tips, quick help pages and the like. Some properties, such\n    as permissions or even some runtime display properties can easily be made\n    inheritable from parent elements to child elements; naturally, the idea of\n    virtual elements can be useful in building such hierarchies as well.\n\n    Having a place to define both these static elements and the inheritance\n    hierarchies between elements without necessarily being coupled to the layout\n    has advantages.  We can create a cleaner definition of these properties\n    while reducing the redundancies that defining these attributes in the\n    context of page layout concerns could force on us as well as reducing the\n    noise that display related attributes would necessarily force on us.\n\n  * __Rendering Concerns__\n\n    All forms must ultimately be laid out for rendering as the user interface\n    and this area of concern deals with the issues of laying out our form\n    elements.\n\nThe truth is that the \"Rendering Concerns\" are really the typical user interface\ndevelopment activities (web or otherwise) that most front end developers will\nthink about and it is the \"Definitional Concerns\" which we are adding to that\nprocess.\n\n##","ref":"MscmpSystForms.html#module-definitions-vs-rendering"},{"type":"behaviour","title":"Form Data - MscmpSystForms","doc":"It is not uncommon to closely couple database Ecto schema definitions with the\npresentation and management forms, using the Ecto database schema to directly\ndrive the user interface forms.  The problem is that it can force unnatural\ncompromises to either the database structure (assuming that the Ecto Schemas are\nrepresentative of the underlying table structures) or the user interface forms\nor both.\n\nIn our model we view both the database structure and the user interface design\nas first class concerns and as such our standard is to not directly use Ecto\nSchemas which define database data to also back forms.  We create independent\nEcto [\"Embedded Schemas\"](https://hexdocs.pm/ecto/embedded-schemas.html) to back\nthe forms specifically.  It absolutely happens that there can be form schemas\nand database schemas with high degrees of similarity, but by setting the\nexpectation that we will always have an Embedded Schema defined to back the form\nensures that the development of the form avoids the aforementioned conflicts and\ncompromises.\n\nAny given form will also have three senses of its data, each of which may differ\nfrom each other enough that we track the data for all three purposes:\n\n  * __Original Data__\n\n    This is the data which a form initializes with.  When creating new records,\n    this will either be empty or populated with the default values defined as\n    the starting place for any new records.  For viewing or editing existing\n    data records, this value will be the data as loaded from the database.  As\n    the user interacts with the form, these original data values will not\n    change, always reflecting the starting point with which the form was\n    initialized.\n\n    While not always useful we can use the original data for fallback/reset\n    purposes, to display changes (e.g. percentage changed) relative to the\n    starting data, and similar such purposes.\n\n    In the form's assigns we represent this using the form backing `Ecto`\n    embedded schema struct which can be passed as the \"data\" expected by\n    `Ecto.Changeset` validation functions.  This data is kept by the view\n    including all values regardless of user permissions to see or alter those\n    values.\n\n  * __Current Data__\n\n    The current state of the data, including any changes made by the user or\n    system as they interact with the form, but prior to those changes being\n    committed to the database.  The starting point of this data when the form\n    initializes is typically the same as the Original Data.\n\n    As the user interacts with the form, the current data is updated to reflect\n    changes.  We usually store this data in the form's assigns as a map as we\n    can pass this directly to the data validation functions (`Ecto.Changeset`\n    based) as needed.\n\n    The current data includes all form data regardless of the user's permissions\n    to view or edit that data.\n\n  * __Display Data__\n\n    A representation of the data for the purposes of display to the user in the\n    form.  The data values in Display Data are the same as those in Current Data\n    except they are filtered by the user's permissions for data visibility.\n\n    Display Data is stored in the view's assigns as a `t:Phoenix.HTML.Form.t/0`\n    struct so that it can be accessed directly by the LiveView for rendering.\n\n##","ref":"MscmpSystForms.html#module-form-data"},{"type":"behaviour","title":"Working with Phoenix - MscmpSystForms","doc":"The most common use case for `MscmpSystForms` is for facilitating Phoenix based\nweb and external API user interface development.  To understand how\n`MscmpSystForms` fits into the Phoenix development model it's important to\nunderstand certain assumptions we make about the role of Phoenix in our broader\napplication development paradigm.\n\n> ##","ref":"MscmpSystForms.html#module-working-with-phoenix"},{"type":"behaviour","title":"Important {: .warning} - MscmpSystForms","doc":">\n> Our thinking and approach to working with Phoenix is not the conventional or\n> generally accepted approach in many ways.  Use caution and understand the\n> trade-offs when evaluating our work in this regard.\n\nOur development model takes the stance that Phoenix is not the application, but\nthe user interface layer.  That layer brings together a lot of dependencies to\ndeliver services, but those dependencies are independently developed as separate\nElixir/OTP applications and could be used (in theory) in other contexts.\n\nAs such our Phoenix application only deals with the presentation of the user\ninterface and wiring that user interface to the actual business/domain logic\nwritten elsewhere.  In the process some elements which by convention has certain\nroles within typical Phoenix application development are repurposed to serve our\nneeds better.","ref":"MscmpSystForms.html#module-important-warning"},{"type":"behaviour","title":"Developing Forms - MscmpSystForms","doc":"With our Foundational Ideas having been discussed, we now move on to looking how\nthis translates into form development.\n\n##","ref":"MscmpSystForms.html#module-developing-forms"},{"type":"behaviour","title":"Source Organization & File Roles - MscmpSystForms","doc":"Starting with a standard Phoenix application, to which `MscmpSystForms` has been\nadded as a dependency, we will have two basic directories (or applications in\nthe case where the Phoenix project is initialized as an umbrella project):\n`my_app`, `my_app_web`.  In typical Phoenix applications the web based user\ninterface including views and controllers are built in the `my_app_web`\ndirectory and the business/domain logic (i.e. \"contexts\")  resides in the\n`my_app` directory.  We adopt the directories created by `mix phx.new`, but we\nchange their purpose:\n\n  * __my_app_web__\n\n    Hosts view related code.  Controller like code is discouraged here.\n\n  * __my_app__:\n\n    Hosts controller like logic.  Business/Domain Logic is discouraged here and\n    should be developed in external Elixir Projects and included as dependencies\n    in the Phoenix application.\n\nUsing these directories, and assuming our application has one form (`my_form`),\nwe will create the following basic file structure for our form's source code:\n\n```\nmy_app_web\n└── lib\n    └── my_app_web\n        └── live\n            ├── my_form_live.ex\n            └── my_form_live.html.heex\n\nmy_app\n└── lib\n    ├── api\n    │   └── msform\n    │       └── my_form.ex\n    └── impl\n        └── msform\n            └── my_form\n                ├── actions.ex\n                ├── data.ex\n                └── definitions.ex\n\n```\n> ##","ref":"MscmpSystForms.html#module-source-organization-file-roles"},{"type":"behaviour","title":"Note {: .neutral} - MscmpSystForms","doc":">\n> The example directory structure above has been simplified to focus on those\n> entries important to understanding the `MscmpSystForms` development model.\n> Other files and directories which are standard for Phoenix development and\n> which would be present but unaltered under our model have been excluded from\n> the example listings.\n\n* __my_app_web__\n\n  In the `my_app_web` example listing the path `my_app_web/lib/my_app_web/live`\n  is the standard Phoenix pathing for `Phoenix.LiveView` pages.  While we do\n  make some assumption changes to Phoenix standard practices in regard to what\n  gets done in this directory, those changes are minor and really a matter of\n  convention.\n\n  ##","ref":"MscmpSystForms.html#module-note-neutral"},{"type":"behaviour","title":"Files - MscmpSystForms","doc":"* `my_form_live.html.heex`\n\n      this file is a typical Phoenix LiveView `Heex` file.  The only difference\n      from standard Phoenix Heex development is that\n      `MscmpSystForms.WebComponents` will be used as a source of components\n      rather than the `CoreComponents` module which comes with Phoenix (though\n      it is available).\n\n    * `my_form_live.ex`\n\n      this file is the typical LiveView controller file\n      which backs the LiveView which is home to the LiveView's `mount/3`,\n      `handle_event/3`, and `handle_info/2` functions.  The difference under the\n      `MscmpSystForms` model is that we typically code much less logic directly\n      in this file allowing that logic to exist in the `my_app` directory\n      hierarchy.\n\n      Therefore this file is limited to two roles: 1) mapping LiveView events to\n      controller level logic in the `my_app` code; and 2) values which directly\n      become display issues in the web interface; for example text strings for\n      flash messages related to validation failures might be coded here since\n      we're effectively still in the \"view\" layer per our definitions.\n\n* __my_app__\n\n  Under our methodology we make the greatest departures from typical Phoenix\n  development in this directory.  In typical Phoenix development practice this\n  directory is the home of the business/domain logic, the \"model\".  For us,\n  however, this is our controller layer, but even more importantly it is where\n  we deal with the \"Definitional Concerns\" discussed earlier and which is unique\n  to `MscmpSystForms` based forms.\n\n  ##","ref":"MscmpSystForms.html#module-files"},{"type":"behaviour","title":"Sub-directories & Files - MscmpSystForms","doc":"* `api/msform`\n\n      This directory holds the source files which define the API to the form\n      which is used by the form logic defined in `my_app_web`.\n\n      For each form, we define a single Elixir source file named after the name\n      of the form it exists to support.\n\n    * `api/msform/my_form.ex`\n\n      This Elixir source file defines a single module in the `Msform` namespace\n      which implements the `MscmpSystForms` behavior (typically with\n      `use MscmpSystForms`).  This module also defines a struct of the form's\n      backing data using `Ecto.Schema.embedded_schema/1` so that we can use the\n      full data mapping and validation capability of both Ecto and Phoenix\n      forms.\n\n      Finally this module also defines an API for the form which includes the\n      `defdelegate` calls for the `MscmpSystForms` Behaviour callbacks and\n      functions to expose other controller-like logic as appropriate to the\n      forms specific needs.  Note that the API is typically delegating to\n      specific source files and internal modules written in the\n      `impl/msform/my_form/*.ex` files.\n\n      Public facing types for the form are also defined in this file. Usually\n      this will contain the definition of `t()` for the embedded schema and the\n      a type `parameters` for use in typespecs associated with Changeset\n      processing.  Since functions like `Ecto.Changeset.cast/4` require their\n      'params' argument to be represented as a map and since we know the\n      possible valid structures of the map we can define a typespec to help\n      documenting that structure.\n\n    * `impl/msform`\n\n      This directory holds the implementations of form related business logic.\n      The source files defining the business logic for each form is kept in a\n      sub-directory named after the form's name.  This logic is broken out into\n      topically oriented source files (`actions.ex`, `data.ex`, and\n      `definitions.ex`) as described below.\n\n    * `impl/msform/my_form/actions.ex`\n\n      This source file typically defines a single module for the form\n      implementing the controller-like actions which are initiated from the\n      user interface or other sources the form should respond to (e.g. PubSub\n      messages).\n\n    * `impl/msform/my_form/data.ex`\n\n      Typically defines a single module containing functions which implement\n      form data validation via Changeset processing.\n\n    * `impl/msform/my_form/definitions.ex`\n\n      This file contains a single module directed at resolving a form's\n      \"Definitional Concerns\".  In this module we find the implementation of the\n      `c:MscmpSystForms.get_form_config/0` and\n      `c:MscmpSystForms.get_form_modes/0` functions.","ref":"MscmpSystForms.html#module-sub-directories-files"},{"type":"function","title":"MscmpSystForms.finish_processing_override/2","doc":"Removes a processing override from the active overrides list.\n\nOnce an active operation previously added to the process overrides list has\ncompleted its processing, this function is used to remove it from the list so\nthat any user interface components that are watching for the operation to be\nactive can resume their normal behavior.","ref":"MscmpSystForms.html#finish_processing_override/2"},{"type":"function","title":"Parameters - MscmpSystForms.finish_processing_override/2","doc":"* `socket_or_assigns` - the socket or assigns for the current view.\n\n  * `override` - the name of the processing override to remove from the active\n  process overrides list.","ref":"MscmpSystForms.html#finish_processing_override/2-parameters"},{"type":"function","title":"MscmpSystForms.get_component_info/2","doc":"Retrieves the textual information (`label`, `label_link`, and `info`)\nfield values from the Form Configuration for the identified component.\n\nThis is a convenience function which accepts either a `form_id` value or\na `binding_id` value and returns the textual information for the\ncomponent if found by the passed identifier.","ref":"MscmpSystForms.html#get_component_info/2"},{"type":"function","title":"Parameters - MscmpSystForms.get_component_info/2","doc":"* `module` - the name of the form module implementing the\n  `c:MscmpSystForms.get_form_config/0` callback with which form configuration\n  data will be retrieved.\n\n  * `component_id` - this value is either the `form_id` or `binding_id`\n  that is associated with the component for which textual information is\n  being retrieved.","ref":"MscmpSystForms.html#get_component_info/2-parameters"},{"type":"callback","title":"MscmpSystForms.get_form_config/0","doc":"Returns a list of `t:MscmpSystForms.Types.FormConfig.t/0` structs which\nrepresent the abstract configuration of the form.\n\nThis function is usually simply returns a hard-coded list of\n`t:MscmpSystForms.Types.FormConfig.t/0` values as defined\nby the form developer.  This function is called by various form rendering\nrelated functions to get the starting point for each component from which\n`t:MscmpSystForms.Types.ComponentConfig.t/0` values will be created by\n`MscmpSystForms.get_render_configs/5`.\n\nNote that not all elements in a user interface require representation in the\nform configuration returned by this function.  However, any element not\nincluded in the form configuration here will be excluded from responding to\nany changes in form state, processing overrides, or user permissions.\n\nThe configurations returned by this function, and the parent/child\nrelationships between individual `FormConfig` values, should be structured to\nfacilitate the appropriate inheritance of properties from `FormConfig` parent\nto child; the goal being to reduce redundant establishment of those properties\nin the configuration.  This will often times result in the data returned by\nthis function being hierarchical and resembling the layout structure of the\nrendered form even though there is no requirement that the structure of these\nconfigurations are related to the rendered layout in any way.","ref":"MscmpSystForms.html#c:get_form_config/0"},{"type":"callback","title":"Examples - MscmpSystForms.get_form_config/0","doc":"Consider the following example configuration:\n\n```elixir\ndef get_form_config do\n  [\n    %FormConfig{\n      permission: :form_access_permission,\n      label: \"Virtual FormConfig\",\n      children: [\n        %FormConfig{\n          form_id: :concrete_config_input,\n          binding_id: :data_field_input,\n          label: \"Example Input Field\",\n        },\n        %FormConfig{\n          form_id: :concrete_config_submit_button,\n          label: \"Submit\",\n          button_state: :message\n        }\n      ]\n    }\n  ]\nend\n```\nAt the top level we have a virtual or abstract `FormConfig` value; we know\nit's virtual because it defines no `form_id` value.  This top level value\nexists so that its children can inherit its permission value and its defined\ndisplay modes (see `c:MscmpSystForms.get_form_modes/0`).\n\nThis doesn't mean that the returned configuration represents all elements in\nthe rendered form and the parent in this case, being virtual, doesn't\ncorrespond to any rendered form element at all (that would require a `form_id`\nvalue being defined).  The overall structure and the virtual element exist to\npurely support the inheritance of configuration and state related values.\n\nWhile with the structure in the example above, we can take advantage of\ninherited values, we can selectively override those values as needed.\nConsider this revision of the first example:\n\n```elixir\ndef get_form_config do\n  [\n    %FormConfig{\n      permission: :form_access_permission,\n      label: \"Virtual FormConfig\",\n      children: [\n        %FormConfig{\n          form_id: :concrete_config_input,\n          binding_id: :data_field_input,\n          label: \"Example Input Field\",\n        },\n        %FormConfig{\n          form_id: :concrete_config_submit_button,\n          permission: :form_submit_permission,\n          label: \"Submit\",\n          button_state: :message\n        }\n      ]\n    }\n  ]\nend\n```\n\nIn the revised example, we don't inherit the the `:form_access_permission`\nvalue of the parent in `:concrete_config_submit_button` any longer, but now\ncheck the `:form_submit_permission` permission instead.  The\n`:concrete_config_submit_button` will continue to inherit other values from\nthe parent that it has not explicitly overridden.","ref":"MscmpSystForms.html#c:get_form_config/0-examples"},{"type":"callback","title":"MscmpSystForms.get_form_modes/0","doc":"Returns a map of the recognized form states and the display modes each\ncomponent should take when a given form state is specified.\n\nThe map returned by this function has a basic hierarchical structure where the\nForm State `feature` is at the top level,  the Form State `mode` taking the\nnext level, and the Form State `State` being nested under `mode`.  In this\nway each defined `feature` can have one or more `mode` entries and each `mode`\nentry can have one or more `state` entries.\n\n```elixir\n%{\n   : %{\n    default: %{\n       :\n        %MscmpSystForms.Types.ComponentDisplayModes{ }\n    },\n     : %{\n       : %{\n         :\n          %MscmpSystForms.Types.ComponentDisplayModes{ }\n      }\n    },\n    processing_overrides: %{\n       : [ ]\n    }\n  }\n}\n```","ref":"MscmpSystForms.html#c:get_form_modes/0"},{"type":"callback","title":"Mode Structure Rules & Considerations - MscmpSystForms.get_form_modes/0","doc":"#","ref":"MscmpSystForms.html#c:get_form_modes/0-mode-structure-rules-considerations"},{"type":"callback","title":"Feature Level Map - MscmpSystForms.get_form_modes/0","doc":"The Feature level of the map will accept one or more Feature entries where the\nkey for each entry is the name\n(`t:MscmpSystForms.Types.form_state_feature_name/0`) by which the Feature is\nto be referenced elsewhere in the application code.  Most forms are likely to\nonly support a single Feature; in this case simply name the Feature\n`:default` as this is the default feature name used when one isn't otherwise\nprovided.\n\nThe contents of each Feature's map consist of:\n\n  * a single `:default` key with values establishing the default component\n  modes to use when the other Form State modes fail to define a component mode\n  for a given component.\n\n  * a `:processing_overrides` key which define the processing overrides the\n  various form components should respond to.\n\n  * one or more \"modes\" where the key is the Mode name\n  (`t:MscmpSystForms.Types.form_state_mode_name/0`) and the value is a map of\n  Form State States which define the various states supported by that Mode.\n\n#","ref":"MscmpSystForms.html#c:get_form_modes/0-feature-level-map"},{"type":"callback","title":"Mode Level Map - MscmpSystForms.get_form_modes/0","doc":"The Mode level is expressed as a key/value map where the keys are Form State\n\"State\" names (`t:MscmpSystForms.Types.form_state_state_name/0`) and the\nvalues of those keys are the State level maps.  There are no additional\nentries or default values.\n\n#","ref":"MscmpSystForms.html#c:get_form_modes/0-mode-level-map"},{"type":"callback","title":"State Level Map - MscmpSystForms.get_form_modes/0","doc":"The State level is a simple key/value map where keys are Form State State\nNames (`t:MscmpSystForms.Types.form_state_state_name/0`) and the values are\nmaps of component Form IDs (`t:MscmpSystForms.Types.form_id/0`) as keys along\nwith their configured component modes\n(`t:MscmpSystForms.Types.ComponentDisplayModes.t/0`) for that given\nFeature/Mode/State combination.","ref":"MscmpSystForms.html#c:get_form_modes/0-state-level-map"},{"type":"callback","title":"Examples - MscmpSystForms.get_form_modes/0","doc":"Different form elements may take on different display properties as the state\nof the form evolves over time with changes in data or in response to user\ninteractions.  This function returns a nested map structure which, based on\nthe examples from `c:get_form_config/0`, might look like:\n\n```elixir\n%{\n  default: %{\n    default: %{\n      concrete_config_input:\n        %MscmpSystForms.Types.ComponentDisplayModes{component_mode: :visible},\n      concrete_config_submit_button:\n        %MscmpSystForms.Types.ComponentDisplayModes{component_mode: :visible}\n    },\n    entry: %{\n      basic_form_state: %{\n        concrete_config_input:\n          %MscmpSystForms.Types.ComponentDisplayModes{component_mode: :entry},\n        concrete_config_submit_button:\n          %MscmpSystForms.Types.ComponentDisplayModes{component_mode: :entry}\n      }\n    },\n    view: %{\n      basic_form_state: %{\n        concrete_config_input:\n          %MscmpSystForms.Types.ComponentDisplayModes{component_mode: :visible},\n        concrete_config_submit_button:\n          %MscmpSystForms.Types.ComponentDisplayModes{component_mode: :visible}\n      }\n    },\n    processing_overrides: %{\n      concrete_config_input: [:process_underway]\n      concrete_config_submit_button: [:process_underway]\n    }\n  }\n}\n```","ref":"MscmpSystForms.html#c:get_form_modes/0-examples"},{"type":"function","title":"MscmpSystForms.get_render_configs/5","doc":"Builds current Component Configurations based on the Form Configuration and\nForm Modes definitions in combination with runtime values such as the current\nForm State and the current user's permission grants.\n\nRender configurations, also called Component Configurations in this\ndocumentation provide each component in the user interface instructions on how\nto render and what interactivity to accept from the user.\n\nThe Component Configurations generated by this function are returned as a map\nof key/value pairs where the keys are the `t:MscmpSystForms.Types.form_id/0`\nvalues of the user interface components and the values are\n`t:MscmpSystForms.Types.ComponentConfig.t/0` structs defining the current\nrendering requirements of the components.  Typically this map is merged into\nthe assigns of the form so that components can retrieve the configurations at\nrender time.","ref":"MscmpSystForms.html#get_render_configs/5"},{"type":"function","title":"Parameters - MscmpSystForms.get_render_configs/5","doc":"* `module` - the name of the `MscmpSystForms` implementing module which\n  backs the form.\n\n  * `feature` - the Form State Feature to reference when building Component\n  Configurations.\n\n  * `mode` - the Form State Mode to reference when building Component\n  Configurations.\n\n  * `state` - the Form State State to reference when building Component\n  Configurations.\n\n  * `perms` - the current user's applicable permission grants for the form.","ref":"MscmpSystForms.html#get_render_configs/5-parameters"},{"type":"function","title":"MscmpSystForms.init_assigns/8","doc":"Initializes the `MscmpSystForms` standard assign attributes and readies the\nform for rendering.\n\nTypically this function is called in the implementation of the\n`c:MscmpSystForms.preconnect_init/6` of the form once the user, the user\npermissions, and any starting data for the form has been resolved.\n\nThis function must be called prior to any attempted rendering of the form as\nmany user interface components expect values in the Standard Assign Attributes\nto be available.\n\nIn addition to adding the Standard Assign Attributes, this function will\nprocess the Form Configurations (`c:MscmpSystForms.get_form_config/0`) using\nthe Form State parameters (`feature`, `mode`, and `state`) and the current\nuser's permissions (`user_perms`)","ref":"MscmpSystForms.html#init_assigns/8"},{"type":"function","title":"Standard Assign Attributes: - MscmpSystForms.init_assigns/8","doc":"* `msrd_instance_id` - the identifier for any single instance of a running\n  form.  This supports the use case where a user logged into a single session\n  may have multiple instances of the same form open accessing the same data,\n  but desiring to also edit that data.  In this case we only allow a single\n  instance of the form to be in an editable mode, blocking all other\n  instances, including other instances in the same session, from editing the\n  data.\n\n  * `msrd_session_name` - the identifier for the user's authenticated session.\n  This session name is a reference to the session record in the database which\n  contains session oriented data and session management statistics such as\n  expiration date/time.  It is by having a valid, authenticated session\n  identified by this value that the system knows that the user is\n  authenticated.\n\n  * `msrd_form_module` - the `MscmpSystForms` behaviour implementing module\n  which backs the form.\n\n  * `msrd_original_data` - the data backing the form at the time the form was\n  initialized.  This data does not change as user interacts with the form,\n  including changing the form's data, allowing for comparisons, validations,\n  and resets of changed data with the starting data.  The original data is a\n  struct as defined by the `MscmpSystForms` backing module where the keys are\n  the binding ID's of the form data fields.  Note that this data includes all\n  form backing data without regard to the current user's data visibility\n  permissions.\n\n  * `msrd_current_data` - the data backing the form including any changes\n  made by the user or by the system in response to various interactions with\n  the form.  As the name suggests this is value represents the current state\n  of the data and is the data that must pass any validation attempts and the\n  data that will ultimately be saved to the database.  This value is\n  represented as a simple map of key/value pairs where the keys are the\n  binding ID's of the form data fields. Note that this data includes all form\n  backing data without regard to the current user's data visibility\n  permissions.\n\n  * `msrd_display_data` - the data used to fill user interface form elements.\n  This data is the same as the `msrd_current_data` except that values which\n  are disallowed by the user data visibility permissions are excluded and the\n  data is represented as a `t:Phoenix.HTML.Form.t/0` value.\n\n  * `msrd_feature` - the currently prevailing form state feature.  The\n  \"feature\" is the highest level determinant of form state, which determines\n  how some form user interface components present themselves or allow for\n  interactivity.  Typical examples of how the `msrd_feature` of a form might\n  be used includes a single form supporting both sales quoting and sales\n  ordering: while very similar there are differences in the functionality and\n  elements required by these two activities and the `msrd_feature` would tell\n  the form which mode was currently in use.  The value is an atom.  See\n  `c:MscmpSystForms.get_form_modes/0` for more information\n\n  * `msrd_mode` - the current mode of the form state.  This is typically used\n  to distinguish between \"view only\" form modes and \"maintenance\" form modes\n  which allow a user to change data.  The actual modes implemented by a form\n  are not restricted to these purposes and may be arbitrarily defined as the\n  form needs dictate. The current `msrd_mode` value is considered a\n  subdivision of the current `msrd_feature` value; this means that the same\n  `msrd_mode` value may appear to behave differently depending on the current\n  value of the `msrd_feature` attribute.  The value is an atom.  See\n  `c:MscmpSystForms.get_form_modes/0` for more information\n\n  * `msrd_state` - the current form state within the `msrd_mode`.  \"Form\n  states\" are the most granular level at which form user interface behaviors\n  are determined.  This value supports functionality which allows for\n  \"progressive entry\" style forms: forms which only allow certain user inputs\n  to be made prior to allowing others which depend on the earlier values, for\n  example.  `msrd_state` values are subordinate to the prevailing `msrd_mode`\n  value and as such the same `msrd_state` value may exhibit different\n  behaviors for differing values of `msrd_mode`.  The value is an atom.  See\n  `c:MscmpSystForms.get_form_modes/0` for more information\n\n  * `msrd_overrides` - a list of the currently active processing overrides.\n  As a user interacts with a form, there may be certain actions which result\n  in longer running processes during which certain user interface interactions\n  or data displays should become inactive or indicate some form of \"please\n  wait\" message; the list of active processing overrides indicate that such\n  processing exists so that user interface elements may respond as necessary.\n  This list is maintained using the\n  `MscmpSystForms.start_processing_override/2` and\n  `MscmpSystForms.finish_processing_override/2` functions.\n\n  * `msrd_user_perms` - The relevant permission grants of the current user.\n  This is a map conforming to the `t:MscmpSystPerms.Types.perm_grants/0` type.\n  The permission grants are used as a filter for determining what the user may\n  see in terms of data and do in terms of form functionality.","ref":"MscmpSystForms.html#init_assigns/8-standard-assign-attributes"},{"type":"function","title":"Parameters - MscmpSystForms.init_assigns/8","doc":"* `socket_or_assigns` - the socket or assigns for the current view.\n\n  * `session_name` - the name of the session.  This value is usually set in\n  prior to the view being called and is part of the parameters passed to the\n  view.  Ultimately this is the link between the users client and our richer\n  sense of session available to the server side view logic.\n\n  * `module` - the name of the form module backing the form and implementing\n  the `MscmpSystForm` behaviour.\n\n  * `feature` - the currently prevailing form state feature.  See the\n  `msrd_feature` Standard Assign Attribute description above for more.\n\n  * `mode` - the currently prevailing form state mode.  See the `msrd_mode`\n  Standard Assign Attribute description above for more.\n\n  * `state` - the currently prevailing form state.  See the `msrd_state`\n  Standard Assign Attribute description above for more.\n\n  * `user_perms` - the current user permission grants which apply to the form.\n  See the `msrd_user_perms` Standard Assign Attributes discussion above for\n  more.\n\n  * `opts` - this function accepts a number of optional parameters.  The\n  available options are:\n\n    * `original_data` - the starting form data, often times as drawn from the\n    database.  The data retained here does not reflect changes in the data by\n    the user interacting with the form.  All data backing the form is kept in\n    this value without regard to the current user's data visibility\n    permissions.  The expected value for this option is the starting data as a\n    struct defined by the form backing `MscmpSystForms` behaviour implementing\n    module.  The default value is an empty struct of the expected type.\n\n    * `current_data` - the current form data reflecting changes made due to\n    user interactions which have not yet been committed to the database.  The\n    data here is the complete current data, without regard to the user's data\n    visibility permissions.  This data given for this parameter is expected to\n    be a simple map based on the form backing `MscmpSystForms` implementing\n    module.  The default value is a map copied from the `original_data` option\n    value.\n\n    * `display_data` - this option will ultimately set the `msrd_display_data`\n    Standard Assign Attribute described above.  For the purposes of\n    `init_assigns/8`, this value should be a reference to a\n    `t:MscmpSystForms.Types.data_validation_types/0` value which will process\n    the data provided by the `original_data` and `current_data` options into\n    the correct display data for the form, after having applied the user's\n    data visibility permissions.\n\n    * `overrides` - this option allows the processing overrides list stored in\n    `msrd_overrides` to be populated on initialization.  This could be helpful\n    if certain initialization processes themselves are expected to be long\n    running.  By default this option is set to an empty list.","ref":"MscmpSystForms.html#init_assigns/8-parameters"},{"type":"callback","title":"MscmpSystForms.postconnect_init/1","doc":"An initialization sequence run during the connected, second call to\n`c:Phoenix.LiveView.mount/3`.\n\nThis function currently doesn't have any specific or well defined \"typical use\ncases\" as does `preconnect_init/6`.\n\nIt is assumed that any required data or configurations were initially set\nusing `preconnect_init/6` and are available in the socket assigns passed to\n`c:Phoenix.LiveView.mount/3`.","ref":"MscmpSystForms.html#c:postconnect_init/1"},{"type":"callback","title":"Parameters - MscmpSystForms.postconnect_init/1","doc":"* `socket_or_assigns` - the socket or assigns for the current view.","ref":"MscmpSystForms.html#c:postconnect_init/1-parameters"},{"type":"callback","title":"MscmpSystForms.preconnect_init/6","doc":"An initialization sequence run during first, static mount process.\n\nThis callback is intended to define a function called in the first, static\n`c:Phoenix.LiveView.mount/3`.  While `c:preconnect_init/6` can encapsulate any\nlogic necessary during this phase of initialization, we would typically see\nthe following activities handled:\n\n   * The capture of socket values passed to `c:Phoenix.LiveView.mount/3`,\n   such as `session_name` in preparation for calling `init_assigns/8`.\n\n   * The resolution of user permissions required by the form.\n\n   * The loading of backing data from the database for the view or maintenance\n   of existing data, or defaulted data in the case of new record creation.\n\n   * Initialization of the Standard Assign Attributes using `init_assigns/8`.\n\nNaturally, while these would be typical activities to perform in\n`c:preconnect_init/6`, they are not required not is this callback limited to\nrunning these functions.  Truly, whatever makes sense for the form to process\nduring this stage of the form life-cycle is acceptable.","ref":"MscmpSystForms.html#c:preconnect_init/6"},{"type":"callback","title":"Parameters - MscmpSystForms.preconnect_init/6","doc":"* `socket_or_assigns` - the socket or assigns for the current view.\n\n  * `session_name` - the name of the session.  This value is usually set in\n  prior to the view being called and is part of the parameters passed to the\n  view.  Ultimately this is the link between the users client and our richer\n  sense of session available to the server side view logic.\n\n  * `feature` - the currently prevailing form state feature.  Typically this\n  value is passed to `init_assigns/8` for further processing.\n\n  * `mode` - the currently prevailing form state mode.  Typically this value\n  is passed to `init_assigns/8` for further processing.\n\n  * `state` - the currently prevailing form state.  Typically this value is\n  passed to `init_assigns/8` for further processing.\n\n  * `opts` - the options which might be used here will depended on the how\n  this callback is implemented for the form.  Since we often call\n  `init_assigns/8` from `c:preconnect_init/6`, the options will simply be the\n  same as those and just passed to `init_assigns/8`.","ref":"MscmpSystForms.html#c:preconnect_init/6-parameters"},{"type":"function","title":"MscmpSystForms.rebuild_component_assigns/1","doc":"Rebuilds component configuration assigns updating the configurations driving\nuser interface rendering.\n\nThis function needs to be called after settings which should alter the\nrenderable Component Configurations.  For example, changing the form's current\nForm State (feature, mode, or state) will change how the user interface\ncomponents are rendered; after the Form State has been changed this function\nmust be called to rebuild the component configuration assigns that actually\ndrive the rendering of those components.\n\nActivities requiring the Component Configurations assigns to be rebuilt\ninclude:\n\n  * Changing the `msrd_feature`, `msrd_mode`, or `msrd_state` Form State\n  values.\n\n  * Updating the `msrd_user_perms` value.\n\nMost other operations, such as processing form data changes don't require\nComponent Configuration rebuilding as they work within the existing\nComponent Configurations.\n\nRebuilding the Component Configuration assigns is a somewhat expensive process\nand to avoid over-processing these rebuilds its recommended that all changes\nwhich require a Component Configuration rebuild be performed prior to calling\n`rebuild_component_assigns/1`.","ref":"MscmpSystForms.html#rebuild_component_assigns/1"},{"type":"function","title":"MscmpSystForms.set_form_state/2","doc":"A convenience function which sets the Form State State value on the\nappropriate Standard Assign Attribute.\n\nThis allows only updating the Form State State value of the form, leaving the\nForm State Feature and Mode values unchanged.\n\nSee `set_form_state/4` for more information and caveats.","ref":"MscmpSystForms.html#set_form_state/2"},{"type":"function","title":"Parameters - MscmpSystForms.set_form_state/2","doc":"* `socket_or_assigns` - the socket or assigns for the current view.\n\n  * `state` - the new Form State State to set for the form.","ref":"MscmpSystForms.html#set_form_state/2-parameters"},{"type":"function","title":"MscmpSystForms.set_form_state/3","doc":"A convenience function which sets the Form State Mode and State values on the\nappropriate Standard Assign Attributes.\n\nThis allows only updating the Form State Mode and State values of the form,\nleaving the Form State Feature value unchanged.\n\nSee `set_form_state/4` for more information and caveats.","ref":"MscmpSystForms.html#set_form_state/3"},{"type":"function","title":"Parameters - MscmpSystForms.set_form_state/3","doc":"* `socket_or_assigns` - the socket or assigns for the current view.\n\n  * `mode` - the new Form State Mode to set for the form.\n\n  * `state` - the new Form State State to set for the form.","ref":"MscmpSystForms.html#set_form_state/3-parameters"},{"type":"function","title":"MscmpSystForms.set_form_state/4","doc":"A convenience function which sets the Form State Feature, Mode, and State\nvalues on the appropriate Standard Assign Attributes.\n\n> #","ref":"MscmpSystForms.html#set_form_state/4"},{"type":"function","title":"Note {: .neutral} - MscmpSystForms.set_form_state/4","doc":">\n> Using this function does not result in the regeneration of Component\n> Configurations.  This is not done to avoid regenerating Component\n> Configurations multiple times unnecessarily.\n>\n> You must explicitly regenerate the Component Configuration for changes made\n> by this function to be rendered correctly.  This is typically done by\n> calling `rebuild_component_assigns/1` some time after this function has\n> been called.\n\nFor more see `MscmpSystForms.init_assigns/8`.","ref":"MscmpSystForms.html#set_form_state/4-note-neutral"},{"type":"function","title":"Parameters - MscmpSystForms.set_form_state/4","doc":"* `socket_or_assigns` - the socket or assigns for the current view.\n\n  * `feature` - the new Form State Feature to set for the form.\n\n  * `mode` - the new Form State Mode to set for the form.\n\n  * `state` - the new Form State State to set for the form.","ref":"MscmpSystForms.html#set_form_state/4-parameters"},{"type":"function","title":"MscmpSystForms.start_processing_override/2","doc":"Adds a processing override to the active overrides list.\n\nSome user interface components are configured to change their presentation and\ninteractivity when certain, possibly long running, processes are underway.\nThis function adds the value of the `override` parameter to the active\nprocesses list allowing components interest in that processing state to\nrespond accordingly.","ref":"MscmpSystForms.html#start_processing_override/2"},{"type":"function","title":"Parameters - MscmpSystForms.start_processing_override/2","doc":"* `socket_or_assigns` - the socket or assigns for the current view.\n\n  * `override` - the name of the processing override to activate.","ref":"MscmpSystForms.html#start_processing_override/2-parameters"},{"type":"function","title":"MscmpSystForms.to_form/3","doc":"Converts a form data Changeset into a `t:Phoenix.HTML.Form.t/0` struct after\nhaving applied the current user's data visibility permissions.\n\nOnce the current form's data has been validated it must be turned into a form\nthat can be rendered.  This function basically wraps the `Phoenix.Ecto`\nimplementation of the `Phoenix.HTML.FormData.to_form/2` function so that we\ncan apply user data visibility permission to the data prior to the conversion\nof that data into a renderable `t:Phoenix.HTML.Form.t/0` struct.","ref":"MscmpSystForms.html#to_form/3"},{"type":"function","title":"Parameters - MscmpSystForms.to_form/3","doc":"* `changeset` - an `t:Ecto.Changeset.t/0` struct representing the validated\n  data with which to build the form.  Typically this Changeset will be\n  generated either by `c:validate_save/2` or `c:validate_post/2`.\n\n  * `perms` - the current user's permission grants as recorded in the Standard\n  Assign Attribute `msrd_user_perms`.  See `init_assigns/8` for more.\n\n  * `opts` - while not typically used, there are optional parameters which are\n  passed to the `Phoenix.HTML.FormData.to_form/2` function.  The available\n  options are documented at `Phoenix.HTML.Form.form_for/4`.  The options here\n  have slightly different names to avoid naming collisions.\n\n    * `component_id` - the same as the `id` option of\n    `Phoenix.HTML.Form.form_for/4`.\n\n    * `component_method` - the same as the `method` option of\n    `Phoenix.HTML.Form.form_for/4`.\n\n    * `component_multipart` - the same as the `multipart` option of\n    `Phoenix.HTML.Form.form_for/4`.\n\n    * `component_csrf_token` - the same as the `csrf_token` option of\n    `Phoenix.HTML.Form.form_for/4`.\n\n    * `component_errors` - the same as the `errors` option of\n    `Phoenix.HTML.Form.form_for/4`.","ref":"MscmpSystForms.html#to_form/3-parameters"},{"type":"function","title":"MscmpSystForms.update_button_state/3","doc":"Sets the state of `MscmpSystForms.WebComponents.msvalidated_button/1`\ncomponents.\n\nValidated buttons exist in one of three states defined by\n`t:MscmpSystForms.Types.msvalidated_button_states/0`.  This function will\nset the state of the validated button identified by the `form_id`\nparameters to the state identified by the `button_state` parameters.","ref":"MscmpSystForms.html#update_button_state/3"},{"type":"function","title":"Parameters - MscmpSystForms.update_button_state/3","doc":"* `socket_or_assigns` - the socket or assigns for the current view.\n\n  * `form_id` - the identifier of the component to update.  See\n  `c:MscmpSystForms.get_form_config/0` for more about form configuration\n  attributes.\n\n  * `button_state` - the state to which the validated button component\n  should be set.  Any value defined by the\n  `t:MscmpSystForms.Types.msvalidated_button_states/0` type is valid for\n  this purpose.","ref":"MscmpSystForms.html#update_button_state/3-parameters"},{"type":"function","title":"MscmpSystForms.update_display_data/3","doc":"Updates the display form data with new values.\n\nThe display data of the form, which represents the form's backing data\nafter the application of effective user permissions to purge values that\nthe user is not entitled to see, is set using this function.  The data is\nstored in the view's assigns as a `t:Phoenix.HTML.Form.t/0` value which is\nthen passed to the view for rendering.","ref":"MscmpSystForms.html#update_display_data/3"},{"type":"function","title":"Parameters - MscmpSystForms.update_display_data/3","doc":"* `socket_or_assigns` - the socket or assigns for the current view.\n\n  * `display_data` - this option contains either the new display data to set\n  and with which to update the form or indicates the kind of data validation\n  to perform on the assigns stored data (`msrd_original_data` &\n  `msrd_current_data`; see `MscmpSystForms.init_assigns/8` for more).\n\n      One method for setting the display data is to pass this option to the\n      function using actual data.  This data can take the form of either a\n      `t:Ecto.Changeset.t/0` value or a `t:Phoenix.HTML.Form.t/0` value. If a\n      Changeset is passed, the function will automatically process it into a\n      `t:Phoenix.HTML.Form.t/0` struct, applying the permissions currently set\n      in the `msrd_user_perms` Standard Assigns Attribute to filter the data.\n      If the value to be passed in this option is a `t:Phoenix.HTML.Form.t/0`\n      value, the struct should have been generated using\n      `MscmpSystForms.to_form/3` so that the user data visibility permissions\n      will have been allied.\n\n      The second method is to pass `display_data` as a value referencing a\n      display data validation type\n      (`t:MscmpSystForms.Types.data_validation_types/0`).  When this method is\n      used, the values of the `msrd_current_data` and `msrd_original_data` are\n      validated using the standard validation functions\n      (`c:MscmpSystForms.validate_save/2` and\n      `c:MscmpSystForms.validate_post/2`) and then processed into a\n      `t:Phoenix.HTML.Form.t/0` value to save as the new `msrd_display_data`\n      value.  Either of the validation types will result in the application of\n      user data visibility permissions per the `msrd_user_perms` Standard\n      Assigns Attribute.\n\n  * `opts` - this function defines some optionally required parameters\n  which are dependent on the `display_data` parameter. When the `display_data`\n  value is passed as a `t:MscmpSystForms.Types.data_validation_types/0`\n  allowed value the following are required:\n\n    * `original_data` - a struct of values representing the starting data\n    initialized on initial form loading and absent any changes the user\n    may have made and not yet committed to the database.  This value\n    should be available in the standard assigns for `MscmpSystForms` based\n    forms.\n\n    * `current_data` - a map of values representing the current data\n    backing the form.  This data is complete (unfiltered by user data\n    related permissions) and includes any edits made by the user and not\n    yet committed to the database.  This value is available in the standard\n    assigns for `MscmpSystForms` based forms.\n\n    * `module` - the name of the form module implementing the\n    `MscmpSystForm` behaviour and the functions to validate the Changeset.","ref":"MscmpSystForms.html#update_display_data/3-parameters"},{"type":"callback","title":"MscmpSystForms.validate_post/2","doc":"An `t:Ecto.Changeset.t/0` generating function which validates that a\ngiven set of data is sufficient for posting as a fully fledged business\ntransaction.\n\nThis function serves to validate that a form's data fully meets the\nrequirements of a complete business transaction.  In cases where\nless-than-ready works in progress should be saveable, the `c:validate_save/2`\nfunction should be called instead.","ref":"MscmpSystForms.html#c:validate_post/2"},{"type":"callback","title":"Parameters - MscmpSystForms.validate_post/2","doc":"* `original_data` - a representation of the starting data using the\n  `MscmpSystForms` implementing struct backing the form.  Setting this value\n  correctly allows the Changeset to correctly identify changes to the data.\n\n  * `current_data` - a map based representation of the current data which is\n  to be validated during the creation of the Changeset.","ref":"MscmpSystForms.html#c:validate_post/2-parameters"},{"type":"callback","title":"MscmpSystForms.validate_save/2","doc":"An `t:Ecto.Changeset.t/0` generating function which validates that a\ngiven set of data is sufficient for simply saving to the database.\n\nIn many cases in business applications, it is possible to save \"work in\nprogress\" to the database without needing to post a fully committed business\ntransaction.  For example, a purchase order may be authored over the course of\na few days before it is final and ready to send to the vendor; in this case\nwe could validate just enough data to make the in-progress purchase order\ndistinguishable from other similar orders while not requiring a fully\nexecutable order and thus allow the author to save their work to the database.\nLater, a transaction ready to be committed in the business sense (\"posting\")\ncan call `c:validate_post/2` to validate that the transaction may be posted as\na valid business transaction.\n\nOften times there is no distinction between the \"savable\" and \"postable\"\nstate.  In these cases, it's best to write the main validate logic in the\n`c:validate_post/2` function and simply delegate this function to that one;\nraising an exception in this function is also an option to force the correct\ncall.","ref":"MscmpSystForms.html#c:validate_save/2"},{"type":"callback","title":"Parameters - MscmpSystForms.validate_save/2","doc":"* `original_data` - a representation of the starting data using the\n  `MscmpSystForms` implementing struct backing the form.  Setting this value\n  correctly allows the Changeset to correctly identify changes to the data.\n\n  * `current_data` - a map based representation of the current data which is\n  to be validated during the creation of the Changeset.","ref":"MscmpSystForms.html#c:validate_save/2-parameters"},{"type":"module","title":"MscmpSystForms.WebComponents","doc":"A set of web components which define the standard application user interface\n\"widgets\" from which the application is built.","ref":"MscmpSystForms.WebComponents.html"},{"type":"function","title":"MscmpSystForms.WebComponents.msbutton/1","doc":"Displays a simple button with which the user may interact.","ref":"MscmpSystForms.WebComponents.html#msbutton/1"},{"type":"function","title":"MscmpSystForms.WebComponents.mscontainer/1","doc":"A generalized container component which provides layouts for and contains\nother user interface elements.","ref":"MscmpSystForms.WebComponents.html#mscontainer/1"},{"type":"function","title":"MscmpSystForms.WebComponents.msdisplay/1","doc":"A specialized container component for containing extended text.","ref":"MscmpSystForms.WebComponents.html#msdisplay/1"},{"type":"function","title":"MscmpSystForms.WebComponents.msfield_errors/1","doc":"A utility component which displays an exclamation mark in a circle in the\npresence of errors.","ref":"MscmpSystForms.WebComponents.html#msfield_errors/1"},{"type":"function","title":"MscmpSystForms.WebComponents.msform/1","doc":"A specialized container which defines an HTML form.","ref":"MscmpSystForms.WebComponents.html#msform/1"},{"type":"function","title":"MscmpSystForms.WebComponents.msicon/1","doc":"A small utility component which gives regularized access to \"Heroicons\".","ref":"MscmpSystForms.WebComponents.html#msicon/1"},{"type":"function","title":"MscmpSystForms.WebComponents.msinfo/1","doc":"A component which provides the capability to include short reference\ndocumentation in a form.","ref":"MscmpSystForms.WebComponents.html#msinfo/1"},{"type":"function","title":"MscmpSystForms.WebComponents.msinput/1","doc":"A component which accepts a wide range of textually oriented user input.","ref":"MscmpSystForms.WebComponents.html#msinput/1"},{"type":"function","title":"MscmpSystForms.WebComponents.mslist/1","doc":"A component which defines a list of entries or other components.","ref":"MscmpSystForms.WebComponents.html#mslist/1"},{"type":"function","title":"MscmpSystForms.WebComponents.mslistitem/1","doc":"Creates an list entry within an established `mslist/1`.","ref":"MscmpSystForms.WebComponents.html#mslistitem/1"},{"type":"function","title":"MscmpSystForms.WebComponents.msmodal/1","doc":"Generates a modal window.","ref":"MscmpSystForms.WebComponents.html#msmodal/1"},{"type":"function","title":"MscmpSystForms.WebComponents.mssection/1","doc":"A container component which typically encapsulates its contents with a border\nand provides the section a label.","ref":"MscmpSystForms.WebComponents.html#mssection/1"},{"type":"function","title":"MscmpSystForms.WebComponents.msvalidated_button/1","doc":"Provides a three state button where the state is meant to be determined by\nsome external condition, such as a form validation.","ref":"MscmpSystForms.WebComponents.html#msvalidated_button/1"},{"type":"module","title":"MscmpSystForms.Types","doc":"Defines the data types, formats, and structures used by `MscmpSysForms`\nmodule.","ref":"MscmpSystForms.Types.html"},{"type":"type","title":"MscmpSystForms.Types.binding_id/0","doc":"The identifier type for data binding identifiers.\n\nData binding identifiers are used to identify data fields in `Ecto`\nChangesets, `t:Phoenix.HTML.form.t/0` representations of data, form parameters\nas returned on submission, and in `t:MscmpSystForms.Types.FormConfig.t/0`\nform configurations.  All of these representations which are used in different\ncontexts will represent the same data and this `binding_id` is the name which\nidentifies the data across these logical contexts.","ref":"MscmpSystForms.Types.html#t:binding_id/0"},{"type":"type","title":"MscmpSystForms.Types.component_modes/0","doc":"Component level modes which govern the behavior of components in terms of\ninteractivity, whether or not they may display data, and even if the component\nis visible to users or present in the layout.\n\nEach component is designed to respond appropriately when one of the following\ncomponent modes are specified.\n\n  * `:removed` - A component in this mode will not be visible and will not\n  take space in the layout of a view.\n\n  * `:hidden` - When a component is in this mode, the component is hidden fro\n  the user, but will take space in the layout of the view as though it were\n  present.\n\n  * `:cleared` - The cleared component mode allows components to be rendered\n  into the layout, but input related components will not display any of their\n  associated data and will be disabled for any user interactivity.  This is\n  used primarily when the user may know that a given field exists, but does\n  not have permission to view the data associated with the field.\n\n  * `:processing` - Used when some long running application process involving\n  the data of the form or component has started, but not yet finished.  A\n  component in processing mode will be disabled from user interaction and will\n  likely change its display characteristics as appropriate for the processing\n  state.\n\n  * `:visible` - For use when a component should be present and visible on the\n  screen and any associated data should be visible to the user, but the\n  component should not accept user interactions.  Informally speaking this is\n  the mode which enables a \"view only\" presentation of a component.\n\n  * `:entry` - This component mode allows the component and its associated\n  data to be visible to the user as well as allows the user to interact with\n  any functionality, such as changing the data value or clicking a button,\n  etc.  Informally speaking this is the \"edit mode\" component mode.","ref":"MscmpSystForms.Types.html#t:component_modes/0"},{"type":"type","title":"MscmpSystForms.Types.data_validation_types/0","doc":"Defines the acceptable validation type values that can be passed in the\n`display_data` parameter of `MscmpSystForms.init_assigns/8` and\n`MscmpSystForms.update_display_data/3`.","ref":"MscmpSystForms.Types.html#t:data_validation_types/0"},{"type":"type","title":"MscmpSystForms.Types.display_modes/0","doc":"A standardized set of modes which govern the styling of MscmpSystForms defined\nweb components.\n\n* `:deemphasis` - Used in cases where we want to specific reduce attention to\na give element.  For example `:deemphasis` might be used in cases where a web\ncomponent is disabled for entry.  The reduction in \"presence\" is the greatest\ncompared amongst all display modes which reduce visual presence.\n\n* `:reference` - For reducing attention to informational content as compared\nto actionable elements such as input fields and their labels.  In this case\nwe want a visually \"present\" element, but not one so visually pronounced that\nis distracts from more important elements.\n\n* `:normal` - This display mode is the primary choice of normal input\ncomponents as well as their labels.  This is true when the elements are active\nand actionable, but require no greater attention that most other elements with\nwith they are displayed.\n\n* `:emphasis` - Used for elements which are active and are of greater\nimportance or require more pronounced attention than other elements of the\nsame class.  For example, a required input field and its label may be given\nthis display mode so they stand out from all other entry fields.  Use of this\ndisplay mode should be carefully considered as if everything is emphasized\nthen nothing is.\n\n* `:warning` - Elements which are in a warning state and where the warning\nstate requires greater attention than normal screen elements.  This display\nmode will typically change various colored elements to the established warning\ncolor.\n\n* `:alert` - When elements in the interface require heightened attention and\nare either in an error state or in conditions where greater attention than a\nwarning is required.  Colored elements will typically assume the established\nalert color when this display mode is set.\n\n* `:approve` - A normal attention display mode where colored elements will\nassume the established approval colors.\n\n* `:deny` - A normal attention display mode where colored elements will assume\nthe established denial colors.\n\n* `:info` - A normal attention display mode where colored elements will assume\nthe established \"information\" color scheme.","ref":"MscmpSystForms.Types.html#t:display_modes/0"},{"type":"type","title":"MscmpSystForms.Types.form_id/0","doc":"Defines a type for identifying specific elements in user interface forms.\n\nUnder some form processing functions, particularly those dealing with creating\nweb user interfaces, `form_id` values may be converted to `t:binary/0`\nrepresentations as they are also used for HTML element `id` attributes (either\ndirectly or as modified to identify sub-elements of user interface\ncomponents.)","ref":"MscmpSystForms.Types.html#t:form_id/0"},{"type":"type","title":"MscmpSystForms.Types.form_state_components/0","doc":"The structure of data representing Components and their display modes within\n`t:form_state_states/0` structured data.","ref":"MscmpSystForms.Types.html#t:form_state_components/0"},{"type":"type","title":"MscmpSystForms.Types.form_state_feature_name/0","doc":"Defines the type used to express Form State Feature names.","ref":"MscmpSystForms.Types.html#t:form_state_feature_name/0"},{"type":"type","title":"MscmpSystForms.Types.form_state_features/0","doc":"The expressed data structure of Form State Feature configurations.\n\nEach Form State Feature defines several different points of configuration.\n\nFirst a `:default` set of component configurations which act as a fallback\nwhen a specific Mode/State combination do not fully address a component's\nconfiguration themselves.  When the `:default` component configuration also\ndoesn't address a component, the\n`t:MscmpSystForms.Types.ComponentDisplayModes.t/0` of last resort is used\n(currently:\n`%MscmpSystForms.Types.ComponentDisplayModes{component_mode: :cleared}`).\n\nNext we define the `:processing_overrides` that each component should respond\nto when active.\n\nFinally we define the Modes and States for each named Feature.  We expect that\neach Mode will be represented with a key in this map using the Mode's name;\nthe value will be a map in the form dictated by `t:form_state_modes/0`.\n\nSee `c:MscmpSystForms.get_form_modes/0` for more.","ref":"MscmpSystForms.Types.html#t:form_state_features/0"},{"type":"type","title":"MscmpSystForms.Types.form_state_mode_name/0","doc":"Defines the type used to express Form State Mode names.","ref":"MscmpSystForms.Types.html#t:form_state_mode_name/0"},{"type":"type","title":"MscmpSystForms.Types.form_state_modes/0","doc":"The structure defining how Form State Modes are expressed within the Form\nState defined by `t:form_states/0`.\n\nEach Form State Mode definition returned by `c:MscmpSystForms.get_form_modes/0`\nshould be a map of key/value pairs where the key is the Form State Mode Name\nand the values are each a map of the defined Form State States for that Mode.\n\nSee `c:MscmpSystForms.get_form_modes/0` for more.","ref":"MscmpSystForms.Types.html#t:form_state_modes/0"},{"type":"type","title":"MscmpSystForms.Types.form_state_overrides/0","doc":"Defines how Components are linked to the Processing Overrides to which they\nare interested in responding.\n\nProcessing overrides are a mechanism to identify that certain processes that\nare expected to be long running are active.  Components in turn can respond to\nthe processes they are watching becoming active as they require (usually\nthe component becomes inactive while the process is active).","ref":"MscmpSystForms.Types.html#t:form_state_overrides/0"},{"type":"type","title":"MscmpSystForms.Types.form_state_state_name/0","doc":"The type which is used to represent the name of Form State states.","ref":"MscmpSystForms.Types.html#t:form_state_state_name/0"},{"type":"type","title":"MscmpSystForms.Types.form_state_states/0","doc":"The structure of each individual Form State as defined within the\n`t:form_states/0`.\n\nForm State State definitions returned by `c:MscmpSystForms.get_form_modes/0`\nare expected to come as a map of key/value pairs where the key is the name of\nthe Form State State being defined (`t:form_state_state_name/0`) and the\nvalue is a map of components which define their display modes for the State.\n\nSee `c:MscmpSystForms.get_form_modes/0` for more.","ref":"MscmpSystForms.Types.html#t:form_state_states/0"},{"type":"type","title":"MscmpSystForms.Types.form_states/0","doc":"The data structure describing the configuration of Form States as returned by\n`c:MscmpSystForms.get_form_modes/0`.\n\nForm State configurations are returned as a map of \"Features\" where each\nFeature defines its Modes, States, Defaults, and Processing Overrides.\n\nEach Feature in the Form State is represented in the map using its own name as\nthe key.  The common practice is that if a form only supports a single\nFeature, the Feature should be named `:default`; otherwise the Feature Name\nis arbitrary, but should be descriptive.","ref":"MscmpSystForms.Types.html#t:form_states/0"},{"type":"type","title":"MscmpSystForms.Types.msvalidated_button_states/0","doc":"Identifies the available states that an\n`MscmpSystForms.WebComponents.msvalidated_button/1` might take.\n\n  * `:action` - this state indicates that the validating conditions have been\n  met and that the button's action may be invoked at user convenience.\n\n  * `:processing` - indicates that an active process which prevents the button\n  from correctly reflecting any state other than it is waiting is currently\n  underway.  The button will not accept user interaction at this point.\n\n  * `:message` - indicates that the validating condition for the button is not\n  yet satisfied.  Any user interaction with the button (clicking it) will\n  result in a message indicating that there are unmet conditions.","ref":"MscmpSystForms.Types.html#t:msvalidated_button_states/0"},{"type":"type","title":"MscmpSystForms.Types.permission_name/0","doc":"A type for naming permissions.\n\nForms in the system will at a display level need to have awareness and\nfunctionality to respect permissions.","ref":"MscmpSystForms.Types.html#t:permission_name/0"},{"type":"type","title":"MscmpSystForms.Types.processing_override_name/0","doc":"Defines the type of Processing Override Names.\n\nProcessing overrides are a mechanism to identify that certain processes that\nare expected to be long running are active.  Components in turn can respond to\nthe processes they are watching becoming active as they require (usually\nthe component becomes inactive while the process is active).","ref":"MscmpSystForms.Types.html#t:processing_override_name/0"},{"type":"type","title":"MscmpSystForms.Types.render_configs/0","doc":"Establishes the expected data structure of the\n`MscmpSystForms.get_render_configs/5` function return value.\n\nThe `MscmpSystForms.get_render_configs/5` function returns the currently\nrenderable configurations for each Component as a map of key/value pairs where\nthe key is the `t:form_id()` of the Component and the value is a Component\nConfiguration using the `t:MscmpSystForms.Types.ComponentConfig.t/0` data\nstructure.","ref":"MscmpSystForms.Types.html#t:render_configs/0"},{"type":"type","title":"MscmpSystForms.Types.session_name/0","doc":"Defines the type of the Session Name.\n\nThe Session Name is usually generated via in the router's authentication\nrelated plug pipelines.  The Session Name is added to the user's browser\nsession and becomes the link between that browser session and the extended\nsession information stored server side in the database.","ref":"MscmpSystForms.Types.html#t:session_name/0"},{"type":"type","title":"MscmpSystForms.Types.socket_or_assigns/0","doc":"A definition of the expected Socket or Assigns parameter used in Phoenix.\n\nThe Phoenix Framework has a number of functions which accept Sockets and\nAssigns from different sources which Phoenix generates, but Phoenix doesn't\nformalize this into any sort of typespec.  Our concept is the same as Phoenix\nexcept that we prefer to have documented types, even if they are limited\ntest/compile/run time value.","ref":"MscmpSystForms.Types.html#t:socket_or_assigns/0"},{"type":"module","title":"MscmpSystForms.Types.ComponentConfig","doc":"Defines the rendering configurations used by components at runtime.\n\nThe `MscmpSystForms.get_render_configs/5` function returns\na full form aggregate render configuration which is a combination of the\ndeveloper created `t:MscmpSystForms.Types.FormConfig.t/0` values and various\nvalues determined at runtime such as the current form state, active\nprocessing overrides, and current user permissions.\n\nThis would be called a \"Render Time\" concern/derived configuration.\n\nThe ComponentConfig values created by `MscmpSystForms.get_render_configs/5`\njust described are passed to the view where each Web Component will respond to\nits ComponentConfig value in order to meet the then prevailing view\nrequirements.\n\n> #","ref":"MscmpSystForms.Types.ComponentConfig.html"},{"type":"module","title":"Note {: .info} - MscmpSystForms.Types.ComponentConfig","doc":"> This struct will not typically be created or used directly by a developer\n> creating user forms.  In this sense this struct could be considered an\n> internal implementation concern which shouldn't be part of the public\n> documentation.  However, developers creating components which need to\n> participate in `MscmpSystForms` form processing will need to know how to\n> make their components respond to `ComponentConfig` values so we do include\n> it in the documentation here.","ref":"MscmpSystForms.Types.ComponentConfig.html#module-note-info"},{"type":"type","title":"MscmpSystForms.Types.ComponentConfig.t/0","doc":"Defines the rendering configurations used by components at runtime.","ref":"MscmpSystForms.Types.ComponentConfig.html#t:t/0"},{"type":"type","title":"Attributes - MscmpSystForms.Types.ComponentConfig.t/0","doc":"* `form_id` - identifies the user interface form element to which the\n  component configuration will be applied.  Note that whereas\n  `t:MscmpSystForms.Types.FormConfig.t/0` allows configurations of virtual or\n  abstract components, these configurations will never appear as a\n  `t:MscmpSystForms.Types.ComponentConfig.t/0` value.  Only concrete\n  components with a `form_id` value are allowed to represented by component\n  configurations.\n\n  * `binding_id` - for user interface elements which display application data\n  to identify the data field from which to draw values using this identifier.\n  If the `binding_id` is `nil` then the element will not be bound to a field\n  in the form's backing data.\n\n  * `permission` - the identifier of the permission which determined may have\n  changed the `modes` value which control element rendering.  This value will\n  either be the permission set explicitly for field or that which the element\n  inherited through its `MscmpSystForms.Types.FormConfig` parent.  This value\n  may also be `nil` in which case permissions didn't influence the `modes`\n  value because no permissions were defined to apply.\n\n  * `label` - if set, this value will determine the label text for any Web\n  Component which can display a label, such as\n  `MscmpSystForms.WebComponents.msinput/1`.  If the component's `title`\n  attribute is set directly in the view, it will override any value here.\n\n  * `label_link` - the label of a user interface element may optionally define\n  a URL to link to when clicking the label, such as a link to relevant\n  documentation.  When this value is not `nil`, the link is the URL to the\n  resource to access; when `nil` the label is rendered without a link.\n  (*Note that `label_link` is not yet implemented in most components.*)\n\n  * `info` - in some situations, abbreviated additional information for a\n  user interface element is made available to the user, for example via the\n  `MscmpSystForms.WebComponent.msinfo/1` web component.  This attribute\n  configures the text that is displayed to the user in these scenarios.  If\n  the value is `nil` then no text is displayed even if it could be.\n\n  * `button_state` - if the component being configured by this value is a\n  `MscmpSystForms.WebComponents.msvalidated_button/1` component, the\n  `button_state` value will indicate the current display state of the button.\n  See `t:MscmpSystForms.Types.msvalidated_button_states/0` for the available\n  states.\n\n  * `overrides` - a list of currently active processing overrides. A process\n  override is a state which can be set for the form which simply indicates\n  that some possibly long running application operation has been started, but\n  is not yet finished.  See `MscmpSystForms.start_processing_override/2` for\n  more about processing overrides.  The form and its components can respond to\n  an active processing override by, for example, changing their display and\n  interactivity characteristics until the processing override condition ends.\n  If there are no processing overrides active, this value will be an empty\n  list.\n\n  * `modes` - the currently computed display modes for the component.  The\n  display modes are computed by assessing the prevailing runtime form state\n  and user permissions to determine the behavior of the component at render\n  time.  These modes are then used by the component when creating the view\n  to render.\n\nSee `MscmpSystForms.Types.ComponentConfig` for more.","ref":"MscmpSystForms.Types.ComponentConfig.html#t:t/0-attributes"},{"type":"module","title":"MscmpSystForms.Types.FormConfig","doc":"A struct used by developers to define the abstract structure and configuration\ndetails of user interface forms and their elements including their\npermissions, data bindings, text strings, as well as their child elements\nwhich may inherit certain properties such as permissions.\n\nThis would be called a \"Definition Time\" concern/configuration.\n\nNote that while it is most typical for form configurations to be associated\ndirectly with specific user interface elements, the configuration system\nallows for grouping form configuration entries which do not related directly a\nspecific user interface element and exist purely to serve as parent to other\nform configurations so that those children can inherit the parent's\nproperties.  A common example of this is most forms define an abstract top\nlevel parent form configuration which defines the default permission for all\nother form elements to inherit from.\n\nNot all elements on a form must be represented by a `FormConfig` value,\nhowever any element which must respond to runtime changes in form state,\nprocessing overrides, or current user permissions must have at least a\n`FormConfig` value defining its `form_id` value.","ref":"MscmpSystForms.Types.FormConfig.html"},{"type":"type","title":"MscmpSystForms.Types.FormConfig.t/0","doc":"A struct used by developers to define the abstract structure and configuration\ndetails of user interface forms and their elements including their\npermissions, data bindings, text strings, as well as their child elements\nwhich may inherit certain properties such as permissions.","ref":"MscmpSystForms.Types.FormConfig.html#t:t/0"},{"type":"type","title":"Attributes - MscmpSystForms.Types.FormConfig.t/0","doc":"* `form_id` - identifies the user interface form element to which the\n  configuration will be applied.  If this value is `nil` then the\n  configuration won't refer to specific element in the user interface, but is\n  a virtual or abstract configuration which may serve as parent to other\n  concrete element backing configurations.  Note that elements with\n  `FormConfigs` defined with `nil` `form_id` values will not appear at all in\n  render configurations.\n\n  * `binding_id` - for user interface elements which display application data\n  to identify the data field from which to draw values using this identifier.\n  If the `binding_id` is `nil` then the element will not be bound to a field\n  in the form's backing data.\n\n  * `permission` - the identifier of the permission which this form element\n  will test for element access when rendering the form, displaying data, and\n  permitting user interaction if the element being configured allows for\n  interaction.  This value will be inherited by any child of a configuration\n  that doesn't specify its own permission value.\n\n  * `label` - if the user interface element is backed by a component which\n  displays a label, such as an `MscmpSystForms.WebComponents.msinput/1`\n  component, the text of the label may be set using this value.  If this value\n  is `nil` either the label will be blank, not rendered, or determined by\n  directly setting the component's `title` value directly in the view layer.\n  Note that component's `title` attribute can override the value set in the\n  configuration using this configuration.\n\n  * `label_link` - the label of a user interface element may optionally define\n  a URL to link to when clicking the label, such as a link to relevant\n  documentation.  When this value is not `nil`, the link is the URL to the\n  resource to access; when `nil` the label is rendered without a link.\n  (*Note that `label_link` is not yet implemented in most components.*)\n\n  * `info` - in some situations, abbreviated additional information for a\n  user interface element is made available to the user, for example via the\n  `MscmpSystForms.WebComponent.msinfo/1` web component.  This attribute\n  configures the text that is displayed to the user in these scenarios.  If\n  the value is `nil` then no text is displayed even if it could be.\n\n  * `button_state` - for user interface buttons of type\n  `MscmpSystForms.WebComponents.msvalidated_button/1`, this attribute\n  configures the default button state.  The available values are defined by\n  the type `t:MscmpSystForms.Types.msvalidated_button_states/0`.\n\n  * `children` - A form configuration may optionally identify child\n  configurations which will inherit certain attributes and other traits from\n  the parent.  Naturally, an element should never be added as a child to\n  multiple parent configurations; doing so will result in undefined behaviors.\n  Examples of attributes and traits that can be inherited through parent/child\n  relationships defined in this field include permissions and component modes.\n\nForm more see `MscmpSystForms.Types.FormConfig`.","ref":"MscmpSystForms.Types.FormConfig.html#t:t/0-attributes"}],"content_type":"text/markdown"}