searchData={"items":[{"type":"module","title":"MscmpSystUtils","doc":"# MscmpSystUtils - General Implementation Utilities\n\nCommon utility functions generally useful across components.","ref":"MscmpSystUtils.html"},{"type":"function","title":"MscmpSystUtils.get_random_string/2","doc":"Generates a random string drawn from a specified list of characters.","ref":"MscmpSystUtils.html#get_random_string/2"},{"type":"function","title":"Parameters - MscmpSystUtils.get_random_string/2","doc":"* `string_length` - the number of characters in the returned string.\n\n  * `tokens` - this optional parameter may either be a `charlist()` including\n  the desired characters from which to randomly select characters for the\n  string or the parameter may be an atom which designates a predefined\n  character list.  The available predefined character lists are:\n\n    * `:alphanum` - will return values from the set\n    `0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ`.  This is the default value.\n\n    * `:mixed_alphanum` - will return values from the set\n    `0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`\n\n    * `b32e` - will return values from the set\n    `0123456789ABCDEFGHIJKLMNOPQRSTUV`.  This equates to the character set\n    used by Elixir's `Integer.to_string(x, 32)`.\n\n    * `b32c` - will return values from the set\n    `0123456789ABCDEFGHJKMNPQRSTVWXYZ`.  This is the Base32 character set\n    compatible with Douglas Crockford's Base 32 (https://www.crockford.com/base32.html).","ref":"MscmpSystUtils.html#get_random_string/2-parameters"},{"type":"function","title":"MscmpSystUtils.resolve_options/2","doc":"Resolves function options provided as a Keyword List to either the value\nprovided or a default from a Keyword List of default values.\n\nIn many cases, we want to have optional functional parameters.  This small\nfunction will merge the user given options with a preset defined list of\noption defaults, always preferring the user given options.\n\nNote that for keys in the `opts_given` argument that have `nil` values, the\ndefault value of the argument is used instead; the default value may itself\nmay be `nil`, but one should be aware that `nil` is not always respected as a\ngiven value.\n\nThe result is a Keyword List of the merged lists.","ref":"MscmpSystUtils.html#resolve_options/2"},{"type":"function","title":"Parameters - MscmpSystUtils.resolve_options/2","doc":"* `opts_given` - a Keyword List of options provided by the caller.  This\n  list may include all options, any subset of options, be an empty list, or be\n  nil.\n\n  * `opts_default` - a Keyword List of options with their default values. This\n  list defines the expected optional values and their default value should the\n  user not provide a value.","ref":"MscmpSystUtils.html#resolve_options/2-parameters"},{"type":"function","title":"Examples - MscmpSystUtils.resolve_options/2","doc":"iex> given_options = [test_value_one: 1]\n    iex> default_options = [test_value_one: 0, test_value_two: 2]\n    iex> MscmpSystUtils.resolve_options(given_options, default_options)\n    [test_value_one: 1, test_value_two: 2]","ref":"MscmpSystUtils.html#resolve_options/2-examples"}],"content_type":"text/markdown"}