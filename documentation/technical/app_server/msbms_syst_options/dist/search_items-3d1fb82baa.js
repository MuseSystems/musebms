searchNodes=[{"doc":"API for retrieving and working with option files stored in the application server file system.","ref":"MsbmsSystOptions.html","title":"MsbmsSystOptions","type":"module"},{"doc":"Returns the database server definition which corresponds to the provided name. Parameters options - the options file data as read by get_options/1 . dbserver_name - the name of the database server to look up. Examples Typical call for database server: iex&gt; config_options = MsbmsSystOptions . get_options! ( &quot;./testing_options.toml&quot; ) iex&gt; MsbmsSystOptions . get_dbserver_by_name ( config_options , &quot;instance_db&quot; ) %{ db_host : &quot;127.0.0.1&quot; , db_max_instances : 30 , db_port : 5432 , db_show_sensitive : true , dbadmin_password : &quot;default.msbms.privileged.password&quot; , dbadmin_pool_size : 1 , server_name : &quot;instance_db&quot; , server_salt : &quot;w1OfRx630x7svid8Tk3L9rLL1eEGSm0fq8XcLdveuSs=&quot; , start_server_instances : true , server_pools : [ &quot;primary&quot; , &quot;linked&quot; , &quot;demo&quot; , &quot;reserved&quot; ] } Result in case of bad server name: iex&gt; config_options = MsbmsSystOptions . get_options! ( &quot;./testing_options.toml&quot; ) iex&gt; MsbmsSystOptions . get_dbserver_by_name ( config_options , &quot;non_existent_db&quot; ) nil","ref":"MsbmsSystOptions.html#get_dbserver_by_name/2","title":"MsbmsSystOptions.get_dbserver_by_name/2","type":"function"},{"doc":"Returns the MsbmsSystDatastore.Types.db_server/0 data for the database server designated as hosting the global database. Parameters options - the options file data as read by get_options/1 . Examples iex&gt; config_options = MsbmsSystOptions . get_options! ( &quot;./testing_options.toml&quot; ) iex&gt; %{ server_name : &quot;global_db&quot; } = MsbmsSystOptions . get_global_dbserver ( config_options )","ref":"MsbmsSystOptions.html#get_global_dbserver/1","title":"MsbmsSystOptions.get_global_dbserver/1","type":"function"},{"doc":"Returns the name of the database server which hosts the global database. Parameters options - the options file data as read by get_options/1 . Examples iex&gt; config_options = MsbmsSystOptions . get_options! ( &quot;./testing_options.toml&quot; ) iex&gt; MsbmsSystOptions . get_global_dbserver_name ( config_options ) &quot;global_db&quot;","ref":"MsbmsSystOptions.html#get_global_dbserver_name/1","title":"MsbmsSystOptions.get_global_dbserver_name/1","type":"function"},{"doc":"Returns the configured global server &quot;pepper&quot; value for use in some automatic account creation scenarios. Note While this is the way the system is built today, the suspicion is that the approach we're currently taking with automatic account creation is better than no effort for security, but probably not by much. In other words, this is not an example for how to build a robust security system, but should do until there's actual public deployment of the application. Parameters options - the options file data as read by get_options/1 . Examples iex&gt; config_options = MsbmsSystOptions . get_options! ( &quot;./testing_options.toml&quot; ) iex&gt; MsbmsSystOptions . get_global_pepper_value ( config_options ) &quot;jTtEdXRExP5YXHeARQ1W66lP6wDc9GyOvhFPvwnHhtc=&quot;","ref":"MsbmsSystOptions.html#get_global_pepper_value/1","title":"MsbmsSystOptions.get_global_pepper_value/1","type":"function"},{"doc":"Parses and returns the contents of a TOML file at options_file_path or raises. The returned options will be in a map equivalent to the TOML file's structure. Examples Typical call and return: iex&gt; MsbmsSystOptions . get_options! ( &quot;./testing_options.toml&quot; ) %{ dbserver : [ %{ db_host : &quot;127.0.0.1&quot; , db_max_instances : 0 , db_port : 5432 , db_show_sensitive : true , dbadmin_password : &quot;default.msbms.privileged.password&quot; , dbadmin_pool_size : 1 , server_name : &quot;global_db&quot; , server_salt : &quot;sklMRkLXzMQgzqpMpJZPk31Js88su39U/mooAXALhj0=&quot; , start_server_instances : false , server_pools : [ ] } , %{ db_host : &quot;127.0.0.1&quot; , db_max_instances : 30 , db_port : 5432 , db_show_sensitive : true , dbadmin_password : &quot;default.msbms.privileged.password&quot; , dbadmin_pool_size : 1 , server_name : &quot;instance_db&quot; , server_salt : &quot;w1OfRx630x7svid8Tk3L9rLL1eEGSm0fq8XcLdveuSs=&quot; , start_server_instances : true , server_pools : [ &quot;primary&quot; , &quot;linked&quot; , &quot;demo&quot; , &quot;reserved&quot; ] } ] , available_server_pools : [ &quot;primary&quot; , &quot;linked&quot; , &quot;demo&quot; , &quot;reserved&quot; ] , global_dbserver_name : &quot;global_db&quot; , global_pepper_value : &quot;jTtEdXRExP5YXHeARQ1W66lP6wDc9GyOvhFPvwnHhtc=&quot; } Called with bad parameters: iex&gt; MsbmsSystOptions . get_options! ( &quot;./bad_file_name.toml&quot; ) ** (MsbmsSystError) Problem reading options file &#39;./bad_file_name.toml&#39;.","ref":"MsbmsSystOptions.html#get_options!/1","title":"MsbmsSystOptions.get_options!/1","type":"function"},{"doc":"Parses and returns the contents of a TOML file at options_file_path via a result tuple. If successful a tuple with a first value of :ok and second value containing a map of the options is returned. When errors are found, a tuple with a first value of :error and second value of the relevant MsbmsSystError exception is returned. Parameters options_file_path - describes where to find the options file in the file system. Examples Typical call and return: iex&gt; MsbmsSystOptions . get_options ( &quot;./testing_options.toml&quot; ) { :ok , %{ dbserver : [ %{ db_host : &quot;127.0.0.1&quot; , db_max_instances : 0 , db_port : 5432 , db_show_sensitive : true , dbadmin_password : &quot;default.msbms.privileged.password&quot; , dbadmin_pool_size : 1 , server_name : &quot;global_db&quot; , server_salt : &quot;sklMRkLXzMQgzqpMpJZPk31Js88su39U/mooAXALhj0=&quot; , start_server_instances : false , server_pools : [ ] } , %{ db_host : &quot;127.0.0.1&quot; , db_max_instances : 30 , db_port : 5432 , db_show_sensitive : true , dbadmin_password : &quot;default.msbms.privileged.password&quot; , dbadmin_pool_size : 1 , server_name : &quot;instance_db&quot; , server_salt : &quot;w1OfRx630x7svid8Tk3L9rLL1eEGSm0fq8XcLdveuSs=&quot; , start_server_instances : true , server_pools : [ &quot;primary&quot; , &quot;linked&quot; , &quot;demo&quot; , &quot;reserved&quot; ] } ] , available_server_pools : [ &quot;primary&quot; , &quot;linked&quot; , &quot;demo&quot; , &quot;reserved&quot; ] , global_dbserver_name : &quot;global_db&quot; , global_pepper_value : &quot;jTtEdXRExP5YXHeARQ1W66lP6wDc9GyOvhFPvwnHhtc=&quot; } } Called with bad parameters: iex&gt; { :error , % MsbmsSystError { } } = ...&gt; MsbmsSystOptions . get_options ( &quot;./bad_file_name.toml&quot; )","ref":"MsbmsSystOptions.html#get_options/1","title":"MsbmsSystOptions.get_options/1","type":"function"},{"doc":"Returns the list of available server pools configured in the options file. Parameters options - the options file data as read by get_options/1 . Examples iex&gt; config_options = MsbmsSystOptions . get_options! ( &quot;./testing_options.toml&quot; ) iex&gt; MsbmsSystOptions . list_available_server_pools ( config_options ) [ &quot;primary&quot; , &quot;linked&quot; , &quot;demo&quot; , &quot;reserved&quot; ]","ref":"MsbmsSystOptions.html#list_available_server_pools/1","title":"MsbmsSystOptions.list_available_server_pools/1","type":"function"},{"doc":"Extracts the list of configured dbservers in the options file, optionally filtered by the server's supported instance classes. Parameters options - the options file data as read by get_options/1 . filters - a list one or more instance class values with with to filter the database servers list. The valid instance classes are: &quot;primary&quot;, &quot;linked&quot;, &quot;demo&quot;, and &quot;reserved&quot;. An empty list of filter values returns all database servers, including those that have no supported instance classes (this is common for global database host servers). The filters values defaults to the empty list if not explicitly provided. Examples Calling without filters: iex&gt; config_options = MsbmsSystOptions . get_options! ( &quot;./testing_options.toml&quot; ) iex&gt; [ _ | _ ] = MsbmsSystOptions . list_dbservers ( config_options ) [ %{ db_host : &quot;127.0.0.1&quot; , db_max_instances : 0 , db_port : 5432 , db_show_sensitive : true , dbadmin_password : &quot;default.msbms.privileged.password&quot; , dbadmin_pool_size : 1 , server_name : &quot;global_db&quot; , server_salt : &quot;sklMRkLXzMQgzqpMpJZPk31Js88su39U/mooAXALhj0=&quot; , start_server_instances : false , server_pools : [ ] } , %{ db_host : &quot;127.0.0.1&quot; , db_max_instances : 30 , db_port : 5432 , db_show_sensitive : true , dbadmin_password : &quot;default.msbms.privileged.password&quot; , dbadmin_pool_size : 1 , server_name : &quot;instance_db&quot; , server_salt : &quot;w1OfRx630x7svid8Tk3L9rLL1eEGSm0fq8XcLdveuSs=&quot; , start_server_instances : true , server_pools : [ &quot;primary&quot; , &quot;linked&quot; , &quot;demo&quot; , &quot;reserved&quot; ] } ] Calling with filters: iex&gt; config_options = MsbmsSystOptions . get_options! ( &quot;./testing_options.toml&quot; ) iex&gt; [ _ | _ ] = MsbmsSystOptions . list_dbservers ( config_options , [ &quot;primary&quot; ] ) [ %{ db_host : &quot;127.0.0.1&quot; , db_max_instances : 30 , db_port : 5432 , db_show_sensitive : true , dbadmin_password : &quot;default.msbms.privileged.password&quot; , dbadmin_pool_size : 1 , server_name : &quot;instance_db&quot; , server_salt : &quot;w1OfRx630x7svid8Tk3L9rLL1eEGSm0fq8XcLdveuSs=&quot; , start_server_instances : true , server_pools : [ &quot;primary&quot; , &quot;linked&quot; , &quot;demo&quot; , &quot;reserved&quot; ] } ]","ref":"MsbmsSystOptions.html#list_dbservers/2","title":"MsbmsSystOptions.list_dbservers/2","type":"function"},{"doc":"Provides the typespecs and related typing documentation for the MsbmsSystOptions module.","ref":"MsbmsSystOptions.Types.html","title":"MsbmsSystOptions.Types","type":"module"},{"doc":"Server pools allow for the categorization for dbservers which relate to their targeted workload or other operational constraints. The available server pools are defined at the top level of the options file under the available_server_pools configuration point.","ref":"MsbmsSystOptions.Types.html#t:server_pool/0","title":"MsbmsSystOptions.Types.server_pool/0","type":"type"}]