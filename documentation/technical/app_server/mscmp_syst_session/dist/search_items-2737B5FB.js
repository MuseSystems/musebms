searchNodes=[{"doc":"","ref":"DevSupport.html","title":"DevSupport","type":"module"},{"doc":"","ref":"DevSupport.html#get_datastore_context_id/0","title":"DevSupport.get_datastore_context_id/0","type":"function"},{"doc":"","ref":"DevSupport.html#start_dev_environment/1","title":"DevSupport.start_dev_environment/1","type":"function"},{"doc":"","ref":"DevSupport.html#stop_dev_environment/0","title":"DevSupport.stop_dev_environment/0","type":"function"},{"doc":"MscmpSystSession - Database Backed Session Support Session Management API &amp; Runtime Note that the intention of this module is that it will be wrapped as a Plug.Session.Store behaviour implementation.","ref":"MscmpSystSession.html","title":"MscmpSystSession","type":"module"},{"doc":"Creates a new session returning the session name for future reference. Using a starting set of data and a expiration period, creates a new Session record. The return value is either a success tuple including the generated name of the session record or an error tuple explaining the failure. Currently, the Session name is an automatically generated random 96 bytes run through base 64 encoding. Parameters session_data - the initial Session Data to use in creating the new Session record in the database. Currently the expectation is that this value will be any arbitrary Map . This parameter is required. opts - a Keyword List of optional parameters. The available parameters are: session_name - a binary to use for the session name rather than letting the system create a random session name. The default behavior is for the system to set the session name using generate_session_name/0 . expires_after - the number of seconds for which the session will be considered valid. The default value for this setting is 3,600 seconds (1 hour). Examples Creating a new Session with the default expiration time. iex&gt; { :ok , session_name } = ...&gt; MscmpSystSession . create_session ( %{ test : &quot;test&quot; } ) iex&gt; is_binary ( session_name ) true","ref":"MscmpSystSession.html#create_session/2","title":"MscmpSystSession.create_session/2","type":"function"},{"doc":"Deletes the named Session record from the database. This is the de facto method for terminating a session. Unlike the other functions in this module which treat expired Session records as though they've not been found, deleting an expired Session is permitted and will return the same value as deleting an unexpired Session record. Parameters session_name - the Session Name that was generated by create_session/2 at Session create time. This argument is required. Examples Deleting a Session record. iex&gt; MscmpSystSession . delete_session ( &quot;example_delete_session&quot; ) :ok Attempting to delete a nonexistent Session returns the not found value. iex&gt; MscmpSystSession . delete_session ( &quot;nonexistent_session&quot; ) { :ok , :not_found }","ref":"MscmpSystSession.html#delete_session/1","title":"MscmpSystSession.delete_session/1","type":"function"},{"doc":"Generates a random Session Name using the current formulation for automatic session name generation. Currently generated Session Names are strings of 16 random characters using a mixed case, alphanumeric character set. Examples Generating a random name. iex&gt; session_name = MscmpSystSession . generate_session_name ( ) iex&gt; String . length ( session_name ) == 16 true","ref":"MscmpSystSession.html#generate_session_name/0","title":"MscmpSystSession.generate_session_name/0","type":"function"},{"doc":"Retrieves the Session Data for the named Session and resets the Session Expiration. It should be noted that reading a Session will also refresh the expiration of that Session's expiration date. Trying to retrieve the Session data of an already expired Session results in a not found tuple being returned ( {:ok, :not_found} ). Parameters session_name - the Session Name that was generated by create_session/2 at Session create time. This argument is required. opts - a Keyword List of optional parameters. The available parameters are: expires_after - the number of seconds for which the session will be considered valid. The default value for this setting is 3,600 seconds (1 hour). Examples Retrieving a Session and setting the renewed expiration date/time to 30 minutes from retrieval time. iex&gt; { :ok , %{ } } = MscmpSystSession . get_session ( &quot;example_session&quot; , expires_after : 1800 ) Attempting to retrieve an expired Session returns the not found value. iex&gt; MscmpSystSession . get_session ( &quot;example_expired_session&quot; ) { :ok , :not_found }","ref":"MscmpSystSession.html#get_session/2","title":"MscmpSystSession.get_session/2","type":"function"},{"doc":"Purges the database of previously expired Session records. The intention of this function is for it to be called on a periodic, scheduled basis in order to keep the system clean of expired Sessions. The expectations are that the purge process may take some time. Currently, 4 minutes are allotted for the running of the process prior to timing out, so a schedule more aggressive than once every 5 minutes is not advised. Parameters opts - a Keyword List of optional parameters. The available parameters are: db_timeout - the number of seconds to allow the database DELETE query to run before timing out the transaction. The default value is 300 (5 minutes).","ref":"MscmpSystSession.html#purge_expired_sessions/1","title":"MscmpSystSession.purge_expired_sessions/1","type":"function"},{"doc":"Refreshes the Session expiration date/time of the identified record. The function only returns its success status absent any data. Do note that all other interactions with the Session will also refresh the Session expiration date/time so in many cases there is no need to call this function explicitly. Typically you'd only call this function if you've had interaction with the user, but not needed to access the session for some time. Trying to refresh the expiration date/time of an already expired Session will be treated as a &quot;not found&quot; record. Parameters session_name - the Session Name that was generated by create_session/2 at Session create time. This argument is required. opts - a Keyword List of optional parameters. The available parameters are: expires_after - the number of seconds for which the session will be considered valid. The default value for this setting is 3,600 seconds (1 hour). Examples Refreshing a Session expiration date/time to 30 minutes from refresh time. iex&gt; MscmpSystSession . refresh_session_expiration ( &quot;example_session&quot; , expires_after : 1800 ) :ok Attempting to refresh an already expired Session returns the not found value. iex&gt; MscmpSystSession . refresh_session_expiration ( &quot;example_expired_session&quot; ) { :ok , :not_found }","ref":"MscmpSystSession.html#refresh_session_expiration/2","title":"MscmpSystSession.refresh_session_expiration/2","type":"function"},{"doc":"Replaces the Session Data of the named Session record with the Session Data provided. As with other kinds of interactions with the Session, updating the Session data will also update the expiration date/time. Attempting to update the Session Data of an already expired Session will be treated as attempting to update a not found record. Parameters session_name - the Session Name that was generated by create_session/2 at Session create time. This argument is required. session_data - the updated Session Data which replaces the existing Session Data. Currently the expectation is that this value will be any arbitrary Map . This argument is required. opts - a Keyword List of optional parameters. The available parameters are: expires_after - the number of seconds for which the session will be considered valid. The default value for this setting is 3,600 seconds (1 hour). Examples Updating a Session with new data and resetting the expiration date/time to 30 minutes from update time. iex&gt; MscmpSystSession . update_session ( &quot;example_update_session&quot; , %{ updated_key : &quot;updated_value&quot; } , ...&gt; expires_after : 1800 ) :ok iex&gt; MscmpSystSession . get_session ( &quot;example_update_session&quot; ) { :ok , %{ &quot;updated_key&quot; =&gt; &quot;updated_value&quot; } } Attempting to update an already expired Session returns the not found value. iex&gt; MscmpSystSession . update_session ( &quot;example_expired_session&quot; , %{ updated_key : &quot;updated_value&quot; } ) { :ok , :not_found }","ref":"MscmpSystSession.html#update_session/3","title":"MscmpSystSession.update_session/3","type":"function"},{"doc":"User interface session data.","ref":"Msdata.SystSessions.html","title":"Msdata.SystSessions","type":"module"},{"doc":"See MscmpSystSession.Msdata.Validators.SystSessions.insert_changeset/1 .","ref":"Msdata.SystSessions.html#insert_changeset/1","title":"Msdata.SystSessions.insert_changeset/1","type":"function"},{"doc":"See MscmpSystSession.Msdata.Validators.SystSessions.update_changeset/2 .","ref":"Msdata.SystSessions.html#update_changeset/2","title":"Msdata.SystSessions.update_changeset/2","type":"function"},{"doc":"","ref":"Msdata.SystSessions.html#t:t/0","title":"Msdata.SystSessions.t/0","type":"type"},{"doc":"Data types defined by and for use with the McmpSystSession component.","ref":"MscmpSystSession.Types.html","title":"MscmpSystSession.Types","type":"module"},{"doc":"The session contents, the final data to be stored after it has been built with Plug.Conn.put_session/3 and the other session manipulating functions.","ref":"MscmpSystSession.Types.html#t:session_data/0","title":"MscmpSystSession.Types.session_data/0","type":"type"},{"doc":"The internal reference to the session in the store.","ref":"MscmpSystSession.Types.html#t:session_name/0","title":"MscmpSystSession.Types.session_name/0","type":"type"},{"doc":"","ref":"MscmpSystSession.Types.html#t:session_params/0","title":"MscmpSystSession.Types.session_params/0","type":"type"}]