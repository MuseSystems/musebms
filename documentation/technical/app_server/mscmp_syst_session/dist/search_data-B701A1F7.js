searchData={"items":[{"type":"module","title":"MscmpSystSession","doc":"# MscmpSystSession - Database Backed Session Support\n\nSession Management API & Runtime","ref":"MscmpSystSession.html"},{"type":"function","title":"MscmpSystSession.create_session/2","doc":"Creates a new session returning the session name for future reference.\n\nUsing a starting set of data and a expiration period, creates a new Session\nrecord.  The return value is either a success tuple including the generated\nname of the session record or an error tuple explaining the failure.\n\nCurrently, the Session name is an automatically generated random 96 bytes run\nthrough base 64 encoding.","ref":"MscmpSystSession.html#create_session/2"},{"type":"function","title":"Parameters - MscmpSystSession.create_session/2","doc":"* `session_data` - the initial Session Data to use in creating the new\n  Session record in the database.  Currently the expectation is that this\n  value will be any arbitrary `Map`.  This parameter is required.\n\n  * `opts` - a Keyword List of optional parameters.  The available parameters\n  are:\n\n    * `session_name` - a binary to use for the session name rather than\n    letting the system create a random session name.  The default behavior is\n    for the system to set the session name using `generate_session_name/0`.\n\n    * `expires_after` - the number of seconds for which the session will be\n    considered valid.  The default value for this setting is 3,600 seconds\n    (1 hour).","ref":"MscmpSystSession.html#create_session/2-parameters"},{"type":"function","title":"Examples - MscmpSystSession.create_session/2","doc":"Creating a new Session with the default expiration time.\n\n    iex> {:ok, session_name} =\n    ...>   MscmpSystSession.create_session(%{test: \"test\"})\n    iex> is_binary(session_name)\n    true","ref":"MscmpSystSession.html#create_session/2-examples"},{"type":"function","title":"MscmpSystSession.delete_session/1","doc":"Deletes the named Session record from the database.\n\nThis is the de facto method for terminating a session.\n\nUnlike the other functions in this module which treat expired Session records\nas though they've not been found, deleting an expired Session is permitted and\nwill return the same value as deleting an unexpired Session record.","ref":"MscmpSystSession.html#delete_session/1"},{"type":"function","title":"Parameters - MscmpSystSession.delete_session/1","doc":"* `session_name` - the Session Name that was generated by `create_session/2`\n  at Session create time.  This argument is required.","ref":"MscmpSystSession.html#delete_session/1-parameters"},{"type":"function","title":"Examples - MscmpSystSession.delete_session/1","doc":"Deleting a Session record.\n\n    iex> MscmpSystSession.delete_session(\"example_delete_session\")\n    :ok\n\nAttempting to delete a nonexistent Session returns the not found value.\n\n    iex> MscmpSystSession.delete_session(\"nonexistent_session\")\n    {:ok, :not_found}","ref":"MscmpSystSession.html#delete_session/1-examples"},{"type":"function","title":"MscmpSystSession.generate_session_name/0","doc":"Generates a random Session Name using the current formulation for automatic\nsession name generation.\n\nCurrently generated Session Names are strings of 16 random characters using a\nmixed case, alphanumeric character set.","ref":"MscmpSystSession.html#generate_session_name/0"},{"type":"function","title":"Examples - MscmpSystSession.generate_session_name/0","doc":"Generating a random name.\n\n    iex> session_name = MscmpSystSession.generate_session_name()\n    iex> String.length(session_name) == 16\n    true","ref":"MscmpSystSession.html#generate_session_name/0-examples"},{"type":"function","title":"MscmpSystSession.get_session/2","doc":"Retrieves the Session Data for the named Session and resets the Session\nExpiration.\n\nIt should be noted that reading a Session will also refresh the expiration of\nthat Session's expiration date.\n\nTrying to retrieve the Session data of an already expired Session results in\na not found tuple being returned (`{:ok, :not_found}`).","ref":"MscmpSystSession.html#get_session/2"},{"type":"function","title":"Parameters - MscmpSystSession.get_session/2","doc":"* `session_name` - the Session Name that was generated by `create_session/2`\n  at Session create time.  This argument is required.\n\n  * `opts` - a Keyword List of optional parameters.  The available parameters\n  are:\n\n    * `expires_after` - the number of seconds for which the session will be\n    considered valid.  The default value for this setting is 3,600 seconds\n    (1 hour).","ref":"MscmpSystSession.html#get_session/2-parameters"},{"type":"function","title":"Examples - MscmpSystSession.get_session/2","doc":"Retrieving a Session and setting the renewed expiration date/time to 30\nminutes from retrieval time.\n\n    iex> {:ok, %{}} = MscmpSystSession.get_session(\"example_session\", expires_after: 1800)\n\nAttempting to retrieve an expired Session returns the not found value.\n\n    iex> MscmpSystSession.get_session(\"example_expired_session\")\n    {:ok, :not_found}","ref":"MscmpSystSession.html#get_session/2-examples"},{"type":"function","title":"MscmpSystSession.purge_expired_sessions/1","doc":"Purges the database of previously expired Session records.\n\nThe intention of this function is for it to be called on a periodic, scheduled\nbasis in order to keep the system clean of expired Sessions.  The expectations\nare that the purge process may take some time.  Currently, 4 minutes are\nallotted for the running of the process prior to timing out, so a schedule\nmore aggressive than once every 5 minutes is not advised.","ref":"MscmpSystSession.html#purge_expired_sessions/1"},{"type":"function","title":"Parameters - MscmpSystSession.purge_expired_sessions/1","doc":"* `opts` - a Keyword List of optional parameters.  The available parameters\n  are:\n\n    * `db_timeout` - the number of seconds to allow the database DELETE query\n    to run before timing out the transaction.  The default value is 300\n    (5 minutes).","ref":"MscmpSystSession.html#purge_expired_sessions/1-parameters"},{"type":"function","title":"MscmpSystSession.refresh_session_expiration/2","doc":"Refreshes the Session expiration date/time of the identified record.\n\nThe function only returns its success status absent any data.\n\nDo note that all other interactions with the Session will also refresh the\nSession expiration date/time so in many cases there is no need to call this\nfunction explicitly.  Typically you'd only call this function if you've had\ninteraction with the user, but not needed to access the session for some time.\n\nTrying to refresh the expiration date/time of an already expired Session will\nbe treated as a \"not found\" record.","ref":"MscmpSystSession.html#refresh_session_expiration/2"},{"type":"function","title":"Parameters - MscmpSystSession.refresh_session_expiration/2","doc":"* `session_name` - the Session Name that was generated by `create_session/2`\n  at Session create time.  This argument is required.\n\n  * `opts` - a Keyword List of optional parameters.  The available parameters\n  are:\n\n    * `expires_after` - the number of seconds for which the session will be\n    considered valid.  The default value for this setting is 3,600 seconds\n    (1 hour).","ref":"MscmpSystSession.html#refresh_session_expiration/2-parameters"},{"type":"function","title":"Examples - MscmpSystSession.refresh_session_expiration/2","doc":"Refreshing a Session expiration date/time to 30 minutes from refresh time.\n\n    iex> MscmpSystSession.refresh_session_expiration(\"example_session\", expires_after: 1800)\n    :ok\n\nAttempting to refresh an already expired Session returns the not found value.\n\n    iex> MscmpSystSession.refresh_session_expiration(\"example_expired_session\")\n    {:ok, :not_found}","ref":"MscmpSystSession.html#refresh_session_expiration/2-examples"},{"type":"function","title":"MscmpSystSession.update_session/3","doc":"Replaces the Session Data of the named Session record with the Session Data\nprovided.\n\nAs with other kinds of interactions with the Session, updating the Session\ndata will also update the expiration date/time.\n\nAttempting to update the Session Data of an already expired Session will\nbe treated as attempting to update a not found record.","ref":"MscmpSystSession.html#update_session/3"},{"type":"function","title":"Parameters - MscmpSystSession.update_session/3","doc":"* `session_name` - the Session Name that was generated by `create_session/2`\n  at Session create time.  This argument is required.\n\n  * `session_data` - the updated Session Data which replaces the existing\n  Session Data.  Currently the expectation is that this value will be any\n  arbitrary `Map`.  This argument is required.\n\n  * `opts` - a Keyword List of optional parameters.  The available parameters\n  are:\n\n    * `expires_after` - the number of seconds for which the session will be\n    considered valid.  The default value for this setting is 3,600 seconds\n    (1 hour).","ref":"MscmpSystSession.html#update_session/3-parameters"},{"type":"function","title":"Examples - MscmpSystSession.update_session/3","doc":"Updating a Session with new data and resetting the expiration date/time to\n30 minutes from update time.\n\n    iex> MscmpSystSession.update_session(\"example_update_session\", %{updated_key: \"updated_value\"},\n    ...>   expires_after: 1800)\n    :ok\n    iex> MscmpSystSession.get_session(\"example_update_session\")\n    {:ok, %{\"updated_key\" => \"updated_value\"}}\n\nAttempting to update an already expired Session returns the not found value.\n\n    iex> MscmpSystSession.update_session(\"example_expired_session\", %{updated_key: \"updated_value\"})\n    {:ok, :not_found}","ref":"MscmpSystSession.html#update_session/3-examples"},{"type":"module","title":"Msdata.SystSessions","doc":"User interface session data.","ref":"Msdata.SystSessions.html"},{"type":"function","title":"Msdata.SystSessions.insert_changeset/1","doc":"","ref":"Msdata.SystSessions.html#insert_changeset/1"},{"type":"function","title":"Msdata.SystSessions.update_changeset/2","doc":"","ref":"Msdata.SystSessions.html#update_changeset/2"},{"type":"type","title":"Msdata.SystSessions.t/0","doc":"","ref":"Msdata.SystSessions.html#t:t/0"},{"type":"module","title":"MscmpSystSession.Types","doc":"Data types defined by and for use with the `McmpSystSession` component.","ref":"MscmpSystSession.Types.html"},{"type":"type","title":"MscmpSystSession.Types.session_data/0","doc":"The session contents, the final data to be stored after it has been built\nwith `Plug.Conn.put_session/3` and the other session manipulating functions.","ref":"MscmpSystSession.Types.html#t:session_data/0"},{"type":"type","title":"MscmpSystSession.Types.session_name/0","doc":"The internal reference to the session in the store.","ref":"MscmpSystSession.Types.html#t:session_name/0"},{"type":"type","title":"MscmpSystSession.Types.session_params/0","doc":"","ref":"MscmpSystSession.Types.html#t:session_params/0"}],"content_type":"text/markdown"}