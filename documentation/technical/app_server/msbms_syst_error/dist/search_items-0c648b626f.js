searchNodes=[{"doc":"API for working with the MuseBMS error reporting subsystem. This module defines a nested structure for reporting errors in contexts where a result type ends in an error state. By capturing lower level errors and reporting them in a standard way, various application errors, especially non-fatal errors, can be handled appropriate and logged for later analysis. The basic form of a reportable application error is: {:error, %MsbmsSystError{}} where %MsbmsSystError{} contains basic fields to identify the kind of error, the source of the error. Functions in this API are used to work with the returned struct.","ref":"MsbmsSystError.html","title":"MsbmsSystError","type":"exception"},{"doc":"The %MsbmsSystError{} struct (the Error Struct) may represent arbitrarily nested Error Structs in the cause: attribute of the Error Struct. This function will traverse the nesting and return the bottom most Error Struct. If some other object, such as a standard error tuple is passed to the function, the function will simply return the value. Examples iex&gt; my_err = % MsbmsSystError { ...&gt; code : :example_error , ...&gt; message : &quot;Outer error message&quot; , ...&gt; cause : % MsbmsSystError { ...&gt; code : :example_error , ...&gt; message : &quot;Intermediate error message&quot; , ...&gt; cause : % MsbmsSystError { ...&gt; code : :example_error , ...&gt; message : &quot;Root error message&quot; , ...&gt; cause : { :error , &quot;Example Error&quot; } , ...&gt; } , ...&gt; } , ...&gt; } iex&gt; MsbmsSystError . get_root_cause ( my_err ) % MsbmsSystError { code : :example_error , message : &quot;Root error message&quot; , cause : { :error , &quot;Example Error&quot; } } iex&gt; MsbmsSystError . get_root_cause ( { :error , &quot;Example Error&quot; } ) { :error , &quot;Example Error&quot; }","ref":"MsbmsSystError.html#get_root_cause/1","title":"MsbmsSystError.get_root_cause/1","type":"function"},{"doc":"Defines a nestable exception format for reporting MuseBMS application exceptions.t(). Fields in the exception are: code Classifies the error into a specific kind of exception likely to be seen in application. Useful for pattern matching, logging, and determining if any raised exception should be handled or not. message The text description of the error condition. This should be meaningful to humans. cause This value may be either another %MsbmsSystError{} value representing a more fundamental cause or other metadata helpful in understanding the cause of the error. Values found here, in addition to other %MsbmsSystError{} values, could include maps of function parameters/values or lower level exceptions that originate from included dependencies or libraries like database connection libraries.","ref":"MsbmsSystError.html#t:t/0","title":"MsbmsSystError.t/0","type":"type"},{"doc":"Defines the public types exposed by the MsbmsSystError component.","ref":"MsbmsSystError.Types.html","title":"MsbmsSystError.Types","type":"module"},{"doc":"Categories or groups of error kinds which might be seen in the application. The level of granularity we're trying to achieve here is we want any logic that makes decisions on whether to handle an error/exception to be able to understand the nature of the error.","ref":"MsbmsSystError.Types.html#t:msbms_error/0","title":"MsbmsSystError.Types.msbms_error/0","type":"type"}]