searchNodes=[{"doc":"","ref":"DevSupport.html","title":"DevSupport","type":"module"},{"doc":"","ref":"DevSupport.html#get_datastore_context_id/0","title":"DevSupport.get_datastore_context_id/0","type":"function"},{"doc":"","ref":"DevSupport.html#start_dev_environment/1","title":"DevSupport.start_dev_environment/1","type":"function"},{"doc":"","ref":"DevSupport.html#stop_dev_environment/1","title":"DevSupport.stop_dev_environment/1","type":"function"},{"doc":"MscmpSystAuthn - Global User Authentication API for the management of user authentication. This Component provides a global method of authentication for users wishing to use the system. General features supported by this Component include: The ability to host user accounts that are managed by specific tenants The ability to host user accounts that are independent of any specific tenant (e.g. freelance bookkeepers) Authentication rights for users to specific Application Instances Use of a single user account to authenticate to Application Instances owned by different tenants. Individual tenant controls over certain authentication controls such as Password Credential complexity or requiring Multi-Factor Authentication The ability to establish &quot;Network Rules&quot; which act as a sort of firewall allowing or denying certain origin host IP addresses or networks the right to attempt authentication Rate limiting of authentication attempts enforced, independently, by identifier and by originating host IP address Note that this Component doesn't provide a substantial authorization capability. Authorization needs are left for higher level, Application Instance functionality to fulfill. Concepts Below are listed the conceptual ideas that need to be understood to use this component effectively. Concepts in this Component depend heavily on a number of concepts derived from the MscmpSystInstance Component so familiarity with that Component will be helpful in understanding the ideas and functioning of this authentication component. Access Accounts An Access Account is the record type which defines a user of the system for the purposes of authentication. Ideally, a single Access Account is defined for any single person in the world that will use the system. The information that an Access Account captures about a user is limited to only that essential to the authentication process; this Component does not provide general information management for the user as a person. Access Accounts may be Owned Access Accounts or Unowned Access Accounts. Owned Access Accounts are the more common kind of account and they are directly managed by tenants (Owners). Owned Access Accounts are the kinds of accounts which are created by an employer to provide their employees access to the system. Unowned Access Accounts are created directly by a user of the system and exist independent of any Owner. Unowned Access Accounts facilitate independent contractors or freelancers which may need access a variety of Application Instances owned by different Owners. Identities An Identity is the means by which we can identify a specific Access Account using an identifier known to the Access Account holder. There are different identifiers and methods of identification depending on the specific authentication use case being supported. Identifiers are unique to the Owner/Access Account combination. All Unowned Access Accounts are considered as an Owner group for this purpose. This means that the Owner of an Access Account must be known at authentication time since an identifier may be duplicated between different Owners. The supported basic Identity Types used for regular authentication are: Email - a typical interactive identification method where a user provides an email address as the means of identification. An Access Account may define multiple Email Identities; for example, this can happen when a user changes email addresses and the old email address must remain valid prior to the new email address being validated by the Access Account holder. Email Identities may require validation by the Access Account holder prior to the email address being usable for identification purposes. Unowned Access Accounts typically require validation and Owned Access Accounts typically will not. All valid Email Identities use a common Password Credential for authenticating the identification. API Token - provides an identification mechanism for other programs to access the system on behalf of the Access Account holder. An Access Account holder may define an arbitrary number of API Token Identities and typically should have one API Token Identity for each different program that will access the system. API Token Identities require that a specific API Token Credential be provided at authentication time. API Token Identity identifiers are usually randomly generated strings of characters. In addition to the basic Identity Types, there are a number of special purpose Identity Types: Account Code - provides a simple to use identifier which can be provided to third party Owners by an Access Account holder. The use case here is an Access Account holder wants to access an Application Instance owned by a different organization than that to which the Access Account holder belongs. The third party Owner must invite the Access Account holder to their instance and they issue the invitation to the Access Account identified by the provided Account Code. This allows third party identification with necessarily disclosing information such as email addresses. Note that there is no authentication process and no Credential for this Identity Type; this Identity Type exists purely for Access Account identification. Validation Token - a single use identifier which is created for the purpose of validating an Email Identity. Only one Validation Token may exist for any one Email Identity at a time and the Email Identity may not already be validated. The Validation Token Identity also requires a specific Validation Token Credential be provided at authentication time. Once a Validation Token Identity is successfully authenticated the associated Email Identity is immediately usable and the Validation Token Identity/Credential pair is deleted from the system. Validation Token Identities are typically created with an expiration timestamp after which the Validation Token Identity may no longer be used. Recovery Token - a single use identifier which is created for the purpose of initiating Password Credential recovery. Only a single Recovery Token Identity may exist for any Access Account at a time and that Access Account must have an existing Password Credential record which can be recovered. The Recovery Token Identity must be authenticated with a specific Recovery Token Credential. On successful authentication of a Recovery Token Identity, the Recovery Token Identity/Credential pair is immediately deleted from the system. Recovery Token Identities are typically created with an expiration timestamp after which it may not longer be used. Finally note that the existence of a Recovery Token in no way prevents the Password Credential from being used in authentication; it is expected if a recovery process is started accidentally or in attempt at a malicious recovery of the Password Credential, that the Recovery Identity/ Credential will simply be ignored by the Access Account holder and allowed to expire. Credentials Credentials provide the means for an Access Account holder to prove that they have correctly identified themselves: that they are who they say they are. Credentials are the secrets which only the Access Account holder should know or have the ability to use. There are a variety of different Credential Types which are typically associated with a corresponding Identity Type: Password - defines a password for Access Account holders to use during interactive authentication attempts. Typically Password Credentials are used in association with Email Identities. Only a single Password Credential may exist for any single Access Account at a time. Password Credentials are subject to Password Rules which are described later. Passwords are stored in the system using salted hashes and are not directly recoverable; forgotten passwords must be reset through a recovery process. API Token - used to authenticate API Token Identities. Each API Token Credential is associated with a specific API Token Identity and may only authenticate that Identity. API Token Credentials are usually a system generated string of random characters. API Token Credentials are stored in the system using salted hashes. At Credential create time, the creating process is provided with the plaintext credential so that it may be communicated to the Access Account holder, but is thereafter unrecoverable. Validation Token - behaves in most ways the same as the API Token Credential. They key differences are that each Validation Token Credential is associated with a specific Validation Token Identity and that authentication using the Credential is a one time event; after a successful authentication the Validation Token is deleted from the system. Recovery Token - has all of the same behavioral characteristics of the Validation Token Credential except its context of usage is in Password Credential Recovery. Note When looking at Credential related code, initialization data, tests, and even in other documentation, you will find references to Multi-Factor Authentication (MFA) functionality. There are plans to include MFA functionality and some work towards this goal, but that work is currently incomplete and deferred until much more of the product is built out. Authenticators An Authenticator is simply the combination of related Identities and Credentials. So, for example, an Access Account holder presenting an Email/Password combination for authentication is presenting an Email/Password Authenticator. The concept isn't terribly important to this Component, but the term does appear elsewhere in the documentation and so deserves definition. Access Account/Instance Associations While most authorization activities are outside of the scope of this Component, one authorization exists that must be granted to an Access Account prior to its being able to successfully authenticate. All authentications are performed in the context of authenticating for access to a specific Application Instance. Owners of that Instance must authorize an Access Account to authenticate to their Instance prior to the authentication process succeeding (see MscmpSystInstance for more on Owners and Instances). Owned Access Accounts are typically granted access to all or specific Instances of the Owner which owns the Access Account. Unowned Access Accounts are typically invited by an Owner to access a specific Instance and the Unowned Access Account holder must first accept the invitation to access the Instance prior to using it; the Access Account holder may also explicitly decline such an invitation if they so choose. Both the invitations to access and the permission to access an Instance are known as Access Account/Instance Associations. The various attributes of the Association record determine if an invitation is outstanding, declined, or if access has been granted. Network Rules Network Rules are a simple whitelist/blacklist mechanism which evaluates the apparent origin IP address of an inbound authentication attempt and determines if that host is allowed to attempt an authentication. Network Rules may be defined established at the Global level (applicable to all Owners and Instances), the Owner level, or the Application Instance level. Each Rule can be designated to apply to a single host, an IP network, or a simple range of IP addresses. When a host is seen for which no Network Rule has been defined, a system default rule is applied which implicitly allows the authentication attempt. A special type of Network Rule called a Disallowed Host also exists. A Disallowed Host is exactly as it sounds: a specific originating IP address which is not allowed to authenticate users to the system. Disallowed Hosts are checked on a Global basis and the purpose of the list is to stop hosts determined to be behaving suspiciously from attempting authentications. Suspicious behavior is determined using a set of (currently naive) heuristics which are only evaluated for hosts attempting authentications under the system default implied Network Rule. Password Rules Password Rules define the standards that constitute acceptable passwords for use as Credentials during interactive authentication processes. A Global Password Rule exists which sets the minimum requirements that all passwords in the system must meet before being accept for use. Owners may each establish Owner Password Rules which govern the Access Accounts that they own. Owner Password Rules may not reduce the stringency demanded of the Global Password Rules, they can only increase the required stringency for their owned Access Accounts. If an Owner defined Password Rule does define a less stringent standard than demanded by the Global Password Rules, the Global Password Rule continue to be the one applied. This evaluation is made rule by rule such that the effective Password Rules that an Access Account holder sees may be a mix of the more stringent combination of both the Owner and Global Password Rules. Note The term &quot;stringency&quot;, or &quot;weakening&quot; which appears elsewhere in some documentation, must not be understood to necessarily mean a strengthening or weakening in security. For example, an Owner may elect to set password rules which require that a password contain at least one each of lower, upper, number, and symbol characters. Such a rule would be more stringent than the Global Password Rules default settings which have no such complexity requirements but would not be more secure than those default rules according to studies on the matter. In fact, defining rules with greater stringency may well result in less security than that offered by the default Global Password Rules. The default Global Password Rules are largely compatible with &quot;Authenticator Assurance Level 1&quot; as defined by the National Institute of Standards and Technology's Special Publication 800-63B . For guidelines on the specific rules that may be configured, see MscmpSystAuthn.Types.password_rule_params/0 . Note that &quot;Authenticator&quot; in the NIST document context is not the same as we've defined above. A special additional type of Global Password Rule exists referred to as the Disallowed Password list. This is a list of passwords that are well known or are known to be compromised and that, because of this, are disallowed from usage so long as the &quot;Disallow Compromised&quot; rule is in effect. Disallowed Passwords are stored as SHA-1 hashes of the password for reasonable obfuscation of the passwords and for compatibility with services such as those that are available from services such as &quot; Have I Been Pwned? &quot;. Rate Limits The system attempts to dissuade brute force hacking efforts by implementing limits on the number of failed authentication attempts which are allowed. There are currently two Rate Limits implemented. The first enforces that an identifier may not be used in any more than five consecutive failed authentication attempts in any 30 minute period. After the fifth failure, the identifier will immediately be prevented from participating in any further authentication attempts for the remainder of the 30 minute window. The second Rate Limit is host IP based. Any host IP address seen to have 30 consecutive authentication failures over the course of two hours is automatically added to the Disallowed Hosts list and prevented from further attempts to authenticate until an administrator removes the host from the list. This Rate Limit is only applied to host IP addresses which are only allowed access due to the implied default Network Rule; any explicitly allowed host IP address is exempted from this Rate Limit. Any successful authentication event will reset the counters enforcing either of the Rate Limits.","ref":"MscmpSystAuthn.html","title":"MscmpSystAuthn","type":"module"},{"doc":"Accepts the invitation made to an Access Account to access an Instance. This process is only needed in the case where a syst_access_account_instance_assocs invitation may be accepted or declined by the Access Account holder. To be accepted in this process the invitation record must have been previously created (see invite_to_instance/3 ), must not be expired, previously declined, or previously accepted; trying to accept a record in such a state will result in an error tuple being returned. Naturally, the Access Account holder may choose to never accept or decline the invitation and may simply allow the invitation to expire. Parameters access_account_instance_assoc - this value may be either the populated Msdata.SystAccessAccountInstanceAssocs struct to accept or the record ID of the record to accept.","ref":"MscmpSystAuthn.html#accept_instance_invite/1","title":"MscmpSystAuthn.accept_instance_invite/1","type":"function"},{"doc":"Accepts the invitation made to an Access Account to access an Instance, referencing the record by its composite key values. This function performs the same process as accept_instance_invite/1 , but will look up the record to accept using the Access Account, Instance, and Credential Type record ID values. Parameters access_account_id - the record ID of the Access Account accepting the invitation to the Instance. instance_id - the Instance record ID to which the Access Account has been invited.","ref":"MscmpSystAuthn.html#accept_instance_invite/2","title":"MscmpSystAuthn.accept_instance_invite/2","type":"function"},{"doc":"Indicates if an Access Account's Password Credential is recoverable or not. Access Account Password Credentials are only recoverable when they: 1) exist, and 2) are not already awaiting recovery. When the Password Credential is recoverable this function will return a simple :ok value. If the Access Account's Password Credential already has an issued recovery underway, the value :existing_recovery is returned. If the Access Account lacks a Password Credential record to recover, the value :not_found is returned. Any errors encountered cause the function to raise an exception. Parameters access_account_id - the record ID of the Access Account which owns the Password Credential to test for recoverability.","ref":"MscmpSystAuthn.html#access_account_credential_recoverable!/1","title":"MscmpSystAuthn.access_account_credential_recoverable!/1","type":"function"},{"doc":"Identities and authenticates an Access Account using an API Token Authenticator. The return value of this function is a result tuple where a success tuple ( {:ok, &lt;value&gt;} ) indicates that the function processed without error, not that the API Token Authenticator was successfully authenticated. The value element of the success tuple, the Authentication State, carries information about the actual outcome of the authentication attempt; see MscmpSystAuthn.Types.authentication_state/0 for more about the specific information carried by the Authentication State value. Otherwise, an error tuple is returned indicating the nature of the processing failure. The authentication process executed by this function is not interruptible. The initial call to this function must contain all parameter values required to fully complete the authentication process. Any missing information will cause the authentication attempt to be rejected. Parameters identifier - the identifier defined by the API Token identifier. Typically this would have been a system generated random string of characters available at API Token Authenticator creation time. plaintext_token - the plaintext API Token credential. Typically this would have been a system generated random string of characters available at API Token Authenticator creation time. host_address - the apparent origin host IP address from where the authentication attempt is originating. This value is used in the enforcement of applicable Network Rules. opts - a Keyword List of values that either optionally override default behaviors of this function or are optionally required. The available options are: owning_owner_id - if the Access Account is an Owned Access Account, this value must be set to the record ID of the Access Account's Owner. Otherwise it must be set nil or not provided. The default value is nil . instance_id - the record ID of the Application Instance to which the Access Account holder wishes to authenticate. This value is required must be provided at function call time or the Authentication State will be returned in a :rejected status. There is no default value (default nil ). host_ban_rate_limit - overrides the default host IP address based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 30 attempts over a time window of 2 hours. identifier_rate_limit - overrides the default identifier based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 5 attempts over a time window of 30 minutes. deadline_minutes - overrides the default number of minutes that an authentication process can take before being rejected for taking too long. This deadline is needed because an arbitrary time can pass due to user interaction if the authenticator allows for an interruptable authentication process. The default deadline allows for 5 minutes to complete the authentication process.","ref":"MscmpSystAuthn.html#authenticate_api_token/5","title":"MscmpSystAuthn.authenticate_api_token/5","type":"function"},{"doc":"Identifies and authenticates an Access Account on the basis of a starting Authentication State value constructed for Email/Password authentication. This function works the same as authenticate_email_password/4 except that it expects an existing Authentication State value to contain the basic information to process the authentication, with other parameters provided via the opts parameter. This function is typically used to continue a previously interrupted call to authenticate_email_password/4 and supplying it the necessary additional information to continue processing the authentication to completion. The options available for use here are the same as for authenticate_email_password/4 . However the options specified here are only valid if they are applied to authentication process operations that are still pending when this function is called. Options influencing operations previously processed, such as owning_owner_id as used in Access Account identification will simply be ignored if they are different in the resumption of the process than they were in the initiating call. See authenticate_email_password/4 for a discussion of the possible return values.","ref":"MscmpSystAuthn.html#authenticate_email_password/2","title":"MscmpSystAuthn.authenticate_email_password/2","type":"function"},{"doc":"Identities and authenticates an Access Account using an Email/Password Authenticator. The return value of this function is a result tuple where a success tuple ( {:ok, &lt;value&gt;} ) indicates that the function processed without error, not that the authentication was successful. The value element of the success tuple, the Authentication State, carries information about the outcome of the authentication attempt; see MscmpSystAuthn.Types.authentication_state/0 for more about the specific information carried by the Authentication State value. Otherwise, an error tuple is returned indicating the nature of the processing failure. Email/Password authentication is an interruptible process, meaning that this function may return prior to the authentication having been fully processed to a final result. The two most common examples of when this partial processing may happen are 1) the Application Instance was not initially identified; and further authentication is required such as when Multi-Factor Authentication is required. In these cases the returned Authentication State is resubmitted for process via authenticate_email_password/2 along with the updated information which allows authentication processing to complete. Parameters email_address - this is the username in the form of an email address used to identify the correct Email Identity record which in turn identifies a specific Access Account. plaintext_pwd - the Access Account holder's password as submitted in plaintext. This is the credential that will be authenticated using the Password Credential record belonging to the identified Access Account. host_address - the apparent origin host IP address from where the authentication attempt is originating. This value is used in the enforcement of applicable Network Rules. opts - a Keyword List of values that either optionally override default behaviors of this function, are optionally required, or are required on a deferred basis (eventually required). The available options are: owning_owner_id - if the Access Account is an Owned Access Account, this value must be set to the record ID of the Access Account's Owner. Otherwise it must be set nil or not provided. The default value is nil . instance_id - the record ID of the Application Instance to which the Access Account holder wishes to authenticate. This is not required when the Email/Password authentication process is initiated but is required for it to complete. If this value is not initially provided, the function will be interrupted returning an Authentication State status value of :pending . Deferral may be appropriate if, for example, we want to allow the Access Account holder to select the specific Instance they wish to access from a list of their permitted Instances. The default value of this option is nil . host_ban_rate_limit - overrides the default host IP address based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 30 attempts over a time window of 2 hours. identifier_rate_limit - overrides the default identifier based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 5 attempts over a time window of 30 minutes. deadline_minutes - overrides the default number of minutes that an authentication process can take before being rejected for taking too long. This deadline is needed because an arbitrary time can pass due to user interaction, such as selecting an Instance or providing an MFA credential. The default value is 5 minutes from the time the authentication process is started.","ref":"MscmpSystAuthn.html#authenticate_email_password/4","title":"MscmpSystAuthn.authenticate_email_password/4","type":"function"},{"doc":"Confirms an Access Account's password Recovery Token Authenticator. The return value of this function is a result tuple where a success tuple ( {:ok, &lt;value&gt;} ) indicates that the function processed without error, not that the Recovery Token Authenticator was successfully authenticated. The value element of the success tuple, the Authentication State, carries information about the actual outcome of the authentication attempt; see MscmpSystAuthn.Types.authentication_state/0 for more about the specific information carried by the Authentication State value. Otherwise, an error tuple is returned indicating the nature of the processing failure. If the Authentication State's status is returned as :authenticated , the process of Password Credential recovery may be undertaken. On success the Recovery Token Authenticator is deleted from the system, but no further action is taken by this function. The actual process of recovering a password is external to this function. The authentication process executed by this function is not interruptible. The initial call to this function must contain all parameter values required to fully complete the authentication process. Any missing information will cause the authentication attempt to be rejected. Parameters identifier - the identifier defined by the Recovery Token identifier. Typically this would have been a system generated random string of characters available at Recovery Token Authenticator creation time. plaintext_token - the plaintext Recovery Token credential. Typically this would have been a system generated random string of characters available at Recovery Token Authenticator creation time. host_address - the apparent origin host IP address from where the authentication attempt is originating. This value is used in the enforcement of applicable Network Rules. opts - a Keyword List of values that either optionally override default behaviors of this function or are optionally required. The available options are: owning_owner_id - if the Access Account is an Owned Access Account, this value must be set to the record ID of the Access Account's Owner. Otherwise it must be set nil or not provided. The default value is nil . host_ban_rate_limit - overrides the default host IP address based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 30 attempts over a time window of 2 hours. identifier_rate_limit - overrides the default identifier based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 5 attempts over a time window of 30 minutes. deadline_minutes - overrides the default number of minutes that an authentication process can take before being rejected for taking too long. This deadline is needed because an arbitrary time can pass due to user interaction if the authenticator allows for an interruptable authentication process. The default deadline allows for 5 minutes to complete the authentication process.","ref":"MscmpSystAuthn.html#authenticate_recovery_token/4","title":"MscmpSystAuthn.authenticate_recovery_token/4","type":"function"},{"doc":"Confirms a specific Access Account Identity record as being valid for use. The return value of this function is a result tuple where a success tuple ( {:ok, &lt;value&gt;} ) indicates that the function processed without error, not that the validation was successful. The value element of the success tuple, the Authentication State, carries information about the actual outcome of the authentication attempt; see MscmpSystAuthn.Types.authentication_state/0 for more about the specific information carried by the Authentication State value. Otherwise, an error tuple is returned indicating the nature of the processing failure. If the Authentication State's status is returned as :authenticated , the validation process succeeded. On success the target Identity record has its validated field set to the current date/time and the Validation Authenticator is deleted from the system. The authentication process executed by this function is not interruptible. The initial call to this function must contain all parameter values required to fully complete the authentication process. Any missing information will cause the authentication attempt to be rejected. Parameters identifier - the identifier defined by the Validation Token identifier. Typically this would have been a system generated random string of characters available at Validation Token Authenticator creation time. plaintext_token - the plaintext Validation Token credential. Typically this would have been a system generated random string of characters available at Validation Token Authenticator creation time. host_address - the apparent origin host IP address from where the authentication attempt is originating. This value is used in the enforcement of applicable Network Rules. opts - a Keyword List of values that either optionally override default behaviors of this function or are optionally required. The available options are: owning_owner_id - if the Access Account is an Owned Access Account, this value must be set to the record ID of the Access Account's Owner. Otherwise it must be set nil or not provided. The default value is nil . host_ban_rate_limit - overrides the default host IP address based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 30 attempts over a time window of 2 hours. identifier_rate_limit - overrides the default identifier based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 5 attempts over a time window of 30 minutes. deadline_minutes - overrides the default number of minutes that an authentication process can take before being rejected for taking too long. This deadline is needed because an arbitrary time can pass due to user interaction if the authenticator allows for an interruptable authentication process. The default deadline allows for 5 minutes to complete the authentication process.","ref":"MscmpSystAuthn.html#authenticate_validation_token/4","title":"MscmpSystAuthn.authenticate_validation_token/4","type":"function"},{"doc":"Create a new Access Account. Parameters access_account_params - a map of required and optional parameters which define the new Access Account record. Required attributes in this map are: internal_name , external_name , access_account_state_id , and allow_global_logins . Example iex&gt; state = MscmpSystEnums . get_default_enum_item ( &quot;access_account_states&quot; ) iex&gt; { :ok , % Msdata.SystAccessAccounts { } } = ...&gt; MscmpSystAuthn . create_access_account ( ...&gt; %{ ...&gt; internal_name : &quot;example_create_accnt&quot; , ...&gt; external_name : &quot;Create Access Account Example&quot; , ...&gt; access_account_state_id : state . id , ...&gt; allow_global_logins : true ...&gt; } ...&gt; )","ref":"MscmpSystAuthn.html#create_access_account/1","title":"MscmpSystAuthn.create_access_account/1","type":"function"},{"doc":"Creates an API Token Authenticator for the requested Access Account. On successful API Token Authenticator creation, a success tuple is returned where the value element is an Authenticator Result in the form of: { :ok , %{ access_account_id : &quot;c3c7fafd-5c45-11ed-ab46-f3d9be809bf9&quot; , account_identifier : &quot;EQH2jj38ha4qnYWAC8VZ&quot; , credential : &quot;8N5Tp81aeOCrYW9PECANrcwKCroSet3MlMp5BbKb&quot; } } It is important to note that this result value is the only time that the API Token Credential plaintext is available. After the function result is discarded the credential is no longer obtainable in plaintext form. Parameters access_account_id - the record ID of the Access Account for which to create the API Token Authenticator. opts - a Keyword List of optional values which changes the default behavior of the Authenticator creation process. Available options are: identity_token_length - this option overrides the default number of random characters to generate for the API Token Identity identifier. The default number of characters generated is 20. identity_tokens - overrides the default character set to use in the generation of the API Token Identity identifier. The default value is :mixed_alphanum . See the MscmpSystUtils.get_random_string/2 documentation for the tokens parameter which receives this option for more information regarding valid values for this setting. external_name - API Token Identities permit Access Account holder naming of the Identity as it may be common for an one Access Account to require multiple API Token Authenticators for different purposes. This option allows that name to be set at Identity creation time. The default value is nil . credential_token_length - this option overrides the default number of random characters to generate for the API Token Credential. The default number of characters generated is 40. credential_tokens - overrides the default character set to use in the generation of the API Token Credential. The default value is :mixed_alphanum . See the MscmpSystUtils.get_random_string/2 documentation for the tokens parameter which receives this option for more information regarding valid values for this setting. credential_token - overrides the system generated API Token Credential with the value of this option. The default is to allow the system to automatically generate the credential.","ref":"MscmpSystAuthn.html#create_authenticator_api_token/2","title":"MscmpSystAuthn.create_authenticator_api_token/2","type":"function"},{"doc":"Creates an Email/Password Authenticator for an Access Account. This function creates an Email Identity, Password Credential, and optionally an Identity Validation Authenticator (created by default). This function is typically used on adding a new Access Account to the system. The process is wrapped in a database transaction so if any one part of the Authenticator creation process fails, all parts should fail. This function will fail if you attempt to create an Authenticator of this type for an Access Account which already has one. In the case of Email Identity replacement, use the specific Identity process to create a new Email Identity instead of this more expansive process. On successful save of the Authenticator records, a success tuple is returned where the value element of the tuple will include basic data that might be required for later processing. If Email/Password Authenticator was created requiring validation (the default), the success tuple's value element will include data required to process the Validation Authenticator: { :ok , %{ access_account_id : &quot;c3c7fafd-5c45-11ed-ab46-f3d9be809bf9&quot; , account_identifier : &quot;SomeEmail@somedomain.com&quot; , validation_credential : &quot;Uo0kPoCOZd004g4X7IFWg3iJ7pz7XiBRBDkBGGiu&quot; , validation_identifier : &quot;5D7i6XmmH0HpYL72tePlEdSUMVL9ygMrEsDSGoTE&quot; } } Note that this is the only time the Validation Authenticator is provided and the Validation Credential plaintext is not recoverable after this return value is provided. When a Validation Authenticator is not created, no validation data will be included in the result: { :ok , %{ access_account_id : &quot;c3c7fafd-5c45-11ed-ab46-f3d9be809bf9&quot; , account_identifier : &quot;SomeEmail@somedomain.com&quot; } } Parameters access_account_id - the Access Account for whom the Email/Password Authenticator is being created. email_address - the email address which will identify the Access Account. plaintext_pwd - the candidate password for use a the Credential in Email/Password authentication processes.","ref":"MscmpSystAuthn.html#create_authenticator_email_password/4","title":"MscmpSystAuthn.create_authenticator_email_password/4","type":"function"},{"doc":"Adds a host IP address to the global disallowed hosts list. Disallowed hosts are IP addresses which are prevented from authenticating users with the system, and by extension prevents host access to application functions generally. Hosts are disallowed on a global basis and may be added to the list based on system heuristics which detect suspicious activity. Successfully adding a host to the list returns a success tuple and a struct representing the record just created. Attempting to add a host which is already part of the list will also result in a success tuple, but no record is returned. Parameters host_address - the IP address of the host to disallow. Examples Adding a new host to the list. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , false } = MscmpSystAuthn . host_disallowed ( ~i&quot;10.123.123.20&quot; ) iex&gt; { :ok , % Msdata.SystDisallowedHosts { } } = ...&gt; MscmpSystAuthn . create_disallowed_host ( ~i&quot;10.123.123.20&quot; ) Attempting to add a host already on the list. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , true } = MscmpSystAuthn . host_disallowed ( ~i&quot;10.123.123.3&quot; ) iex&gt; { :ok , nil } = ...&gt; MscmpSystAuthn . create_disallowed_host ( ~i&quot;10.123.123.3&quot; )","ref":"MscmpSystAuthn.html#create_disallowed_host/1","title":"MscmpSystAuthn.create_disallowed_host/1","type":"function"},{"doc":"Adds a new password to the Disallowed Passwords list. Disallowed passwords are passwords that are commonly known, are known to have been revealed in a successful hacking attack, or are otherwise not available for users to choose for their authentication credential. Enforcing that these passwords are not available for use depends upon the effective disallow_compromised Password Rule for the Access Account attempting authentication. An attempt to add a password which is already on the list will succeed as though the password were not already part of the list. Parameters password - The plaintext password to add to the list of disallowed passwords. Examples Adding a password successfully will simply return :ok . iex&gt; MscmpSystAuthn . create_disallowed_password ( &quot;Example Disallowed Password&quot; ) :ok Any subsequent attempt to add the same password to the list again will appear to succeed while silently doing nothing. iex&gt; MscmpSystAuthn . create_disallowed_password ( &quot;Example Disallowed Password&quot; ) :ok","ref":"MscmpSystAuthn.html#create_disallowed_password/1","title":"MscmpSystAuthn.create_disallowed_password/1","type":"function"},{"doc":"Creates a new Global Network Rule using the provided parameters. Global Network Rules are checked prior to all attempted user authentication events and have precedence over Owner and Instance Network Rules, though they are secondary to the Disallowed Hosts list. On successful creation, a result tuple in the form {:ok, &lt;new record&gt;} is returned where the &lt;new record&gt; is the fully populated Data struct of the record just created. If an exception is raised this function will return a failure tuple in the form of {:error, &lt;exception data&gt;} . Parameters insert_params - a map representing the values to use when creating the new Global Network Rule. See MscmpSystAuthn.Types.global_network_rule_params/0 for the available attributes. Example Adding a new &quot;Allow&quot; Global Network Rule for a CIDR network. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; new_global_rule = %{ ...&gt; ordering : 20 , ...&gt; functional_type : :allow , ...&gt; ip_host_or_network : ~i&quot;10.100.150.0/24&quot; ...&gt; } iex&gt; { :ok , % Msdata.SystGlobalNetworkRules { } } = ...&gt; MscmpSystAuthn . create_global_network_rule ( new_global_rule ) Adding a new &quot;Deny&quot; Global Network Rule for an IP Address range. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; new_global_rule = %{ ...&gt; ordering : 21 , ...&gt; functional_type : :deny , ...&gt; ip_host_or_network : nil , ...&gt; ip_host_range_lower : ~i&quot;10.100.151.1&quot; , ...&gt; ip_host_range_upper : ~i&quot;10.100.152.254&quot; ...&gt; } iex&gt; { :ok , % Msdata.SystGlobalNetworkRules { } } = ...&gt; MscmpSystAuthn . create_global_network_rule ( new_global_rule )","ref":"MscmpSystAuthn.html#create_global_network_rule/1","title":"MscmpSystAuthn.create_global_network_rule/1","type":"function"},{"doc":"Creates a new Instance Network Rule using the provided parameters. Instance Network Rules the checked after the Disallowed Hosts list, the Global Network Rules, and the Instance Network Rules and apply to all Instances owned by the specified Instance, unless a higher precedence rule already applies to the host. On successful creation, a result tuple in the form {:ok, &lt;new record&gt;} is returned where the &lt;new record&gt; is the fully populated Data struct of the record just created. If an exception is raised this function will return a failure tuple in the form of {:error, &lt;exception data&gt;} . Parameters instance_id - the record ID of the Instance for whom the Instance Network Rule is being created. insert_params - a map representing the values to use when creating the new Instance Network Rule. See MscmpSystAuthn.Types.instance_network_rule_params/0 for the available attributes. Example Adding a new &quot;Allow&quot; Instance Network Rule for a CIDR network. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , instance_id } = ...&gt; MscmpSystInstance . get_instance_id_by_name ( &quot;app1_owner8_instance_types_std&quot; ) iex&gt; new_instance_rule = %{ ...&gt; ordering : 1 , ...&gt; functional_type : :allow , ...&gt; ip_host_or_network : ~i&quot;10.100.170.0/24&quot; ...&gt; } iex&gt; { :ok , % Msdata.SystInstanceNetworkRules { } } = ...&gt; MscmpSystAuthn . create_instance_network_rule ( instance_id , new_instance_rule ) Adding a new &quot;Deny&quot; Instance Network Rule for an IP Address range. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , instance_id } = ...&gt; MscmpSystInstance . get_instance_id_by_name ( &quot;app1_owner8_instance_types_std&quot; ) iex&gt; new_instance_rule = %{ ...&gt; ordering : 2 , ...&gt; functional_type : :deny , ...&gt; ip_host_or_network : nil , ...&gt; ip_host_range_lower : ~i&quot;10.100.171.1&quot; , ...&gt; ip_host_range_upper : ~i&quot;10.100.172.254&quot; ...&gt; } iex&gt; { :ok , % Msdata.SystInstanceNetworkRules { } } = ...&gt; MscmpSystAuthn . create_instance_network_rule ( instance_id , new_instance_rule )","ref":"MscmpSystAuthn.html#create_instance_network_rule/2","title":"MscmpSystAuthn.create_instance_network_rule/2","type":"function"},{"doc":"Creates a new Account Code for an Access Account or resets the Account Code if is already exists. On successful Account Code Identity creation or reset, an Authenticator Result value is returned via a success tuple ( {:ok, &lt;result&gt;} ). The expected form of the result for a new Account Code is: %{ access_account_id : &quot;c3c7fafd-5c45-11ed-ab46-f3d9be809bf9&quot; , account_identifier : &quot;QY7QJTWH7MSK&quot; } There is no associated Credential or Validator for this Identity Type. Parameters access_account_id - the record ID of the Access Account that will be identified by the Account Code Identity. opts - a Keyword list of optional settings which can influence the behavior of the function call. Available options are: account_code - this option overrides the randomly generated Account Code with the value of this option. By default the system randomly generates the Account Code. identity_token_length - overrides the number of characters to randomly generate for use as the Account Code Identifier. The default value is 12. identity_tokens - overrides the character set used to create the randomly generated Account Code Identifier. The default value is :b32c . See the MscmpSystUtils.get_random_string/2 documentation for the tokens parameter which receives this option for more information regarding valid values for this setting.","ref":"MscmpSystAuthn.html#create_or_reset_account_code/2","title":"MscmpSystAuthn.create_or_reset_account_code/2","type":"function"},{"doc":"Creates a new Owner Network Rule using the provided parameters. Owner Network Rules the checked after the Disallowed Hosts list, the Global Network Rules, and the Instance Network Rules and apply to all Instances owned by the specified Owner, unless a higher precedence rule already applies to the host. On successful creation, a result tuple in the form {:ok, &lt;new record&gt;} is returned where the &lt;new record&gt; is the fully populated Data struct of the record just created. If an exception is raised this function will return a failure tuple in the form of {:error, &lt;exception data&gt;} . Parameters owner_id - the record ID of the Owner for whom the Owner Network Rule is being created. insert_params - a map representing the values to use when creating the new Owner Network Rule. See MscmpSystAuthn.Types.owner_network_rule_params/0 for the available attributes. Example Adding a new &quot;Allow&quot; Owner Network Rule for a CIDR network. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , owner_id } = MscmpSystInstance . get_owner_id_by_name ( &quot;owner8&quot; ) iex&gt; new_owner_rule = %{ ...&gt; ordering : 1 , ...&gt; functional_type : :allow , ...&gt; ip_host_or_network : ~i&quot;10.100.160.0/24&quot; ...&gt; } iex&gt; { :ok , % Msdata.SystOwnerNetworkRules { } } = ...&gt; MscmpSystAuthn . create_owner_network_rule ( owner_id , new_owner_rule ) Adding a new &quot;Deny&quot; Owner Network Rule for an IP Address range. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , owner_id } = MscmpSystInstance . get_owner_id_by_name ( &quot;owner8&quot; ) iex&gt; new_owner_rule = %{ ...&gt; ordering : 2 , ...&gt; functional_type : :deny , ...&gt; ip_host_or_network : nil , ...&gt; ip_host_range_lower : ~i&quot;10.100.161.1&quot; , ...&gt; ip_host_range_upper : ~i&quot;10.100.162.254&quot; ...&gt; } iex&gt; { :ok , % Msdata.SystOwnerNetworkRules { } } = ...&gt; MscmpSystAuthn . create_owner_network_rule ( owner_id , new_owner_rule )","ref":"MscmpSystAuthn.html#create_owner_network_rule/2","title":"MscmpSystAuthn.create_owner_network_rule/2","type":"function"},{"doc":"Creates Owner Password Rules for the requested Owner. Owners may optionally define their own Password Rules for their users so long as their desired rules are of equal or greater stringency than the Global Password Rules. If the new Owner Password Rules are defined to be less stringent than the current Global Password Rules, the Owner Password Rules will be saved as requested, but ignored when applied in favor of the more stringent rule. Parameters owner_id - the record ID of the Owner for whom the Password Rules are being created. insert_params - a map of the values to use when creating the new record. See MscmpSystAuthn.Types.password_rule_params/0 for details regarding the available attributes.","ref":"MscmpSystAuthn.html#create_owner_password_rules/2","title":"MscmpSystAuthn.create_owner_password_rules/2","type":"function"},{"doc":"Declines an unaccepted/unexpired invitation made to an Access Account to access an Instance. This process is only needed in the case where a syst_access_account_instance_assocs invitation may be accepted or declined by the Access Account holder. To be declined in this process the invitation record must have been previously created (see invite_to_instance/3 ), must not be expired, previously declined, or previously accepted; trying to decline a record in such a state will result in an error tuple being returned. Naturally, the Access Account holder may choose to never accept or decline the invitation and may simply allow the invitation to expire. Parameters access_account_instance_assoc - this value may be either the populated Msdata.SystAccessAccountInstanceAssocs struct to decline or the record ID of the record to decline.","ref":"MscmpSystAuthn.html#decline_instance_invite/1","title":"MscmpSystAuthn.decline_instance_invite/1","type":"function"},{"doc":"Declines an unaccepted/unexpired invitation made to an Access Account to access an Instance, referencing the record by its composite key values. This function performs the same process as decline_instance_invite/1 , but will look up the record to decline using the Access Account, Instance, and Credential Type record ID values. Parameters access_account_id - the record ID of the Access Account declining the invitation to the Instance. instance_id - the Instance record ID to which the Access Account has been invited.","ref":"MscmpSystAuthn.html#decline_instance_invite/2","title":"MscmpSystAuthn.decline_instance_invite/2","type":"function"},{"doc":"Deletes a host IP address from the Disallowed Hosts list based on either a Msdata.SystDisallowedHosts record or the ID of such a record. If the record is found and deleted a success tuple in the form {:ok, :deleted} is returned. If the record is not found the success tuple {:ok, :not_found} is returned. Once a host is removed from the Disallowed Hosts list, users are allowed to authenticate from the host, so long as no other effective Network Rule prevents the action. Parameters disallowed_host - either the fully populated Msdata.SystDisallowedHosts data struct for the record to delete or the ID of the record. Note that when the data struct is provided Ecto optimistic locking is applied to the the delete operation. Examples Deleting a host by record ID. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , target_host_record } = ...&gt; MscmpSystAuthn . get_disallowed_host_record_by_host ( ~i&quot;10.10.250.4&quot; ) iex&gt; MscmpSystAuthn . delete_disallowed_host ( target_host_record . id ) { :ok , :deleted } Deleting a host by record struct. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , target_host_record } = ...&gt; MscmpSystAuthn . get_disallowed_host_record_by_host ( ~i&quot;10.10.250.5&quot; ) iex&gt; MscmpSystAuthn . delete_disallowed_host ( target_host_record ) { :ok , :deleted } Deleting a struct for a no longer existent record. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , target_host_record } = ...&gt; MscmpSystAuthn . get_disallowed_host_record_by_host ( ~i&quot;10.10.250.6&quot; ) iex&gt; MscmpSystAuthn . delete_disallowed_host ( target_host_record ) { :ok , :deleted } iex&gt; MscmpSystAuthn . delete_disallowed_host ( target_host_record ) { :ok , :not_found }","ref":"MscmpSystAuthn.html#delete_disallowed_host/1","title":"MscmpSystAuthn.delete_disallowed_host/1","type":"function"},{"doc":"Deletes a host IP address from the Disallowed Hosts list as looked up by the host IP address. If the record is found and deleted a success tuple in the form {:ok, :deleted} is returned. If the record is not found the success tuple {:ok, :not_found} is returned. Any other condition would cause an error tuple to be returned. Once a host is removed from the Disallowed Hosts list, users are allowed to authenticate from the host, so long as no other effective Network Rule prevents the action. Parameters host_addr - the IP address of the host that is no longer to be disallowed. Examples Deleting a host that does exist in the list. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , true } = MscmpSystAuthn . host_disallowed ( ~i&quot;10.10.251.1&quot; ) iex&gt; { :ok , :deleted } = ...&gt; MscmpSystAuthn . delete_disallowed_host_addr ( ~i&quot;10.10.251.1&quot; ) iex&gt; { :ok , false } = MscmpSystAuthn . host_disallowed ( ~i&quot;10.10.251.1&quot; ) Attempting to delete a host not already on the list. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , false } = MscmpSystAuthn . host_disallowed ( ~i&quot;10.10.251.10&quot; ) iex&gt; { :ok , :not_found } = ...&gt; MscmpSystAuthn . delete_disallowed_host_addr ( ~i&quot;10.10.251.10&quot; )","ref":"MscmpSystAuthn.html#delete_disallowed_host_addr/1","title":"MscmpSystAuthn.delete_disallowed_host_addr/1","type":"function"},{"doc":"Removes a password from the disallowed passwords list. On success, this function will return a success tuple indicating if the requested password was deleted from the disallowed passwords list ( {:ok, :deleted} ) or if the password simply wasn't found in the list ( {:ok, :not_found} ). Parameters password - the plaintext password to delete from the disallowed passwords list. Examples Result when deleting a record from the list. iex&gt; MscmpSystAuthn . delete_disallowed_password ( &quot;No Longer Disallowed&quot; ) { :ok , :deleted } Result when trying to delete a record not already on the list. iex&gt; MscmpSystAuthn . delete_disallowed_password ( &quot;Not on List&quot; ) { :ok , :not_found }","ref":"MscmpSystAuthn.html#delete_disallowed_password/1","title":"MscmpSystAuthn.delete_disallowed_password/1","type":"function"},{"doc":"Deletes an existing Global Network Rule record as referenced by the record ID. On successful deletion, a simple result of :ok is returned. On error, an error tuple in the form of {:error, &lt;exception&gt;} is returned. Parameters global_network_rule_id - The record ID of the Global Network Rule record to delete.","ref":"MscmpSystAuthn.html#delete_global_network_rule/1","title":"MscmpSystAuthn.delete_global_network_rule/1","type":"function"},{"doc":"Deletes an existing Instance Network Rule record as referenced by the record ID. On successful deletion, a simple result of :ok is returned. On error, an error tuple in the form of {:error, &lt;exception&gt;} is returned. Parameters instance_network_rule_id - The record ID of the Instance Network Rule record to delete.","ref":"MscmpSystAuthn.html#delete_instance_network_rule/1","title":"MscmpSystAuthn.delete_instance_network_rule/1","type":"function"},{"doc":"Deletes an existing Owner Network Rule record as referenced by the record ID. On successful deletion, a simple result of :ok is returned. On error, an error tuple in the form of {:error, &lt;exception&gt;} is returned. Parameters owner_network_rule_id - The record ID of the Owner Network Rule record to delete.","ref":"MscmpSystAuthn.html#delete_owner_network_rule/1","title":"MscmpSystAuthn.delete_owner_network_rule/1","type":"function"},{"doc":"Deletes an Owner Password Rules record from the system. Parameters owner_id - the Owner record ID whose Password Rules are to be deleted.","ref":"MscmpSystAuthn.html#delete_owner_password_rules/1","title":"MscmpSystAuthn.delete_owner_password_rules/1","type":"function"},{"doc":"Retrieves a fully populated Access Account record as found by internal name. 'Fully populated' in this context means that the related Account Account State and related functional type data is also retrieved along with the actual Access Account data. Parameters access_account_name - the internal name of the Access Account record to retrieve. Example iex&gt; { ...&gt; :ok , ...&gt; % Msdata.SystAccessAccounts { internal_name : &quot;example_accnt&quot; } ...&gt; } = ...&gt; MscmpSystAuthn . get_access_account_by_name ( &quot;example_accnt&quot; )","ref":"MscmpSystAuthn.html#get_access_account_by_name/1","title":"MscmpSystAuthn.get_access_account_by_name/1","type":"function"},{"doc":"Looks up an Access Account record ID by its internal name. Parameters access_account_name - the internal name of the record for which to retrieve the record ID. Examples iex&gt; { :ok , access_account_id } = ...&gt; MscmpSystAuthn . get_access_account_id_by_name ( &quot;example_accnt&quot; ) iex&gt; is_binary ( access_account_id ) true","ref":"MscmpSystAuthn.html#get_access_account_id_by_name/1","title":"MscmpSystAuthn.get_access_account_id_by_name/1","type":"function"},{"doc":"Retrieves the Password Rules to apply for a requested Access Account as identified by its record ID. When evaluating the validity of candidate passwords for a user the system retrieves the Global Password Rules and then the Access Account Owner Password Rules, if such Rules have been defined. The system will compare each of the Rules in the Global and Owner Password Rules with each other and select the rule which demands the greatest stringency. This process results in a composite Password Rule which can then be applied to test any candidate password for validity. This calculated composite Password Rule is what is returned by this function. The return value is wrapped in a result tuple, {:ok, &lt;rule&gt;} on success and {:error, &lt;exception&gt;} in cases of failure. Parameters access_account_id - the Access Account record ID of the user.","ref":"MscmpSystAuthn.html#get_access_account_password_rule/1","title":"MscmpSystAuthn.get_access_account_password_rule/1","type":"function"},{"doc":"Retrieves the Password Rules to apply for a requested Access Account as identified by its record ID, raising on error. This function works the same as get_access_account_password_rule/1 except that any errors cause an exception to be raised. Parameters access_account_id - the Access Account record ID of the user.","ref":"MscmpSystAuthn.html#get_access_account_password_rule!/1","title":"MscmpSystAuthn.get_access_account_password_rule!/1","type":"function"},{"doc":"Returns the Access Account State record for the given Internal Name; raises on error. On successful execution either the requested Access Account State Enumeration record is returned or nil if the record does not exist. Parameters access_account_state_name - the Internal Name of the desire Access Account State record to return. Examples Finding a Access Account State record by Internal Name. iex&gt; % Msdata.SystEnumItems { } = ...&gt; MscmpSystAuthn . get_access_account_state_by_name ( &quot;access_account_states_sysdef_active&quot; ) Looking for a non-existent record. iex&gt; MscmpSystAuthn . get_access_account_state_by_name ( &quot;nonexistent_type&quot; ) nil","ref":"MscmpSystAuthn.html#get_access_account_state_by_name/1","title":"MscmpSystAuthn.get_access_account_state_by_name/1","type":"function"},{"doc":"Returns the Access Account State Enumeration record which is configured as being default. If no Access Account State record is configured as default, then nil is returned. Parameters functional_type - an optional parameter which, if provided and not nil , will return the default Access Account State record configured for the requested functional type rather than the system default Access Account State. The default for this parameter is to treat the parameter as not provided ( nil ). Examples Requesting the system default Access Account State. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;access_account_states_sysdef_pending&quot; } = ...&gt; MscmpSystAuthn . get_access_account_state_default ( ) Requesting the default Access Account State for a specific functional type. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;access_account_states_sysdef_inactive&quot; } = ...&gt; MscmpSystAuthn . get_access_account_state_default ( :access_account_states_inactive )","ref":"MscmpSystAuthn.html#get_access_account_state_default/1","title":"MscmpSystAuthn.get_access_account_state_default/1","type":"function"},{"doc":"Retrieves the Account Code Identity record defined for the requested Access Account if one exists. If no Account Code Identity exists for the requested Access Account a tuple in the form of {:ok, :not_found} is returned. Parameters access_account_id - the Access Account record ID for which to retrieve the Account Code Identity.","ref":"MscmpSystAuthn.html#get_account_code_by_access_account_id/1","title":"MscmpSystAuthn.get_account_code_by_access_account_id/1","type":"function"},{"doc":"Returns the Network Rule which should be applied for the given Host IP Address. This function compares the provided Host IP Address against the applicable Network Rules which apply to it and return the specific rule which should be applied during the authentication process. Network Rule Precedence The specific rules to check for applicability depends on the other provided parameters. The available Network Rule sets in order of precedence are: Disallowed Hosts : Globally disallowed hosts are always checked first and no later rule can override the denial. Only removing the host from the Disallowed Hosts List can reverse this denial. Global Network Rules : These are rules applied to all presented Host IP Addresses. Instance Network Rules : Rules defined by Instance Owners and are the most granular rule level available. These Network Rules are only evaluated if the instance_id parameter is provided. Owner Network Rules : Network Rules which are applicable to all Instances of a given Owner, provided no superseding Instance Network Rule was found. This rule set is included if either the instance_id or owner_id parameter is provided. Default Network Rule : When no explicitly defined Network Rule has been found for a host, this rule will apply implicitly. The current rule grants access from any host. Return Value This function returns a result tuple. The value element of the result tuple is a map of type MscmpSystAuthn.Types.applied_network_rule/0 . The map indicates which precedence group the rule came from, the ID of the Network Rule record if the rule was derived from the various Network Rule data tables, and the Functional Type of the rule: :allow meaning the rule explicitly allows the host to attempt an authentication, or :deny indicating that the host is not allowed to attempt authentication. Parameters host_address - the Host IP Address which the user wishes to authenticate from. instance_id - the record ID of an Instance to which the user wants to gain access. This parameter is optional, though excluding this parameter will leave the Instance Network Rules might properly apply unevaluated. If this parameter is provided, the Owner of the Instance is implied and there is no need to also supply the owner_id parameter. owner_id - the record ID of an Owner which owns the candidate Instances to which the user wishes to authenticate. This parameter is not required if the instance_id parameter has been provided. Otherwise, this parameter is optional, though if the Owner has not been resolved through this parameter or via the instance_id , the Owner Network Rules that might apply to the authentication attempt will not be applied. Examples When the host is a member of the Disallowed Hosts lists. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , %{ functional_type : :deny , network_rule_id : id , precedence : :disallowed } } = ...&gt; MscmpSystAuthn . get_applied_network_rule ( ~i&quot;10.123.123.3&quot; ) iex&gt; is_binary ( id ) true When the Host IP Address does not match any explicitly defined rule and the implicit rule applies. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MscmpSystAuthn . get_applied_network_rule ( ~i&quot;10.124.124.3&quot; ) { :ok , %{ functional_type : :allow , network_rule_id : nil , precedence : :implied } } When a Global Network Rule explicitly allows the Host IP Address to attempt authentication. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , %{ functional_type : :allow , network_rule_id : id , precedence : :global } } = ...&gt; MscmpSystAuthn . get_applied_network_rule ( ~i&quot;10.125.125.3&quot; ) iex&gt; is_binary ( id ) true Note that while the examples did not include Instance or Owner IDs, the examples are none-the-less representative of cases where they are included.","ref":"MscmpSystAuthn.html#get_applied_network_rule/3","title":"MscmpSystAuthn.get_applied_network_rule/3","type":"function"},{"doc":"Returns the Network Rule which should be applied for the given Host IP Address, raising on error. This function works the same as get_applied_network_rule/3 except this function returns its result without wrapping it in a result tuple. If an error is encountered an exception is raised. Parameters host_address - the Host IP Address which the user wishes to authenticate from. instance_id - the record ID of an Instance to which the user wants to gain access. This parameter is optional, though excluding this parameter will leave the Instance Network Rules might properly apply unevaluated. If this parameter is provided, the Owner of the Instance is implied and there is no need to also supply the owner_id parameter. owner_id - the record ID of an Owner which owns the candidate Instances to which the user wishes to authenticate. This parameter is not required if the instance_id parameter has been provided. Otherwise, this parameter is optional, though if the Owner has not been resolved through this parameter or via the instance_id , the Owner Network Rules that might apply to the authentication attempt will not be applied. Examples When the host is a member of the Disallowed Hosts lists. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; %{ functional_type : :deny , network_rule_id : id , precedence : :disallowed } = ...&gt; MscmpSystAuthn . get_applied_network_rule! ( ~i&quot;10.123.123.3&quot; ) iex&gt; is_binary ( id ) true When the Host IP Address does not match any explicitly defined rule and the implicit rule applies. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MscmpSystAuthn . get_applied_network_rule! ( ~i&quot;10.124.124.3&quot; ) %{ functional_type : :allow , network_rule_id : nil , precedence : :implied } When a Global Network Rule explicitly allows the Host IP Address to attempt authentication. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; %{ functional_type : :allow , network_rule_id : id , precedence : :global } = ...&gt; MscmpSystAuthn . get_applied_network_rule! ( ~i&quot;10.125.125.3&quot; ) iex&gt; is_binary ( id ) true Note that while the examples did not include Instance or Owner IDs, the examples are none-the-less representative of cases where they are included.","ref":"MscmpSystAuthn.html#get_applied_network_rule!/3","title":"MscmpSystAuthn.get_applied_network_rule!/3","type":"function"},{"doc":"Returns the Credential Type record for the given Internal Name; raises on error. On successful execution either the requested Credential Type Enumeration record is returned or nil if the record does not exist. Parameters credential_type_name - the Internal Name of the desire Credential Type record to return. Examples Finding a Credential Type record by Internal Name. iex&gt; % Msdata.SystEnumItems { } = ...&gt; MscmpSystAuthn . get_credential_type_by_name ( &quot;credential_types_sysdef_token_api&quot; ) Looking for a non-existent record. iex&gt; MscmpSystAuthn . get_credential_type_by_name ( &quot;nonexistent_type&quot; ) nil","ref":"MscmpSystAuthn.html#get_credential_type_by_name/1","title":"MscmpSystAuthn.get_credential_type_by_name/1","type":"function"},{"doc":"Returns the Credential Type Enumeration record which is configured as being default. If no Credential Type record is configured as default, then nil is returned. Parameters functional_type - an optional parameter which, if provided and not nil , will return the default Credential Type record configured for the requested functional type rather than the system default Credential Type. The default for this parameter is to treat the parameter as not provided ( nil ). Examples Requesting the system default Credential Type. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;credential_types_sysdef_password&quot; } = ...&gt; MscmpSystAuthn . get_credential_type_default ( ) Requesting the default Credential Type for a specific functional type. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;credential_types_sysdef_mfa_totp&quot; } = ...&gt; MscmpSystAuthn . get_credential_type_default ( :credential_types_mfa_totp )","ref":"MscmpSystAuthn.html#get_credential_type_default/1","title":"MscmpSystAuthn.get_credential_type_default/1","type":"function"},{"doc":"Retrieves a Disallowed Host record from the database as identified by its host address. Parameters host_address - the IP address of the disallowed host record to retrieve. Example Retrieving a Disallowed Host record by IP address. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , % Msdata.SystDisallowedHosts { } } = ...&gt; MscmpSystAuthn . get_disallowed_host_record_by_host ( ~i&quot;10.123.123.4&quot; ) Attempting to retrieve a record for a host not on the list. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MscmpSystAuthn . get_disallowed_host_record_by_host ( ~i&quot;10.125.120.20&quot; ) { :ok , nil }","ref":"MscmpSystAuthn.html#get_disallowed_host_record_by_host/1","title":"MscmpSystAuthn.get_disallowed_host_record_by_host/1","type":"function"},{"doc":"Retrieves a Disallowed Host record from the database as identified by its host address, raising on error. This function works the same as get_disallowed_host_record_by_host/1 except this function returns its result without wrapping it in a result tuple. If an error is encountered an exception is raised. Parameters host_address - the IP address of the disallowed host record to retrieve. Example Retrieving a Disallowed Host record by IP address. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; % Msdata.SystDisallowedHosts { } = ...&gt; MscmpSystAuthn . get_disallowed_host_record_by_host! ( ~i&quot;10.123.123.4&quot; ) Attempting to retrieve a record for a host not on the list. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MscmpSystAuthn . get_disallowed_host_record_by_host! ( ~i&quot;10.125.120.20&quot; ) nil","ref":"MscmpSystAuthn.html#get_disallowed_host_record_by_host!/1","title":"MscmpSystAuthn.get_disallowed_host_record_by_host!/1","type":"function"},{"doc":"Retrieves a Disallowed Host record by the record ID. This function assumes the record exists. If the record does not exist an error tuple will be returned. Parameters disallowed_host_id - the record ID of the Disallowed Host record to retrieve. Example Retrieving a Disallowed Host record by record ID. { :ok , % Msdata.SystDisallowedHosts { } } = MscmpSystAuthn . get_disallowed_host_record_by_id ( &quot;ad7f2030-5895-11ed-a888-0f8a20e745a9&quot; )","ref":"MscmpSystAuthn.html#get_disallowed_host_record_by_id/1","title":"MscmpSystAuthn.get_disallowed_host_record_by_id/1","type":"function"},{"doc":"Retrieves a Disallowed Host record by the record ID, raising on error. This function works the same as get_disallowed_host_record_by_id/1 except this function returns its result without wrapping it in a result tuple. If an error is encountered, including if the record does not exist, an exception is raised. Parameters disallowed_host_id - the record ID of the Disallowed Host record to retrieve. Example Retrieving a Disallowed Host record by record ID. % Msdata.SystDisallowedHosts { } = MscmpSystAuthn . get_disallowed_host_record_by_id! ( &quot;ad7f2030-5895-11ed-a888-0f8a20e745a9&quot; )","ref":"MscmpSystAuthn.html#get_disallowed_host_record_by_id!/1","title":"MscmpSystAuthn.get_disallowed_host_record_by_id!/1","type":"function"},{"doc":"Retrieves a Global Network Rule record based on its record ID. For a given Global Network Rule record ID this function will return a result tuple in the form of {:ok, &lt;record&gt;} where &lt;record&gt; is the fully populated Msdata.SystGlobalNetworkRules . If the record does not exist, then {:ok, :not_found} is returned. Otherwise, an error tuple in the form of {:error, &lt;exception&gt;} is returned. Parameters global_network_rule_id - the record ID of the desired Global Network Rule record.","ref":"MscmpSystAuthn.html#get_global_network_rule/1","title":"MscmpSystAuthn.get_global_network_rule/1","type":"function"},{"doc":"Retrieves a Global Network Rule record based on its record ID, raising on error. This function works the same as get_global_network_rule/1 except this function returns its result without wrapping it in a result tuple. If an error is encountered, including if the record does not exist, an exception is raised. Parameters global_network_rule_id - the record ID of the desired Global Network Rule record.","ref":"MscmpSystAuthn.html#get_global_network_rule!/1","title":"MscmpSystAuthn.get_global_network_rule!/1","type":"function"},{"doc":"Retrieves the currently active Global Password Rules. On successful retrieval a success tuple in the form of {:ok, &lt;record&gt;} is returned where record is a Msdata.SystGlobalPasswordRules struct. Any exceptions are returned via an error tuple.","ref":"MscmpSystAuthn.html#get_global_password_rules/0","title":"MscmpSystAuthn.get_global_password_rules/0","type":"function"},{"doc":"Retrieves the currently active Global Password Rules, raising on error. This function works the same as get_global_password_rules/0 except that any errors cause an exception to be raised.","ref":"MscmpSystAuthn.html#get_global_password_rules!/0","title":"MscmpSystAuthn.get_global_password_rules!/0","type":"function"},{"doc":"Returns the Identity Type record for the given Internal Name; raises on error. On successful execution either the requested Identity Type Enumeration record is returned or nil if the record does not exist. Parameters identity_type_name - the Internal Name of the desire Identity Type record to return. Examples Finding a Identity Type record by Internal Name. iex&gt; % Msdata.SystEnumItems { } = ...&gt; MscmpSystAuthn . get_identity_type_by_name ( &quot;identity_types_sysdef_account&quot; ) Looking for a non-existent record. iex&gt; MscmpSystAuthn . get_identity_type_by_name ( &quot;nonexistent_type&quot; ) nil","ref":"MscmpSystAuthn.html#get_identity_type_by_name/1","title":"MscmpSystAuthn.get_identity_type_by_name/1","type":"function"},{"doc":"Returns the Identity Type Enumeration record which is configured as being default. If no Identity Type record is configured as default, then nil is returned. Parameters functional_type - an optional parameter which, if provided and not nil , will return the default Identity Type record configured for the requested functional type rather than the system default Identity Type. The default for this parameter is to treat the parameter as not provided ( nil ). Examples Requesting the system default Identity Type. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;identity_types_sysdef_email&quot; } = ...&gt; MscmpSystAuthn . get_identity_type_default ( ) Requesting the default Identity Type for a specific functional type. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;identity_types_sysdef_api&quot; } = ...&gt; MscmpSystAuthn . get_identity_type_default ( :identity_types_api )","ref":"MscmpSystAuthn.html#get_identity_type_default/1","title":"MscmpSystAuthn.get_identity_type_default/1","type":"function"},{"doc":"Retrieves a Instance Network Rule record based on its record ID. For a given Instance Network Rule record ID this function will return a result tuple in the form of {:ok, &lt;record&gt;} where &lt;record&gt; is the fully populated Msdata.SystInstanceNetworkRules . If the record does not exist, then {:ok, :not_found} is returned. Otherwise, an error tuple in the form of {:error, &lt;exception&gt;} is returned. Parameters instance_network_rule_id - the record ID of the desired Instance Network Rule record.","ref":"MscmpSystAuthn.html#get_instance_network_rule/1","title":"MscmpSystAuthn.get_instance_network_rule/1","type":"function"},{"doc":"Retrieves a Instance Network Rule record based on its record ID, raising on error. This function works the same as get_instance_network_rule/1 except this function returns its result without wrapping it in a result tuple. If an error is encountered, including if the record does not exist, an exception is raised. Parameters instance_network_rule_id - the record ID of the desired Instance Network Rule record.","ref":"MscmpSystAuthn.html#get_instance_network_rule!/1","title":"MscmpSystAuthn.get_instance_network_rule!/1","type":"function"},{"doc":"Retrieves a Owner Network Rule record based on its record ID. For a given Owner Network Rule record ID this function will return a result tuple in the form of {:ok, &lt;record&gt;} where &lt;record&gt; is the fully populated Msdata.SystOwnerNetworkRules . If the record does not exist, then {:ok, :not_found} is returned. Otherwise, an error tuple in the form of {:error, &lt;exception&gt;} is returned. Parameters owner_network_rule_id - the record ID of the desired Owner Network Rule record.","ref":"MscmpSystAuthn.html#get_owner_network_rule/1","title":"MscmpSystAuthn.get_owner_network_rule/1","type":"function"},{"doc":"Retrieves a Owner Network Rule record based on its record ID, raising on error. This function works the same as get_owner_network_rule/1 except this function returns its result without wrapping it in a result tuple. If an error is encountered, including if the record does not exist, an exception is raised. Parameters owner_network_rule_id - the record ID of the desired Owner Network Rule record.","ref":"MscmpSystAuthn.html#get_owner_network_rule!/1","title":"MscmpSystAuthn.get_owner_network_rule!/1","type":"function"},{"doc":"Retrieves the currently active Owner Password Rules for the requested Owner. On successful retrieval a success tuple in the form of {:ok, &lt;record&gt;} is returned where &lt;record&gt; is a populated Msdata.SystownerPasswordRules struct if Password Rules for the requested Owner was found or nil otherwise. Any exceptions are returned via an error tuple. Parameters owner_id - the Owner record ID for whom to retrieve Password Rules.","ref":"MscmpSystAuthn.html#get_owner_password_rules/1","title":"MscmpSystAuthn.get_owner_password_rules/1","type":"function"},{"doc":"Retrieves the currently active Owner Password Rules for the requested Owner, raising on error. This function works the same as get_owner_password_rules/1 except that any errors cause an exception to be raised. Parameters owner_id - the Owner record ID for whom to retrieve Password Rules.","ref":"MscmpSystAuthn.html#get_owner_password_rules!/1","title":"MscmpSystAuthn.get_owner_password_rules!/1","type":"function"},{"doc":"Indicates whether the provided host IP address is to be denied access to the system. This function returns a tuple in the form of {:ok, &lt;disallowed&gt;} where the disallowed value is either true meaning that the requested host is disallowed from authenticating with the system or false if the host is permitted to attempt an authentication. Parameters host_address - the host IP address to test. Typically this will be the host address of a user wishing to authenticate with the system. Examples An allowed host will return a false result tuple. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MscmpSystAuthn . host_disallowed ( ~i&quot;10.150.150.10&quot; ) { :ok , false } A disallowed host returns a true result tuple. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MscmpSystAuthn . host_disallowed ( ~i&quot;10.123.123.5&quot; ) { :ok , true }","ref":"MscmpSystAuthn.html#host_disallowed/1","title":"MscmpSystAuthn.host_disallowed/1","type":"function"},{"doc":"Indicates whether the provided host IP address is to be denied access to the system, raising on error. This function works the same as host_disallowed/1 except this function returns its result without wrapping it in a result tuple. If an error is encountered an exception is raised. Parameters host_address - the host IP address to test. Typically this will be the host address of a user wishing to authenticate with the system. Examples An allowed host will return a false value. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MscmpSystAuthn . host_disallowed? ( ~i&quot;10.150.150.10&quot; ) false A disallowed host returns a true value. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MscmpSystAuthn . host_disallowed? ( ~i&quot;10.123.123.5&quot; ) true","ref":"MscmpSystAuthn.html#host_disallowed?/1","title":"MscmpSystAuthn.host_disallowed?/1","type":"function"},{"doc":"Identifies an Access Account by its Account Code identifier. On successful identification, the Account Code Identity record which was found based on the supplied parameters is returned via a success tuple. If the function completes successfully but no Identity record is found for the Identifier a value of {:ok, :not_found} is returned. Parameters account_code - the Account Code identifier which will identify the Access Account owner_id - if the expected Access Account is an Owned Access Account, the Owner must be identified. If the Access Account is Unowned, this parameter should be nil .","ref":"MscmpSystAuthn.html#identify_access_account_by_code/2","title":"MscmpSystAuthn.identify_access_account_by_code/2","type":"function"},{"doc":"Invites or re-invites an Access Account to establish access rights to a specific Instance. The invitation process creates a syst_access_account_instance_assocs record for the requested Access Account and Instance and sets the invitation_issued field to the current date/time. Re-invitation will update an existing syst_access_account_instance_assocs record resetting invite data such as the invitation expiration date or resetting the declined state if the record was previously declined by the Access Account holder. Once a syst_access_account_instance_assocs record is accepted, it may not be re- invited again using this process until the record is revoked (deleted). syst_access_account_instance_assocs are unique to the Access Account and Instance combination and only one such record may exist for that combination at any one time. Parameters access_account_id - the record ID of the Access Account to invite to the Instance. instance_id - the Instance record ID to which the Access Account is being invited. opts - a keyword list of optional parameters used to set record values and behaviors. Available options are: create_accepted - will create a syst_access_account_instance_assocs record which is already accepted when set true . The default value is false . expiration_days - for records that are not created as accepted and act as true invitations, this option sets the number of days in which an Access Account holder may accept the invitation. After this time the invitation is considered expired and must be re-invited before it can be used to grant access again. The default value for this option is 30 days.","ref":"MscmpSystAuthn.html#invite_to_instance/3","title":"MscmpSystAuthn.invite_to_instance/3","type":"function"},{"doc":"Indicates whether the requested password is disallowed. This function returns a tuple in the form of {:ok, &lt;disallowed&gt;} where the disallowed value is either true meaning that the requested password is disallowed or false if the password is available for use. Regardless of the return of this function, disallowed passwords are only prevented for use if the effective disallow_compromised Password Rule for the Access Account attempting authentication is set. Parameters password - the plaintext password to test for disallowed status. Examples When a password has been previously disallowed and cannot be used as a user credential. iex&gt; MscmpSystAuthn . password_disallowed ( &quot;Is Disallowed&quot; ) { :ok , true } When a password has not been previously disallowed. iex&gt; MscmpSystAuthn . password_disallowed ( &quot;Is Not Disallowed&quot; ) { :ok , false }","ref":"MscmpSystAuthn.html#password_disallowed/1","title":"MscmpSystAuthn.password_disallowed/1","type":"function"},{"doc":"Indicates whether the requested password is disallowed, raising on error. This function works the same as disallowed_password/1 except this function returns a simple boolean value rather than a result tuple. If an error is encountered an exception is raised. Parameters password - the plaintext password to test for disallowed status. Examples When a password has been previously disallowed and cannot be used as a user credential. iex&gt; MscmpSystAuthn . password_disallowed? ( &quot;Is Disallowed&quot; ) true When a password has not been previously disallowed. iex&gt; MscmpSystAuthn . password_disallowed? ( &quot;Is Not Disallowed&quot; ) false","ref":"MscmpSystAuthn.html#password_disallowed?/1","title":"MscmpSystAuthn.password_disallowed?/1","type":"function"},{"doc":"Purges the requested Access Account if the Access Account State is of a purge eligible functional type. Parameters access_account - is either the record ID of the Access Account to purge or the populated Msdata.SystAccessAccounts struct representing the record to purge. Example iex&gt; { :ok , target_access_account } = ...&gt; MscmpSystAuthn . get_access_account_by_name ( &quot;example_purge_accnt&quot; ) iex&gt; MscmpSystAuthn . purge_access_account ( target_access_account ) :ok","ref":"MscmpSystAuthn.html#purge_access_account/1","title":"MscmpSystAuthn.purge_access_account/1","type":"function"},{"doc":"Requests the creation of a Validation Token Authenticator for the specified Identity. On successful creation of the requested Validation Token Authenticator, an Authenticator Result will be returned as the value element of a success tuple: { :ok , %{ access_account_id : &quot;c3c7fafd-5c45-11ed-ab46-f3d9be809bf9&quot; , validation_identifier : &quot;psYFOfuULJPTbs5MUvOYTyt71fAbQCj7XcmerRlQ&quot; , validation_credential : &quot;zz29w7l5Ev7vuRlGFHcPPjLTXjepdbYlyQwbBjDe&quot; } } Importantly, the system generated Validation Token identifier and plaintext credential are returned to the caller. This is the only opportunity to obtain the plaintext credential; after the return value of the function is disposed of there is no way to once again retrieve the plaintext of the Validation Token Credential. Once the Validation Token Authenticator has been successfully created, the target Identity (typically an Email Identity) may not be used for authentication until the Validation Token itself has been successfully authenticated via the authenticate_validation_token/4 function. The created Validation Token Authenticator will expire after a time. After expiration the the Authenticator will no longer be to be authenticated by authenticate_validation_token/4 . The only way to validate the target Identity at that point is to create a new Validation Token Authenticator for the Identity using this function. Parameters target_identity - either the record ID or the Msdata.SystIdentities struct of the Identity record to validate. Typically this Identity will be an Email Identity. opts - a Keyword List of options which can change the behavior to the Identity validation request. The available options are: expiration_hours - overrides the default number of hours after which to consider the Validation Authenticator expired. By default the Validation Authenticator expires 24 hours after creation. identity_token_length - this option overrides the default number of random characters to generate for the Validation Token Identity identifier. The default number of characters generated is 40. identity_tokens - overrides the default character set to use in the generation of the Validation Token Identity identifier. The default value is :mixed_alphanum . See the MscmpSystUtils.get_random_string/2 documentation for the tokens parameter which receives this option for more information regarding valid values for this setting. credential_token_length - this option overrides the default number of random characters to generate for the Validation Token Credential. The default number of characters generated is 40. credential_tokens - overrides the default character set to use in the generation of the Validation Token Credential. The default value is :mixed_alphanum . See the MscmpSystUtils.get_random_string/2 documentation for the tokens parameter which receives this option for more information regarding valid values for this setting. credential_token - overrides the system generated Validation Credential with the value of this option. The default is to allow the system to automatically generate the credential.","ref":"MscmpSystAuthn.html#request_identity_validation/2","title":"MscmpSystAuthn.request_identity_validation/2","type":"function"},{"doc":"Requests to start a Password Credential recovery process for the specified Access Account. Assuming that the Access Account's Password Credential exists and isn't already being recovered, this function will create a new Recovery Token Authenticator for the Access Account's Password Credential. On successful creation of the requested Recovery Token Authenticator, an Authenticator Result will be returned as the value element of a success tuple: { :ok , %{ access_account_id : &quot;c3c7fafd-5c45-11ed-ab46-f3d9be809bf9&quot; , account_identifier : &quot;acdyItesdmUvUoM7mKwPKd3mrBBnH87L2WA1DPip&quot; , credential : &quot;WYbFG2vkJOLD5ITX9tSE5OTZ9JlHdJE8BQ8Ukiiq&quot; } } Importantly, the system generated Recovery Token account identifier and plaintext credential are returned to the caller. This is the only opportunity to obtain the plaintext credential; after the return value of the function is disposed of there is no way to once again retrieve the plaintext of the Recovery Token Credential. The existence of a Recovery Token Authenticator for a Password Credential does not prevent that Password Credential from continuing to be used in the authentication process. A Recovery Token Authenticator will expire after a time. After expiration the Recovery Token will no longer be able to be authenticated with authenticate_recovery_token/4 . Any further recovery of the Password Credential will require a new Recovery Token be created. Parameters access_account_id - the record ID of the Access Account to which the Password Credential needing recovering belongs. opts - a Keyword List of options which can change the behavior to the password recovery request. The available options are: expiration_hours - overrides the default number of hours after which to consider the Recovery Authenticator expired. By default the Recovery Authenticator expires 24 hours after creation. identity_token_length - this option overrides the default number of random characters to generate for the Recovery Token Identity identifier. The default number of characters generated is 40. identity_tokens - overrides the default character set to use in the generation of the Recovery Token Identity identifier. The default value is :mixed_alphanum . See the MscmpSystUtils.get_random_string/2 documentation for the tokens parameter which receives this option for more information regarding valid values for this setting. credential_token_length - this option overrides the default number of random characters to generate for the Recovery Token Credential. The default number of characters generated is 40. credential_tokens - overrides the default character set to use in the generation of the Recovery Token Credential. The default value is :mixed_alphanum . See the MscmpSystUtils.get_random_string/2 documentation for the tokens parameter which receives this option for more information regarding valid values for this setting. credential_token - overrides the system generated Recovery Credential with the value of this option. The default is to allow the system to automatically generate the credential.","ref":"MscmpSystAuthn.html#request_password_recovery/2","title":"MscmpSystAuthn.request_password_recovery/2","type":"function"},{"doc":"Revokes a previously create Account Code Identity from an Access Account, deleting it from the system. On successful deletion a success tuple in the form {:ok, :deleted} is returned. If no existing Account Code Identity is found a tuple in this form {:ok, :not_found} is returned. All other outcomes are error conditions resulting in the return of an error tuple. Parameters access_account_id - the Access Account record ID from which to revoke the Account Code Identity.","ref":"MscmpSystAuthn.html#revoke_account_code/1","title":"MscmpSystAuthn.revoke_account_code/1","type":"function"},{"doc":"Revokes the request API Token Authenticator by deleting it from the system. API Token Authenticators will regularly need to be decommissioned from the system by the Access Account holders they represent. By revoking an API Token it is deleted from system. A successful deletion will return a success tuple if the form {:ok, :deleted} . If the API Token Identity is not found this function will return a success tuple of {:ok, :not_found} . Any other outcome is an error and results in an error tuple being returned. Parameters identity - either the record ID of the API Token Identity to revoke or the current-state Msdata.SystIdentities struct of that record.","ref":"MscmpSystAuthn.html#revoke_api_token/1","title":"MscmpSystAuthn.revoke_api_token/1","type":"function"},{"doc":"Revokes the access or invitation to access an Instance from the given Access Account. Simply put, Access Accounts are both invited and granted access to Instances via Access Account Instance Association records (see: Msdata.SystAccessAccountInstanceAssocs ) and this function deletes those records. This has the effect of revoking the invitation to access an Instance from the Access Account/Credential Type combination. Records in any state of invited, accepted, or declined may be revoked/deleted using this function. Parameters access_account_instance_assoc - this value may be either the populated Msdata.SystAccessAccountInstanceAssocs struct to revoke or the record ID of the record to revoke.","ref":"MscmpSystAuthn.html#revoke_instance_access/1","title":"MscmpSystAuthn.revoke_instance_access/1","type":"function"},{"doc":"Revokes the access or invitation to access an Instance from the given Access Account/Credential Type combination, referencing the record by its composite key values. This function performs the same action as revoke_instance_access/1 but identified the record being revoked (deleted) using its composite/candidate key values. Parameters access_account_id - the record ID of the Access Account from which the invitation to access is being revoked. instance_id - the Instance record ID from which the Access Account had previously been invited to access.","ref":"MscmpSystAuthn.html#revoke_instance_access/2","title":"MscmpSystAuthn.revoke_instance_access/2","type":"function"},{"doc":"Revokes the Recovery Token Authenticator for a previously initiated Password Credential recovery. While Recovery Token Authenticators expire of their own accord after a time, they may also explicitly be revoked. In reality this means simply deleting the Recovery Token Authenticator from the system. The return value of this function on successful execution will be the success tuple {:ok, :deleted} . If a recovery is not already underway for the requested Access Account, the function will return successfully but will indicate that no action took place with a return of {:ok, :not_found} . Any other condition is an error condition and the return value will be an error tuple indicating the nature of the issue. Parameters access_account_id - identifies the Access Account for whom the Recovery Token Authenticator should be revoked. The expected value is the record ID of the Access Account.","ref":"MscmpSystAuthn.html#revoke_password_recovery/1","title":"MscmpSystAuthn.revoke_password_recovery/1","type":"function"},{"doc":"Revokes a Validation Authenticator (&quot;Validator&quot;) issued for the requested Identity. While Validators will expire on their own if not confirmed first, there are cases where Validators should be revoked prior to that time, such as if the Validator communication to the user has been lost and a new Validator needs to be generated. The return value is a result tuple which indicates whether or not the revocation happened ( {:ok, :deleted} ), if the Validator was not found ( {:ok, :not_found} ), or an error tuple in any other circumstance. Parameters target_identity_id - the record ID of the Identity record which the Validator was meant to validate. So if the Validator to revoke was for an Email Identity, this value would be the ID of the Email Identity and not the Validation Identity.","ref":"MscmpSystAuthn.html#revoke_validator_for_identity_id/1","title":"MscmpSystAuthn.revoke_validator_for_identity_id/1","type":"function"},{"doc":"Tests a candidate password against the effective Password Rules for a given Access Account. Prior to attempting to save a Password Credential, it should be tested for compliance with the Global Password Rules and any Owner Password Rules that exist for the Owner of the Access Account. This function performs that test and will return all of the violations detected. If no issues are detected, a success tuple with a value of empty list will be returned ( {:ok, []} ). Note that this function is recommended to run prior to attempting to save a Password Credential, but is not required. Any function which can save a new password to the database will independently test the candidate password against the effective Password Rules prior to saving the Credential, erroring on any invalid password. Parameters access_account_id - the record ID of the Access Account for whom to perform the test. The applicable Password Rules may derive from the Access Account Owner if the Access Account is in fact owned. plaintext_pwd - the candidate Password to test against the rules. Examples A successful password test. iex&gt; { :ok , access_account_id } = ...&gt; MscmpSystAuthn . get_access_account_id_by_name ( &quot;example_accnt&quot; ) iex&gt; MscmpSystAuthn . test_credential ( access_account_id , &quot;A Passing Password.&quot; ) { :ok , [ ] } An invalid password test. iex&gt; { :ok , access_account_id } = ...&gt; MscmpSystAuthn . get_access_account_id_by_name ( &quot;example_accnt&quot; ) iex&gt; MscmpSystAuthn . test_credential ( access_account_id , &quot;short&quot; ) { :ok , [ password_rule_length_min : 8 ] }","ref":"MscmpSystAuthn.html#test_credential/2","title":"MscmpSystAuthn.test_credential/2","type":"function"},{"doc":"Updates the maintainable fields of a given Access Account record. Parameters access_account - either the record ID value of the Access Account to update or is the complete Msdata.SystAccessAccounts struct representing the before-update state of the Access Account record. access_account_params - a map containing those attributes to be changed along with their new values. Example iex&gt; { :ok , target_access_account } = ...&gt; MscmpSystAuthn . get_access_account_by_name ( &quot;example_accnt&quot; ) iex&gt; { :ok , updated_access_account } = ...&gt; MscmpSystAuthn . update_access_account ( ...&gt; target_access_account , ...&gt; %{ external_name : &quot;Updated Example Account Name&quot; } ...&gt; ) iex&gt; % Msdata.SystAccessAccounts { ...&gt; external_name : &quot;Updated Example Account Name&quot; ...&gt; } = updated_access_account","ref":"MscmpSystAuthn.html#update_access_account/2","title":"MscmpSystAuthn.update_access_account/2","type":"function"},{"doc":"Updates the External Name value of an existing API Token Identity. API Token Identities permit Access Account holder naming of the Identity as it may be common for an one Access Account to require multiple API Token Authenticators for different purposes. On success this function returns a success tuple where the value element of the tuple is the updated Msdata.SystIdentities struct. On error, an error tuple is returned. Parameters identity - either the record ID of the API Token Identity to update or the current-state Msdata.SystIdentities struct of that record. external_name - the text of the updated External Name value or nil to remove the text of an existing non-nil value.","ref":"MscmpSystAuthn.html#update_api_token_external_name/2","title":"MscmpSystAuthn.update_api_token_external_name/2","type":"function"},{"doc":"Updates an existing Global Network Rule with new values. This function works similar to create_global_network_rule/1 but updates an existing Global Network Rule record rather than creating a new one. On successful update, a result tuple in the form {:ok, &lt;record&gt;} is returned where the &lt;record&gt; is the fully populated Data struct of the record just updated. If an exception is raised this function will return a failure tuple in the form of {:error, &lt;exception data&gt;} . Parameters global_network_rule - this value is either a fully populated Msdata.SystGlobalNetworkRules struct of an existing Global Network Rule record or the ID of such a record. If the data struct is provided, Ecto optimistic locking is applied to the update operation. update_params - a map representing the values to use when updating the Global Network Rule. All parameters are optional, with omission meaning that the existing value should retain its current value. See MscmpSystAuthn.Types.global_network_rule_params/0 for the available attributes.","ref":"MscmpSystAuthn.html#update_global_network_rule/2","title":"MscmpSystAuthn.update_global_network_rule/2","type":"function"},{"doc":"Updates the Global Password Rules with new values. The Global Password Rules are created at system installation time with a default and recommended set of values, but these values may be customized as desired any time after installation. Note that the original Global Password Rules data will be retrieved for use in the update process and that no Ecto optimistic locking will be employed with this update. Parameters update_params - a map of the values to use when updating the Global Password Rules record. See MscmpSystAuthn.Types.password_rule_params/0 for details regarding the available attributes.","ref":"MscmpSystAuthn.html#update_global_password_rules/1","title":"MscmpSystAuthn.update_global_password_rules/1","type":"function"},{"doc":"Updates the Global Password Rules with new values using a caller provided data source record. This function works the same as described in create_update_global_password_rules/1 except that in this version the caller must also provide a source data struct to act as the basis of the update. Ecto optimistic locking will be applied to the update process. Parameters global_password_rules - a fully populated Msdata.SystGlobalPasswordRules record representing the state of the Global Password Rules prior to the change. update_params - a map of the values to use when updating the Global Password Rules record. See MscmpSystAuthn.Types.password_rule_params/0 for details regarding the available attributes.","ref":"MscmpSystAuthn.html#update_global_password_rules/2","title":"MscmpSystAuthn.update_global_password_rules/2","type":"function"},{"doc":"Updates an existing Instance Network Rule with new values. This function works similar to create_instance_network_rule/2 but updates an existing Instance Network Rule record rather than creating a new one. On successful update, a result tuple in the form {:ok, &lt;record&gt;} is returned where the &lt;record&gt; is the fully populated Data struct of the record just updated. If an exception is raised this function will return a failure tuple in the form of {:error, &lt;exception data&gt;} . Parameters instance_network_rule - this value is either a fully populated Msdata.SystInstanceNetworkRules struct of an existing Instance Network Rule record or the ID of such a record. If the data struct is provided, Ecto optimistic locking is applied to the update operation. update_params - a map representing the values to use when updating the Instance Network Rule. All parameters are optional, with omission meaning that the existing value should retain its current value. See MscmpSystAuthn.Types.instance_network_rule_params/0 for the available attributes.","ref":"MscmpSystAuthn.html#update_instance_network_rule/2","title":"MscmpSystAuthn.update_instance_network_rule/2","type":"function"},{"doc":"Updates an existing Owner Network Rule with new values. This function works similar to create_owner_network_rule/2 but updates an existing Owner Network Rule record rather than creating a new one. On successful update, a result tuple in the form {:ok, &lt;record&gt;} is returned where the &lt;record&gt; is the fully populated Data struct of the record just updated. If an exception is raised this function will return a failure tuple in the form of {:error, &lt;exception data&gt;} . Parameters owner_network_rule - this value is either a fully populated Msdata.SystOwnerNetworkRules struct of an existing Owner Network Rule record or the ID of such a record. If the data struct is provided, Ecto optimistic locking is applied to the update operation. update_params - a map representing the values to use when updating the Owner Network Rule. All parameters are optional, with omission meaning that the existing value should retain its current value. See MscmpSystAuthn.Types.owner_network_rule_params/0 for the available attributes.","ref":"MscmpSystAuthn.html#update_owner_network_rule/2","title":"MscmpSystAuthn.update_owner_network_rule/2","type":"function"},{"doc":"Updates the Owner Password Rules with new values. After creation, Owner Password Rules may be updated with new values as might meet the specific needs of the Owner. Parameters owner - the record ID of the Owner for whom the Password Rules are being updated or the fully populated data struct representing the current Owner Password Rules. Note that if the data struct is provided Ecto optimistic locking will be in effect. update_params - a map of the values to use when updating the Owner Password Rules record. See MscmpSystAuthn.Types.password_rule_params/0 for details regarding the available attributes.","ref":"MscmpSystAuthn.html#update_owner_password_rules/2","title":"MscmpSystAuthn.update_owner_password_rules/2","type":"function"},{"doc":"Compares a &quot;Test&quot; set of Password Rules against a &quot;Standard&quot; set of Password Rules and reports on which of the &quot;Test&quot; Rules are considered less stringent than the &quot;Standard&quot; Rules. The primary use case for this function is to test how Owner Password Rules (&quot;Test&quot; Rules) compare against the Global Password Rules (&quot;Standard&quot; Rules), but the function can compare any two rules. The return value of this function is wrapped in a result tuple. A result of {:ok, &lt;rule violations&gt;} is returned on success and an error tuple in the form of {:error, &lt;exception&gt;} is returned on error. The &lt;rule violations&gt; value is a Keyword List where each tuple's key represents the rule violated and the tuple's value is the required value for that rule; whether the required value is a minimum or maximum depends on the nature of the specific rule being reported. Parameters test_rules - a Password Rule which will be tested against the value of the standard_rules . Where the test_rules are less stringent than the standard_rules , a violation is reported in the result. standard_rules - the &quot;Standard&quot; against which the test_rules are judged. This parameter is optional and when nil the Global Password Rule is retrieved and used as the default &quot;Standard&quot; Rules. Otherwise either a generic MscmpSystAuthn.Types.password_rules/0 value or a populated Msdata.SystGlobalPasswordRules data struct may be provided.","ref":"MscmpSystAuthn.html#verify_password_rules/2","title":"MscmpSystAuthn.verify_password_rules/2","type":"function"},{"doc":"Compares a &quot;Test&quot; set of Password Rules against a &quot;Standard&quot; set of Password Rules and reports on which of the &quot;Test&quot; Rules are considered less stringent than the &quot;Standard&quot; Rules, raising on error. This function works the same as verify_password_rules/2 except that any errors cause an exception to be raised. Parameters test_rules - a Password Rule which will be tested against the value of the standard_rules . Where the test_rules are less stringent than the standard_rules , a violation is reported in the result. standard_rules - the &quot;Standard&quot; against which the test_rules are judged. This parameter is optional and when nil the Global Password Rule is retrieved and used as the default &quot;Standard&quot; Rules. Otherwise either a generic MscmpSystAuthn.Types.password_rules/0 value or a populated Msdata.SystGlobalPasswordRules data struct may be provided.","ref":"MscmpSystAuthn.html#verify_password_rules!/2","title":"MscmpSystAuthn.verify_password_rules!/2","type":"function"},{"doc":"Associates access accounts with the instances for which they are allowed to authenticate to. Note that being able to authenticate to an instance is not the same as having authorized rights within the instance; authorization is handled by the instance directly. Defined in MscmpSystAuthn .","ref":"Msdata.SystAccessAccountInstanceAssocs.html","title":"Msdata.SystAccessAccountInstanceAssocs","type":"module"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystAccessAccountInstanceAssocs.insert_changeset/1 .","ref":"Msdata.SystAccessAccountInstanceAssocs.html#insert_changeset/1","title":"Msdata.SystAccessAccountInstanceAssocs.insert_changeset/1","type":"function"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystAccessAccountInstanceAssocs.update_changeset/2 .","ref":"Msdata.SystAccessAccountInstanceAssocs.html#update_changeset/2","title":"Msdata.SystAccessAccountInstanceAssocs.update_changeset/2","type":"function"},{"doc":"","ref":"Msdata.SystAccessAccountInstanceAssocs.html#t:t/0","title":"Msdata.SystAccessAccountInstanceAssocs.t/0","type":"type"},{"doc":"Contains the known login accounts which are used solely for the purpose of authentication of users. Authorization is handled on a per-instance basis within the application. Defined in MscmpSystAuthn","ref":"Msdata.SystAccessAccounts.html","title":"Msdata.SystAccessAccounts","type":"module"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystAccessAccounts.insert_changeset/2 .","ref":"Msdata.SystAccessAccounts.html#insert_changeset/2","title":"Msdata.SystAccessAccounts.insert_changeset/2","type":"function"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystAccessAccounts.update_changeset/3 .","ref":"Msdata.SystAccessAccounts.html#update_changeset/3","title":"Msdata.SystAccessAccounts.update_changeset/3","type":"function"},{"doc":"","ref":"Msdata.SystAccessAccounts.html#t:t/0","title":"Msdata.SystAccessAccounts.t/0","type":"type"},{"doc":"Hosts the credentials by which a user or external system will prove its identity. Note that not all credential types are available for authentication with all identity types. Defined in MscmpSystAuthn .","ref":"Msdata.SystCredentials.html","title":"Msdata.SystCredentials","type":"module"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystCredentials.insert_changeset/1 .","ref":"Msdata.SystCredentials.html#insert_changeset/1","title":"Msdata.SystCredentials.insert_changeset/1","type":"function"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystCredentials.update_changeset/2 .","ref":"Msdata.SystCredentials.html#update_changeset/2","title":"Msdata.SystCredentials.update_changeset/2","type":"function"},{"doc":"","ref":"Msdata.SystCredentials.html#t:t/0","title":"Msdata.SystCredentials.t/0","type":"type"},{"doc":"A simple listing of &quot;banned&quot; IP address which are not allowed to authenticate their users to the system. This registry differs from the syst_*_network_rules tables in that IP addresses here are registered as the result of automatic system heuristics whereas the network rules are direct expressions of system administrator intent. The timing between these two mechanisms is also different in that records in this table are evaluated prior to an authentication attempt and most network rules are processed in the authentication attempt sequence. Defined in MscmpSystAuthn .","ref":"Msdata.SystDisallowedHosts.html","title":"Msdata.SystDisallowedHosts","type":"module"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystDisallowedHosts.insert_changeset/1 .","ref":"Msdata.SystDisallowedHosts.html#insert_changeset/1","title":"Msdata.SystDisallowedHosts.insert_changeset/1","type":"function"},{"doc":"","ref":"Msdata.SystDisallowedHosts.html#t:t/0","title":"Msdata.SystDisallowedHosts.t/0","type":"type"},{"doc":"Represents a SHA-1 hashed password which is expected to be listed in the dictionaries used by attackers to compromised online accounts. Disallowed passwords, as the name suggests, are used to prevent users selecting these known compromised passwords when the password rule to disallow known passwords is in effect. Defined in MscmpSystAuthn .","ref":"Msdata.SystDisallowedPasswords.html","title":"Msdata.SystDisallowedPasswords","type":"module"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystDisallowedPasswords.insert_changeset/1 .","ref":"Msdata.SystDisallowedPasswords.html#insert_changeset/1","title":"Msdata.SystDisallowedPasswords.insert_changeset/1","type":"function"},{"doc":"","ref":"Msdata.SystDisallowedPasswords.html#t:t/0","title":"Msdata.SystDisallowedPasswords.t/0","type":"type"},{"doc":"Expresses globally applicable rules concerning which hosts, as identified by IP address, may or may not attempt to authenticate with the system. These are part of a firewall-like set of rules of which those defined in this 'global' scope are applied prior to any SystOwnerNetworkRules and SystInstanceNetworkRules . Defined in MscmpSystAuthn .","ref":"Msdata.SystGlobalNetworkRules.html","title":"Msdata.SystGlobalNetworkRules","type":"module"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystGlobalNetworkRules.insert_changeset/1 .","ref":"Msdata.SystGlobalNetworkRules.html#insert_changeset/1","title":"Msdata.SystGlobalNetworkRules.insert_changeset/1","type":"function"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystGlobalNetworkRules.update_changeset/2 .","ref":"Msdata.SystGlobalNetworkRules.html#update_changeset/2","title":"Msdata.SystGlobalNetworkRules.update_changeset/2","type":"function"},{"doc":"","ref":"Msdata.SystGlobalNetworkRules.html#t:t/0","title":"Msdata.SystGlobalNetworkRules.t/0","type":"type"},{"doc":"Establishes rules defining the minimum allowed password complexity on a global, whole system basis. Rules defined here may be further strengthened by rules defined by SystOwnerPasswordRules , but may not be weakened by those definitions. Defined in MscmpSystAuthn .","ref":"Msdata.SystGlobalPasswordRules.html","title":"Msdata.SystGlobalPasswordRules","type":"module"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystGlobalPasswordRules.update_changeset/2 .","ref":"Msdata.SystGlobalPasswordRules.html#update_changeset/2","title":"Msdata.SystGlobalPasswordRules.update_changeset/2","type":"function"},{"doc":"","ref":"Msdata.SystGlobalPasswordRules.html#t:t/0","title":"Msdata.SystGlobalPasswordRules.t/0","type":"type"},{"doc":"The identities with which access accounts are identified to the system. The most common example of an identity would be a user name such as an email address. Defined in MscmpSystAuthn .","ref":"Msdata.SystIdentities.html","title":"Msdata.SystIdentities","type":"module"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystIdentities.insert_changeset/1 .","ref":"Msdata.SystIdentities.html#insert_changeset/1","title":"Msdata.SystIdentities.insert_changeset/1","type":"function"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystIdentities.update_changeset/2 .","ref":"Msdata.SystIdentities.html#update_changeset/2","title":"Msdata.SystIdentities.update_changeset/2","type":"function"},{"doc":"","ref":"Msdata.SystIdentities.html#t:t/0","title":"Msdata.SystIdentities.t/0","type":"type"},{"doc":"Expresses Instance specific rules concerning which hosts, as identified by IP address, may or may not attempt to authenticate with the system. These are part of a firewall-like set of rules of which those defined in this 'instance' scope are evaluated after any SystGlobalNetworkRules and SystOwnerNetworkRules defined rules have been processed. Defined in MscmpSystAuthn .","ref":"Msdata.SystInstanceNetworkRules.html","title":"Msdata.SystInstanceNetworkRules","type":"module"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystInstanceNetworkRules.insert_changeset/1 .","ref":"Msdata.SystInstanceNetworkRules.html#insert_changeset/1","title":"Msdata.SystInstanceNetworkRules.insert_changeset/1","type":"function"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystInstanceNetworkRules.update_changeset/2 .","ref":"Msdata.SystInstanceNetworkRules.html#update_changeset/2","title":"Msdata.SystInstanceNetworkRules.update_changeset/2","type":"function"},{"doc":"","ref":"Msdata.SystInstanceNetworkRules.html#t:t/0","title":"Msdata.SystInstanceNetworkRules.t/0","type":"type"},{"doc":"Expresses Owner specific rules concerning which hosts, as identified by IP address, may or may not attempt to authenticate with the system. These are part of a firewall-like set of rules of which those defined in this 'owner' scope are evaluated after any SystGlobalNetworkRules defined rules and prior to any SystInstanceNetworkRules defined rules. Defined in MscmpSystAuthn .","ref":"Msdata.SystOwnerNetworkRules.html","title":"Msdata.SystOwnerNetworkRules","type":"module"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystOwnerNetworkRules.insert_changeset/1 .","ref":"Msdata.SystOwnerNetworkRules.html#insert_changeset/1","title":"Msdata.SystOwnerNetworkRules.insert_changeset/1","type":"function"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystOwnerNetworkRules.update_changeset/2 .","ref":"Msdata.SystOwnerNetworkRules.html#update_changeset/2","title":"Msdata.SystOwnerNetworkRules.update_changeset/2","type":"function"},{"doc":"","ref":"Msdata.SystOwnerNetworkRules.html#t:t/0","title":"Msdata.SystOwnerNetworkRules.t/0","type":"type"},{"doc":"Establishes Owner specific rules defining the minimum allowed password complexity. Rules defined here may further strengthen the rules defined by SystGlobalPasswordRules , but may not be weaken those definitions. Defined in MscmpSystAuthn .","ref":"Msdata.SystOwnerPasswordRules.html","title":"Msdata.SystOwnerPasswordRules","type":"module"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystOwnerPasswordRules.insert_changeset/1 .","ref":"Msdata.SystOwnerPasswordRules.html#insert_changeset/1","title":"Msdata.SystOwnerPasswordRules.insert_changeset/1","type":"function"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystOwnerPasswordRules.update_changeset/2 .","ref":"Msdata.SystOwnerPasswordRules.html#update_changeset/2","title":"Msdata.SystOwnerPasswordRules.update_changeset/2","type":"function"},{"doc":"","ref":"Msdata.SystOwnerPasswordRules.html#t:t/0","title":"Msdata.SystOwnerPasswordRules.t/0","type":"type"},{"doc":"A history of previous user passwords credentials kept for the purpose of enforcing the reused password exclusion rule. Defined in MscmpSystAuthn .","ref":"Msdata.SystPasswordHistory.html","title":"Msdata.SystPasswordHistory","type":"module"},{"doc":"See MscmpSystAuthn.Msdata.Validators.SystPasswordHistory.insert_changeset/2 .","ref":"Msdata.SystPasswordHistory.html#insert_changeset/2","title":"Msdata.SystPasswordHistory.insert_changeset/2","type":"function"},{"doc":"","ref":"Msdata.SystPasswordHistory.html#t:t/0","title":"Msdata.SystPasswordHistory.t/0","type":"type"},{"doc":"Types used by the Authentication module.","ref":"MscmpSystAuthn.Types.html","title":"MscmpSystAuthn.Types","type":"module"},{"doc":"Defines the expected type of Access Account record ID values.","ref":"MscmpSystAuthn.Types.html#t:access_account_id/0","title":"MscmpSystAuthn.Types.access_account_id/0","type":"type"},{"doc":"Defines the expected type of Access Account Instance Association record ID values.","ref":"MscmpSystAuthn.Types.html#t:access_account_instance_assoc_id/0","title":"MscmpSystAuthn.Types.access_account_instance_assoc_id/0","type":"type"},{"doc":"Defines the expected shape and types of Access Account Instance Association Parameters. These parameters are passed to the database Changeset functions for tasks such as record creation or updating. Attributes access_account_id - the Access Account record ID which will be associated with the Instance. access_account_name - an alternate method of identifying an Access Account record by using its Internal Name value. This can be used instead of the access_account_id attribute. instance_id - the record ID of the Instance to which the designated Access Account record will be associated. instance_name - an alternate method of identifying the target Instance record by using its Internal Name value. This can be used instead of the instance_id attribute. access_granted - when populated the value indicates both that the Access Account has access to the Instance and indicates specifically when that access was granted. When nil this value means that the Access Account has been invited to the access the Instance, but that the Access Account holder (the user) has not yet accepted the invitation. invitation_issued - the specific date and time when the Access Account was invited to access the Instance. When nil the invitation has not yet been issued. invitation_expires - the date and time by which an invitation for access must be accepted by the Access Account holder. If the Access Account holder has not accepted the invitation by the value of this attribute, the record is considered invalid and the invitation must be reissued. invitation_declined - the date and time at which the Access Account holder declined an invitation to access an Instance. If this value is nil then the Access Account holder has not specifically declined the request.","ref":"MscmpSystAuthn.Types.html#t:access_account_instance_assoc_params/0","title":"MscmpSystAuthn.Types.access_account_instance_assoc_params/0","type":"type"},{"doc":"Defines the type of Access Account Internal Name values.","ref":"MscmpSystAuthn.Types.html#t:access_account_name/0","title":"MscmpSystAuthn.Types.access_account_name/0","type":"type"},{"doc":"Defines the shape and expected types of Access Account Changeset parameters. Attributes internal_name - a candidate key for the Access Account record. This value must be unique system wide. external_name - an externally/user visible name of the Access Account. This value does not require uniqueness, though care should be exercised in contexts where it may be displayed alongside other Access Accounts to avoid confusion. owning_owner_id - the record ID of the Owner which manages the Access Account, if the Access Account is in fact Owner managed. If the Access ' Account is not Owner managed this attribute should be left nil . owning_owner_name - an alternative means of identifying the Access Account's Owner using the Internal Name of the Owner instead of its ID. allow_global_logins - if true, the Access Account can log into the system without specification of an Owner or Instance for context. Typically this is is used for unowned Access Accounts which may log into a global interface and then select their desired Application Instance from a list of those they have been granted access to. If false, a specific Owner or Instance context is required. access_account_state_id - identifies the current life-cycle state of the Access Account. access_account_state_name - an alternative means of identifying the Access Account State using the Internal Name of the State instead of its record ID.","ref":"MscmpSystAuthn.Types.html#t:access_account_params/0","title":"MscmpSystAuthn.Types.access_account_params/0","type":"type"},{"doc":"Access Account State functional types which are assigned to Access Account State records for the purpose of influencing system functionality and behavior. :access_account_states_pending - Access Accounts in states of this functional type are not considered active and are limited in use to facilitating full activation. :access_account_states_active - active states are those which all full use of the associated Access Accounts for all permitted uses of the system. :access_account_states_suspended - when an Access Account is in a state of functional type suspended only certain basic Access Account maintenance functionality is permitted to the Access Account holder. Regular usage is naturally denied. :access_account_states_inactive - inactive states are not allowed to use make regular use of the system and are disabled for most purposes. Regular account maintenance is also typically not allowed. :access_account_states_purge_eligible - Access Accounts in states designated as purge eligible are permitted to be deleted from the system.","ref":"MscmpSystAuthn.Types.html#t:access_account_state_functional_types/0","title":"MscmpSystAuthn.Types.access_account_state_functional_types/0","type":"type"},{"doc":"Defines the type of Access Account State record ID values.","ref":"MscmpSystAuthn.Types.html#t:access_account_state_id/0","title":"MscmpSystAuthn.Types.access_account_state_id/0","type":"type"},{"doc":"Defines the type of Access Account State Internal Name values.","ref":"MscmpSystAuthn.Types.html#t:access_account_state_name/0","title":"MscmpSystAuthn.Types.access_account_state_name/0","type":"type"},{"doc":"The expected type of values used to identify an Access Account. The value of the Account Identifier will vary by context. For example, in the case of Email Identities, the Account Identifier will be an email address; for API Token Identities, the Account Identifier will likely be a pre-generated short string of random characters.","ref":"MscmpSystAuthn.Types.html#t:account_identifier/0","title":"MscmpSystAuthn.Types.account_identifier/0","type":"type"},{"doc":"Represents the return value of functions which evaluate whether or not a specific originating host IP address is allowed to attempt an authentication. When an authentication is attempted, a number of different rules and data sources may determine what kind of connection is allowed based on the host IP address from which the attempt appears to be originating and the destination Instance for which the authentication is being processed. To normalize the return from the evaluation of these different network based evaluations we define a simplified applied_network_rule/0 value to represent the actionable data of the evaluation. Attributes precedence - this will indicate the precedence of the applied Network Rule. This value can aid in identifying the origin of a given applied allowance or denial. network_rule_id - this is the record ID of the rule which was evaluated to govern the authentication attempt. Which specific relation the ID refers to will depend on the specific precedence of the rule applied. This value may be nil if the implied default Network Rule is applied since, by definition, this means no other explicitly defined Network Rule was found. functional_type - May be either :allow or :deny . :allow means that the Network Rule evaluation allows the host IP address to attempt authentication. :deny indicates that the host IP address may not attempt an authentication.","ref":"MscmpSystAuthn.Types.html#t:applied_network_rule/0","title":"MscmpSystAuthn.Types.applied_network_rule/0","type":"type"},{"doc":"Defines required operations during an authentication attempt which are considered extended , meaning that they interrupt the normal authentication flow. Certain authentication methods, such as Email/Password authentication, have certain defined points where an authentication attempt may be interrupted. Examples of such interruptions include when Multi-Factor Authentication is required or when the password requires resetting prior to proceeding. In all of these cases, we have some action that must take place, including possibly user interactive actions, which must be completed before the full authentication process can complete successfully. This type defines the known extended operations which can force this functionality.","ref":"MscmpSystAuthn.Types.html#t:authentication_extended_operations/0","title":"MscmpSystAuthn.Types.authentication_extended_operations/0","type":"type"},{"doc":"A list of known operations which may occur during an authentication attempt. Each type of authentication defines the steps which that kind of authentication requires to be completed prior to considering the attempt &quot;authenticated&quot;. This type defines references to all of the known operations that may be required and then includes the authentication_extended_operations/0 which may cause an interruption to to the authentication process.","ref":"MscmpSystAuthn.Types.html#t:authentication_operations/0","title":"MscmpSystAuthn.Types.authentication_operations/0","type":"type"},{"doc":"The return type describing the result of authentication attempts via the authentication functions. When a user attempts to validate an Access Account, the result is returned as a value of this type. This includes whether or not an authentication attempt was successful or rejected. An result indicating that the status is pending may also be returned from an attempt if the authentication requires intervention to complete successfully. Attributes status - the result of the authentication attempt. deadline - the date/time by which the authentication attempt must be resolved by before being considered expired. Since the authentication process may be interrupted and resumed, it requires that we establish some limit by which the process must be completed. By default this value will be 5 minutes after the time the authentication process starts. access_account_id - the Access Account record ID if the authentication attempt has successfully completed the identification operation. instance_id - the Instance ID that the Access Account holder is attempting to authenticate to. For certain authentication types, this value may initially be nil , but must be non-nil prior to a successful completion of the authentication process. identity_type_id - the record ID referencing the Identity Type used to identify the Access Account. host_address - the apparent Host IP Address from which the authentication attempt originated. applied_network_rule - the Network Rule that was applied during the authentication attempt. This value may be nil if the evaluation of the Network Rules has not yet made. pending_operations - the ordered list of remaining authentication operations which must complete successfully prior to the authentication being successfully completed. identifier - the user supplied account identifier used to identify the Access Account. plaintext_credential - the unencrypted, user supplied credential to test during the authentication process. This value will be made nil as soon as it has been tested or is created nil for the Account Code Authenticator which isn't a true authentication method (it's just a lookup). owning_owner_id - an Owner record ID for the Owner which manages the authenticating Access Account in cases where it's an Owned Access Account. identity_id - the record ID of the Identity record located to identify the Access Account. identity - the Identity record data struct. This should be the same record as that identified by the identity_id attribute reset_reason - in cases where a pending operation of :require_credential_reset is added to the authentication process, this value indicates the reason for the reset. Available values are defined in credential_reset_reason/0 .","ref":"MscmpSystAuthn.Types.html#t:authentication_state/0","title":"MscmpSystAuthn.Types.authentication_state/0","type":"type"},{"doc":"The understood life-cycle states of the authentication process. Any authentication process will exist in one of the states defined by the list below. The list is used to populate the status field of the authentication_state/0 type. Note that while the authentication process may provide the caller information regarding the nature of any rejection, the developer should nonetheless make well considered judgements regarding what, if any, detail to disclose to the user attempting authentication. More often than not no specificity for a rejection should be given. :not_started - the authentication process has not yet begun. :pending - the authentication process is underway. It is possible for a call to an authentication function to return a :pending authentication state status. In these cases the authentication has been interrupted and requires intervention to proceed. :rejected_host_check - the authentication process has rejected the authentication attempt because the apparent Host IP Address is not allowed to authenticate as presented. :rejected_rate_limited - the authentication process has rejected the authentication attempt because the identifier has failed to successfully authenticate within the prescribed number of tries within a prescribed duration. :rejected_validation - the authentication process has rejected the authentication attempt because the identity used to identify the Access Account is subject to prior validation/confirmation by the Access Account holder. This is the case with newly created Email Identities, for example. :rejected_identity_expired - the authentication process has rejected the authentication attempt because the Identity record used to identity the Access Account is beyond its configured expiration date and may not be use again until the Identity's expiration has been reset. Note that not all Identity records expire. :rejected_deadline_expired - the authentication process is rejected because it has taken too long to resolve to a final authentication status. :rejected - the authentication process has rejected the authentication attempt for undeclared reasons. Examples of reasons that can prompt this authentication end state are a user providing a wrong password or no Instance to access being identified. :authenticated - the authentication process has finished successfully and the Access Account is now authenticated for the identified Instance.","ref":"MscmpSystAuthn.Types.html#t:authentication_status/0","title":"MscmpSystAuthn.Types.authentication_status/0","type":"type"},{"doc":"The return type used when creating Authenticators via the API. The included values and attributes will vary somewhat from Authenticator type to Authenticator type, but they will all follow this basic form. Attributes access_account_id - the Access Account record ID for which the Authenticator has been created. account_identifier - the Access Account Identifier for use in identifying the Access Account in the authentication process. Depending on the Authenticator type, this could be a restatement of what the user provided, such as an Email address, or may be system generated such as the identifier for user with an API Token. credential - the plaintext Credential created for the Authenticator. This attribute is only returned in cases where the typical Authenticator creation flow includes the system randomly generating the Credential. For example, an API Token Credential is automatically created by the system and the Credential must be communicated to the user once created. Note that even in these cases the only time the Credential is available for disclosure to the user is immediately after the Authenticator creation via this value. Once the return result is discarded the Credential is unrecoverable. validation_identifier - when creating an Email/Password Authenticator, the default options mandate that validating the Email Identity is required. Assuming the default is not overridden, the system generated Identifier for the user to use to validate the Email Identity is provided via this attribute. If validation is not required this attribute will not be present in the return value of the Authenticator creation call. validation_credential - the (usually) system generated Credential in plaintext which compliments the validation_identifier value. This attribute is either included or excluded on the same terms as the validation_identifier . Note that the return of this value after the creation of an Email/Password Authenticator is the only time that this value is available in plaintext; after this point the plaintext is not retrievable.","ref":"MscmpSystAuthn.Types.html#t:authenticator_result/0","title":"MscmpSystAuthn.Types.authenticator_result/0","type":"type"},{"doc":"Defines the type expected for user provided plaintext Credentials.","ref":"MscmpSystAuthn.Types.html#t:credential/0","title":"MscmpSystAuthn.Types.credential/0","type":"type"},{"doc":"Used to define the return value of an attempted Credential Confirmation. Attempting to confirm a user provided Credential returns a tuple where the first element is an indication of whether or not a valid Credential was supplied by the user and the second element is a list of extended states which might indicate that additional processing is required even if the Credential is successfully confirmed. If no additional processing is required the second element will simply be an empty list.","ref":"MscmpSystAuthn.Types.html#t:credential_confirm_result/0","title":"MscmpSystAuthn.Types.credential_confirm_result/0","type":"type"},{"doc":"Defines the possible outcomes of an attempt to confirm a user provided Credential. This type is used to set the available values of the first element of the credential_confirm_result/0 tuple. :confirmed - the Credential provided by the user is confirmed as being correct. :no_credential - no matching Credential record of the correct type was found for the Access Account. :wrong_credential - the user provided Credential does not match the stored Credential record for that Access Account. While outcomes other than confirm give some information to the caller, the specific reason for the failure should usually not be disclosed to the user attempting authentication; users should just see a binary confirmed/ unconfirmed state without additional details regarding a failure.","ref":"MscmpSystAuthn.Types.html#t:credential_confirm_state/0","title":"MscmpSystAuthn.Types.credential_confirm_state/0","type":"type"},{"doc":"Known extended Credential confirmation states indicating required post- confirmation actions. This type defines the values which may appear in a list as the second element of credential_confirm_result/0 . :require_mfa - when present this value indicates that even though a Credential confirmation succeeded, an additional multi-factor credential confirmation is required prior to the authentication attempt resulting in an authenticated status. This will be true when the Access Account has one or more configured MFA Credentials and the primary Authenticator is one that supports MFA Credential confirmation (e.g. Password Credentials support MFA Credential confirmation). Additional states that can be represented as extended states here include the Credential reset related reasons defined in credential_reset_reason/0 .","ref":"MscmpSystAuthn.Types.html#t:credential_extended_state/0","title":"MscmpSystAuthn.Types.credential_extended_state/0","type":"type"},{"doc":"Defines the Credential record ID type.","ref":"MscmpSystAuthn.Types.html#t:credential_id/0","title":"MscmpSystAuthn.Types.credential_id/0","type":"type"},{"doc":"A type to facilitate data maintenance operations related to Credential records. Attributes access_account_id - identifies the Access Account to which the Credential pertains as identified by its record ID. access_account_name - an alternative method of using the Access Account internal name to identify the Access Account. credential_type_id - the record ID of the Credential Type which classifies the Credential record. credential_type_name - an alternative method of identifying the Credential Type using its Internal Name. credential_for_identity_id - certain Credentials are only valid when used in conjunction with specific Identity records. This value records the record ID of the Identity record to which the Credential record belongs. credential_data - the hashed or encrypted value of the Credential. The specific details of what is stored in this value will depend on the method used to secure the Credential, but the most typical scenario includes both the credential hash and the record specific salting value used in creating the hash.","ref":"MscmpSystAuthn.Types.html#t:credential_params/0","title":"MscmpSystAuthn.Types.credential_params/0","type":"type"},{"doc":"Provides additional Credential Extended State values when Credential resets are required. These values are related in that they all deal with a primary Credential reset being required and describe the reason for such a requirement. This is information useful to users that must take action. Note that currently the only Credential type that may require Credential reset is the Password Credential Type. reset_forced - the reset is required because it has been administratively forced. See the force_reset field of Msdata.SystCredentials for more. reset_age - the Password Credential has exceeded the applicable Max Age Password Rule and must be updated. reset_disallowed - the password used in the Credential has been found to be included in the Disallowed Passwords list and may no longer be used for authentication.","ref":"MscmpSystAuthn.Types.html#t:credential_reset_reason/0","title":"MscmpSystAuthn.Types.credential_reset_reason/0","type":"type"},{"doc":"A extended return value used when Credentials setting operations have failed. This type allows the reason for failure to be communicated. This will most often be when a candidate password has failed the effective Password Rule and will describe which specific Password Rules have been violated.","ref":"MscmpSystAuthn.Types.html#t:credential_set_failures/0","title":"MscmpSystAuthn.Types.credential_set_failures/0","type":"type"},{"doc":"Established classes of Credential Types which share common system functionality. :credential_types_password - used to identify Credential Types which use passwords as their credential. :credential_types_mfa_totp - associates a Credential Type with Time based One Time Password Multi-Factor Authentication functionality. :credential_types_mfa_totp_recovery_code - designates a Credential Type as representing an MFA/TOTP recovery code. :credential_types_mfa_known_host - designates a Credential Type as representing a known MFA/TOTP host allowed to bypass interactive MFA secondary authentication. :credential_types_token_api - indicates that the Credential Type makes use of API Token credential functionality. :credential_types_token_validation - indicates that the Credential Type facilitates the validation of certain types of Identity records. :credential_types_token_recovery - associates Credential Types which facilitate recovery of other Credential Types with the necessary recovery functionality.","ref":"MscmpSystAuthn.Types.html#t:credential_type_functional_types/0","title":"MscmpSystAuthn.Types.credential_type_functional_types/0","type":"type"},{"doc":"The Credential Type record ID database type.","ref":"MscmpSystAuthn.Types.html#t:credential_type_id/0","title":"MscmpSystAuthn.Types.credential_type_id/0","type":"type"},{"doc":"Defines the expected type of the Credential Type record Internal Name.","ref":"MscmpSystAuthn.Types.html#t:credential_type_name/0","title":"MscmpSystAuthn.Types.credential_type_name/0","type":"type"},{"doc":"The Credential Types known by the system.","ref":"MscmpSystAuthn.Types.html#t:credential_types/0","title":"MscmpSystAuthn.Types.credential_types/0","type":"type"},{"doc":"The Disallowed Host record ID database type.","ref":"MscmpSystAuthn.Types.html#t:disallowed_host_id/0","title":"MscmpSystAuthn.Types.disallowed_host_id/0","type":"type"},{"doc":"Defines the available parameters for use in creating or updating Global Network Rule records. Attributes ordering - the order in which the new record should apply relative to other Global Network Rule records. lower ordering values take precedence over higher ordering values. If the ordering value in the parameters matches the ordering value of an existing Global Network Rule record, the inserted record will be treated as an &quot;insert before&quot; record, with the existing records being reordered to be after the new record, recursively. This attribute is required in record creation scenarios. functional_type - defines what action the rule specifies once matched. The possible functional types are :allow which means the rule intends to explicitly allow the associated IP Address(es) to attempt authentication or :deny which explicitly prevents the IP Address(es) from attempting an authorization. This attribute is required in record creation scenarios. ip_host_or_network - a single Host IP Address or a single CIDR network used in matching user Host IP Addresses to rules. Note that if this value is provided that the ip_host_range_lower and ip_host_range_upper values must be nil or not provided. ip_host_range_lower - defines the lower bound of a simple range of IP Addresses, inclusive, to which rule should apply. When this value is provided the ip_host_range_upper attribute must also be provided and the ip_host_or_network attribute value must be nil or not provided. ip_host_range_upper - defines the upper bound of a simple range of IP Addresses, inclusive, to which rule should apply. When this value is provided the ip_host_range_lower attribute must also be provided and the ip_host_or_network attribute value must be nil or not provided. Note that either the ip_host_or_network attribute or the ip_host_range_lower and ip_host_range_upper are required and exclusive.","ref":"MscmpSystAuthn.Types.html#t:global_network_rule_params/0","title":"MscmpSystAuthn.Types.global_network_rule_params/0","type":"type"},{"doc":"Defines the data type and structure of Host IP Addresses.","ref":"MscmpSystAuthn.Types.html#t:host_address/0","title":"MscmpSystAuthn.Types.host_address/0","type":"type"},{"doc":"Establishes the data type of the Identity record ID.","ref":"MscmpSystAuthn.Types.html#t:identity_id/0","title":"MscmpSystAuthn.Types.identity_id/0","type":"type"},{"doc":"Defines a map of attributes for use in Identity record Changeset processing. Attributes access_account_id - the record ID of the Access Account for which the record is being defined. access_account_name - an alternative means of selecting the Access Account using its Internal Name value. identity_type_id - the record ID of the Identity Type of the Identity. identity_type_name - an alternative means of selecting the Identity Type of the record using the Identity Type Internal Name value. account_identifier - the identifier presented by the Access Account holder to identify their Access Account. For example, for Email Identities this value would be the Access Account holder's email address. validated - this value indicates both that the Identity record is valid for use in identification requests and the timestamp at which that valid condition came into effect. When nil , the Identity record is not valid to use for identifying Access Accounts. validates_identity_id - if the Identity record is of type identity_types_sysdef_validation this value will reference the record which is to be validated on confirmation of the validation request. In all other instances the value should be nil . validation_requested - if the Identity record is of type identity_types_sysdef_validation this value will record the timestamp when the validation was requested. identity_expires - the optional timestamp of when the Identity record expires and after which the Identity record may not be used for identification purposes. If this value is nil , the Identity record may be used indefinitely. external_name - certain Identities, such as API Token Identities, allow the Access Account holder to provide names with which they will more easily recognize in maintenance tasks. This value allows for the establishment of a user defined name for the Identity record. Note that this value does not need to be unique on any basis and therefore is unsuitable for use in looking up Identity records.","ref":"MscmpSystAuthn.Types.html#t:identity_params/0","title":"MscmpSystAuthn.Types.identity_params/0","type":"type"},{"doc":"Identifies the categorizations of Identity Types which the system will treat with different functional responses. :identity_types_email - indicates that the Identity Type represents Identities which can be used in email address contexts. :identity_types_account - designates Identity Types which are used for simple identification and are not typically used for Access Account identification for authentication purposes. :identity_types_api - associates API Token Identity functionality with Identity Types. :identity_types_validation - indicates that an Identity Type designates Identities used to validate other Identity Types, such as :identity_types_email Identity Types. :identity_types_password_recovery - designates Identity Types use in Password Credential recovery.","ref":"MscmpSystAuthn.Types.html#t:identity_type_functional_types/0","title":"MscmpSystAuthn.Types.identity_type_functional_types/0","type":"type"},{"doc":"Defines the Identity Type record ID data type.","ref":"MscmpSystAuthn.Types.html#t:identity_type_id/0","title":"MscmpSystAuthn.Types.identity_type_id/0","type":"type"},{"doc":"Defines the expected data type of the Identity Type record Internal Name value.","ref":"MscmpSystAuthn.Types.html#t:identity_type_name/0","title":"MscmpSystAuthn.Types.identity_type_name/0","type":"type"},{"doc":"Defines the list of Identity Types known to the system.","ref":"MscmpSystAuthn.Types.html#t:identity_types/0","title":"MscmpSystAuthn.Types.identity_types/0","type":"type"},{"doc":"Defines the available parameters for use in creating or updating Instance Network Rule records. Attributes instance_id - the value of this attribute identifies the Instance for which the Network Rule is being defined. This value doesn't have to be set explicitly when using the MscmpSystAuthn module API as the API calls set this value based on the function instance_id parameters they require. instance_name - an alternate means of identifying the Instance instead of the instance_id attribute. Currently there is no API which makes use of this value. ordering - the order in which the new record should apply relative to other Instance Network Rule records. lower ordering values take precedence over higher ordering values. If the ordering value in the parameters matches the ordering value of an existing Instance Network Rule record, the inserted record will be treated as an &quot;insert before&quot; record, with the existing records being reordered to be after the new record, recursively. This attribute is required in record creation scenarios. functional_type - defines what action the rule specifies once matched. The possible functional types are :allow which means the rule intends to explicitly allow the associated IP Address(es) to attempt authentication or :deny which explicitly prevents the IP Address(es) from attempting an authorization. This attribute is required in record creation scenarios. ip_host_or_network - a single Host IP Address or a single CIDR network used in matching user Host IP Addresses to rules. Note that if this value is provided that the ip_host_range_lower and ip_host_range_upper values must be nil or not provided. ip_host_range_lower - defines the lower bound of a simple range of IP Addresses, inclusive, to which rule should apply. When this value is provided the ip_host_range_upper attribute must also be provided and the ip_host_or_network attribute value must be nil or not provided. ip_host_range_upper - defines the upper bound of a simple range of IP Addresses, inclusive, to which rule should apply. When this value is provided the ip_host_range_lower attribute must also be provided and the ip_host_or_network attribute value must be nil or not provided. Note that either the ip_host_or_network attribute or the ip_host_range_lower and ip_host_range_upper are required and exclusive.","ref":"MscmpSystAuthn.Types.html#t:instance_network_rule_params/0","title":"MscmpSystAuthn.Types.instance_network_rule_params/0","type":"type"},{"doc":"Establishes the two basic operations that Network Rule may define. :allow - this essentially whitelists any host IP address(es) or networks defined by the Network Rule, allowing an authentication attempt. :deny - this value denies any specified host IP address(es) or networks from attempting an authentication.","ref":"MscmpSystAuthn.Types.html#t:network_rule_functional_type/0","title":"MscmpSystAuthn.Types.network_rule_functional_type/0","type":"type"},{"doc":"The known precedence classes of Network Rule definitions. Network Rules are applied in order of their Precedence Class and then of their ordering value withing the Precedence Class; first matching found becomes the Applied Network Rule. Each Precedence Class is a group of rules defined within the same scope of applicability which can range from being globally applicable to applying only to a single Instance. The known Precedence Classes in order of application are: :disallowed - disallowed hosts are individual host IP addresses which are denied access on a global basis, effectively banning their use with the system. Defined by Msdata.SystDisallowedHosts . :global - Network Rules which are defined to apply global without regard to Owner or Instance. Such rules may explicitly whitelist or blacklist hosts. Defined by Msdata.SystGlobalNetworkRules . :instance - Network Rules which apply to only a specific Application Instance. Defined by Msdata.SystInstanceNetworkRules . :instance_owner - Network Rules which apply to all Application Instances belonging to a specific Owner. Defined by Msdata.SystOwnerNetworkRules . :implied - when no explicitly defined applicable Disallowed Host or Network Rule records can be found, the system will use an implicit globally applied rule to Apply to the authentication attempt. The :implied rule allows any host to attempt authentication.","ref":"MscmpSystAuthn.Types.html#t:network_rule_precedence/0","title":"MscmpSystAuthn.Types.network_rule_precedence/0","type":"type"},{"doc":"Defines the available parameters for use in creating or updating Owner Network Rule records. Attributes owner_id - the value of this attribute identifies the Owner for which the Network Rule is being defined. This value doesn't have to be set explicitly when using the MscmpSystAuthn module API as the API calls set this value based on the function owner_id parameters they require. owner_name - an alternate means of identifying the Owner instead of the owner_id attribute. Currently there is no API which makes use of this value. ordering - the order in which the new record should apply relative to other Owner Network Rule records. lower ordering values take precedence over higher ordering values. If the ordering value in the parameters matches the ordering value of an existing Owner Network Rule record, the inserted record will be treated as an &quot;insert before&quot; record, with the existing records being reordered to be after the new record, recursively. This attribute is required in record creation scenarios. functional_type - defines what action the rule specifies once matched. The possible functional types are :allow which means the rule intends to explicitly allow the associated IP Address(es) to attempt authentication or :deny which explicitly prevents the IP Address(es) from attempting an authorization. This attribute is required in record creation scenarios. ip_host_or_network - a single Host IP Address or a single CIDR network used in matching user Host IP Addresses to rules. Note that if this value is provided that the ip_host_range_lower and ip_host_range_upper values must be nil or not provided. ip_host_range_lower - defines the lower bound of a simple range of IP Addresses, inclusive, to which rule should apply. When this value is provided the ip_host_range_upper attribute must also be provided and the ip_host_or_network attribute value must be nil or not provided. ip_host_range_upper - defines the upper bound of a simple range of IP Addresses, inclusive, to which rule should apply. When this value is provided the ip_host_range_lower attribute must also be provided and the ip_host_or_network attribute value must be nil or not provided. Note that either the ip_host_or_network attribute or the ip_host_range_lower and ip_host_range_upper are required and exclusive.","ref":"MscmpSystAuthn.Types.html#t:owner_network_rule_params/0","title":"MscmpSystAuthn.Types.owner_network_rule_params/0","type":"type"},{"doc":"A map of attributes used to create or update Global and Owner Password Rules. Note that only those attributes which are necessary to represent the desired rules are required to appear in the parameter submission. All attributes not provided will take on a default value which assumes the specific rule has no effect. Attributes password_length - A value of type MscmpSystDb.DbTypes.IntegerRange.t/0 describing the password length in terms of the number of characters. The lower bound defines the minimum number of characters a password may have and the upper bound is the most characters that can be added to password. max_age - A value of type MscmpSystDb.DbTypes.Interval.t/0 which, when added to the last_updated value of the Password Credential record, sets the expiration date of the password. After the password's age has exceeded it's max age, the password must be reset prior to finalizing authentication. A zero interval value here means that password ages are not checked. The zero interval is the default setting. require_upper_case - A positive integer which sets the minimum number of upper case characters that a valid password must posses. A setting of zero here disables the requirement. require_lower_case - A positive integer which sets the minimum number of lower case characters that a valid password must posses. A setting of zero here disables the requirement. require_numbers - A positive integer which sets the minimum number of number characters that a valid password must posses. A setting of zero here disables the requirement. require_symbols - A positive integer which sets the minimum number of symbol characters that a valid password must posses. A setting of zero here disables the requirement. disallow_recently_used - A positive integer representing the number of most recently used passwords to track and prohibit from re-use. A zero setting for this attribute indicates that recently used passwords should not be tracked or prohibited. disallow_compromised - A boolean value which, if true, indicates that any new password requested by a user be first checked against the Disallowed Passwords list and, if found on the list, rejected for use. When set true, the system will also check the password against the Disallowed Password list on authentication; if found on the list at authentication time, the user will be required to reset their password to something value not otherwise disallowed. If set false the Disallowed Password list is not checked. require_mfa - A boolean value which indicates if multi-factor authentication is required for password authentication. If true MFA is required, otherwise MFA is per user preference. MFA may not be completely disabled. allowed_mfa_types - A list of strings identifying the allowed second factor methods. Currently only MFA type credential_types_secondary_totp is available.","ref":"MscmpSystAuthn.Types.html#t:password_rule_params/0","title":"MscmpSystAuthn.Types.password_rule_params/0","type":"type"},{"doc":"Defines the known Password Rule violations. Various functions evaluation a candidate password against the set of applicable Password Rules and return lists of violations for resolution. The possible violations are: :password_rule_length_min - the candidate password violates the minimum password length rule. The accompanying value is the required number of characters the password must contain. :password_rule_length_max - the candidate password violates the maximum password length rule. The accompanying value is the maximum permitted number of characters that the password may contain. :password_rule_required_upper - the candidate password violates the minimum upper case characters rule. The accompanying value is the required number of upper case characters. :password_rule_required_lower - the candidate password violates the minimum lower case characters rule. The accompanying value is the required number of lower case characters. :password_rule_required_numbers - the candidate password violates the minimum number characters rule. The accompanying value is the required number of number characters. :password_rule_required_symbols - the candidate password violates the minimum symbol characters rule. The accompanying value is the required number of symbol characters. :password_rule_disallowed_password - the candidate password is known password which is disallowed from use in the system. A new allowed password must be selected. :password_rule_recent_password - the candidate password has been too recently used for this Access Account and another not recently used password must be selected.","ref":"MscmpSystAuthn.Types.html#t:password_rule_violations/0","title":"MscmpSystAuthn.Types.password_rule_violations/0","type":"type"},{"doc":"Defines a generic Password Rule record allowing Password Rules originating from different database sources a common representation. Password Rules are defined in two different database tables, Msdata.SystGlobalPasswordRules and Msdata.SystOwnerPasswordRules . This type defines a common representation of Password Rule data for those parts of the system that apply Password Rules after the applicable Password Rules have been resolved. Attributes access_account_id - the Access Account for which the effective Password Rules has been resolved. owner_id - the Owner record ID of the Owner which owns the Access Account. The Access Account's Owner may have established Password Rules which would apply to the Access Account. A value here does not mean that the Owner's rules necessarily are part of the resolved Password Rule, just that they would have been considered. password_length - the resolved value of type MscmpSystDb.DbTypes.IntegerRange.t/0 describing the password length in terms of the number of characters. The lower bound defines the minimum number of characters a password may have and the upper bound is the most characters that can be added to password. max_age - the resolved value of type MscmpSystDb.DbTypes.Interval.t/0 which, when added to the last_updated value of the Password Credential record, sets the expiration date of the password. After the password's age has exceeded it's max age, the password must be reset prior to finalizing authentication. A zero interval value here means that password ages are not checked. The zero interval is the default setting. require_upper_case - the resolved minimum number of upper case characters that a valid password must posses. A setting of zero here disables the requirement. require_lower_case - the resolved minimum number of lower case characters that a valid password must posses. A setting of zero here disables the requirement. require_numbers - the resolved minimum number of number characters that a valid password must posses. A setting of zero here disables the requirement. require_symbols - the resolved minimum number of symbol characters that a valid password must posses. A setting of zero here disables the requirement. disallow_recently_used - A positive integer representing the number of most recently used passwords to track and prohibit from re-use. A zero setting for this attribute indicates that recently used passwords should not be tracked or prohibited. disallow_compromised - A boolean value which, if true, indicates that any new password requested by a user be first checked against the Disallowed Passwords list and, if found on the list, rejected for use. When set true, the system will also check the password against the Disallowed Password list on authentication; if found on the list at authentication time, the user will be required to reset their password to something value not otherwise disallowed. If set false the Disallowed Password list is not checked. require_mfa - A boolean value which indicates if multi-factor authentication is required for password authentication. If true MFA is required, otherwise MFA is per user preference. MFA may not be completely disabled. allowed_mfa_types - A list of strings identifying the allowed second factor methods. Currently only MFA type credential_types_secondary_totp is available.","ref":"MscmpSystAuthn.Types.html#t:password_rules/0","title":"MscmpSystAuthn.Types.password_rules/0","type":"type"}]