searchNodes=[{"doc":"","ref":"DevSupport.html","title":"DevSupport","type":"module"},{"doc":"","ref":"DevSupport.html#cleanup_database/1","title":"DevSupport.cleanup_database/1","type":"function"},{"doc":"","ref":"DevSupport.html#start_dev_environment/1","title":"DevSupport.start_dev_environment/1","type":"function"},{"doc":"","ref":"DevSupport.html#stop_dev_environment/1","title":"DevSupport.stop_dev_environment/1","type":"function"},{"doc":"MssubMcp - Global Systems Management API for the Master Control Program Subsystem. The Master Control Program Subsystem provides global services such as tenant and Application Instance management, global user authentication, global system configuration services, and a global enumeration service.","ref":"MssubMcp.html","title":"MssubMcp","type":"module"},{"doc":"Accepts the invitation made to an Access Account to access an Instance. This process is only needed in the case where a syst_access_account_instance_assocs invitation may be accepted or declined by the Access Account holder. To be accepted in this process the invitation record must have been previously created (see invite_to_instance/3 ), must not be expired, previously declined, or previously accepted; trying to accept a record in such a state will result in an error tuple being returned. Naturally, the Access Account holder may choose to never accept or decline the invitation and may simply allow the invitation to expire. Parameters access_account_instance_assoc - this value may be either the populated Msdata.SystAccessAccountInstanceAssocs struct to accept or the record ID of the record to accept.","ref":"MssubMcp.html#accept_instance_invite/1","title":"MssubMcp.accept_instance_invite/1","type":"function"},{"doc":"Accepts the invitation made to an Access Account to access an Instance, referencing the record by its composite key values. This function performs the same process as accept_instance_invite/1 , but will look up the record to accept using the Access Account, Instance, and Credential Type record ID values. Parameters access_account_id - the record ID of the Access Account accepting the invitation to the Instance. instance_id - the Instance record ID to which the Access Account has been invited.","ref":"MssubMcp.html#accept_instance_invite/2","title":"MssubMcp.accept_instance_invite/2","type":"function"},{"doc":"Indicates if an Access Account's Password Credential is recoverable or not. Access Account Password Credentials are only recoverable when they: 1) exist, and 2) are not already awaiting recovery. When the Password Credential is recoverable this function will return a simple :ok value. If the Access Account's Password Credential already has an issued recovery underway, the value :existing_recovery is returned. If the Access Account lacks a Password Credential record to recover, the value :not_found is returned. Any errors encountered cause the function to raise an exception. Parameters access_account_id - the record ID of the Access Account which owns the Password Credential to test for recoverability.","ref":"MssubMcp.html#access_account_credential_recoverable!/1","title":"MssubMcp.access_account_credential_recoverable!/1","type":"function"},{"doc":"Identities and authenticates an Access Account using an API Token Authenticator. The return value of this function is a result tuple where a success tuple ( {:ok, &lt;value&gt;} ) indicates that the function processed without error, not that the API Token Authenticator was successfully authenticated. The value element of the success tuple, the Authentication State, carries information about the actual outcome of the authentication attempt; see MscmpSystAuthn.Types.authentication_state/0 for more about the specific information carried by the Authentication State value. Otherwise, an error tuple is returned indicating the nature of the processing failure. The authentication process executed by this function is not interruptible. The initial call to this function must contain all parameter values required to fully complete the authentication process. Any missing information will cause the authentication attempt to be rejected. Parameters identifier - the identifier defined by the API Token identifier. Typically this would have been a system generated random string of characters available at API Token Authenticator creation time. plaintext_token - the plaintext API Token credential. Typically this would have been a system generated random string of characters available at API Token Authenticator creation time. host_address - the apparent origin host IP address from where the authentication attempt is originating. This value is used in the enforcement of applicable Network Rules. opts - a Keyword List of values that either optionally override default behaviors of this function or are optionally required. The available options are: owning_owner_id - if the Access Account is an Owned Access Account, this value must be set to the record ID of the Access Account's Owner. Otherwise it must be set nil or not provided. The default value is nil . instance_id - the record ID of the Application Instance to which the Access Account holder wishes to authenticate. This value is required must be provided at function call time or the Authentication State will be returned in a :rejected status. There is no default value (default nil ). host_ban_rate_limit - overrides the default host IP address based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 30 attempts over a time window of 2 hours. identifier_rate_limit - overrides the default identifier based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 5 attempts over a time window of 30 minutes. deadline_minutes - overrides the default number of minutes that an authentication process can take before being rejected for taking too long. This deadline is needed because an arbitrary time can pass due to user interaction if the authenticator allows for an interruptable authentication process. The default deadline allows for 5 minutes to complete the authentication process.","ref":"MssubMcp.html#authenticate_api_token/5","title":"MssubMcp.authenticate_api_token/5","type":"function"},{"doc":"Identifies and authenticates an Access Account on the basis of a starting Authentication State value constructed for Email/Password authentication. This function works the same as authenticate_email_password/4 except that it expects an existing Authentication State value to contain the basic information to process the authentication, with other parameters provided via the opts parameter. This function is typically used to continue a previously interrupted call to authenticate_email_password/4 and supplying it the necessary additional information to continue processing the authentication to completion. The options available for use here are the same as for authenticate_email_password/4 . However the options specified here are only valid if they are applied to authentication process operations that are still pending when this function is called. Options influencing operations previously processed, such as owning_owner_id as used in Access Account identification will simply be ignored if they are different in the resumption of the process than they were in the initiating call. See authenticate_email_password/4 for a discussion of the possible return values.","ref":"MssubMcp.html#authenticate_email_password/2","title":"MssubMcp.authenticate_email_password/2","type":"function"},{"doc":"Identities and authenticates an Access Account using an Email/Password Authenticator. The return value of this function is a result tuple where a success tuple ( {:ok, &lt;value&gt;} ) indicates that the function processed without error, not that the authentication was successful. The value element of the success tuple, the Authentication State, carries information about the outcome of the authentication attempt; see MscmpSystAuthn.Types.authentication_state/0 for more about the specific information carried by the Authentication State value. Otherwise, an error tuple is returned indicating the nature of the processing failure. Email/Password authentication is an interruptible process, meaning that this function may return prior to the authentication having been fully processed to a final result. The two most common examples of when this partial processing may happen are 1) the Application Instance was not initially identified; and further authentication is required such as when Multi-Factor Authentication is required. In these cases the returned Authentication State is resubmitted for process via authenticate_email_password/2 along with the updated information which allows authentication processing to complete. Parameters email_address - this is the username in the form of an email address used to identify the correct Email Identity record which in turn identifies a specific Access Account. plaintext_pwd - the Access Account holder's password as submitted in plaintext. This is the credential that will be authenticated using the Password Credential record belonging to the identified Access Account. host_address - the apparent origin host IP address from where the authentication attempt is originating. This value is used in the enforcement of applicable Network Rules. opts - a Keyword List of values that either optionally override default behaviors of this function, are optionally required, or are required on a deferred basis (eventually required). The available options are: owning_owner_id - if the Access Account is an Owned Access Account, this value must be set to the record ID of the Access Account's Owner. Otherwise it must be set nil or not provided. The default value is nil . instance_id - the record ID of the Application Instance to which the Access Account holder wishes to authenticate. This is not required when the Email/Password authentication process is initiated but is required for it to complete. If this value is not initially provided, the function will be interrupted returning an Authentication State status value of :pending . Deferral may be appropriate if, for example, we want to allow the Access Account holder to select the specific Instance they wish to access from a list of their permitted Instances. The default value of this option is nil . host_ban_rate_limit - overrides the default host IP address based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 30 attempts over a time window of 2 hours. identifier_rate_limit - overrides the default identifier based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 5 attempts over a time window of 30 minutes. deadline_minutes - overrides the default number of minutes that an authentication process can take before being rejected for taking too long. This deadline is needed because an arbitrary time can pass due to user interaction, such as selecting an Instance or providing an MFA credential. The default value is 5 minutes from the time the authentication process is started.","ref":"MssubMcp.html#authenticate_email_password/4","title":"MssubMcp.authenticate_email_password/4","type":"function"},{"doc":"Confirms an Access Account's password Recovery Token Authenticator. The return value of this function is a result tuple where a success tuple ( {:ok, &lt;value&gt;} ) indicates that the function processed without error, not that the Recovery Token Authenticator was successfully authenticated. The value element of the success tuple, the Authentication State, carries information about the actual outcome of the authentication attempt; see MscmpSystAuthn.Types.authentication_state/0 for more about the specific information carried by the Authentication State value. Otherwise, an error tuple is returned indicating the nature of the processing failure. If the Authentication State's status is returned as :authenticated , the process of Password Credential recovery may be undertaken. On success the Recovery Token Authenticator is deleted from the system, but no further action is taken by this function. The actual process of recovering a password is external to this function. The authentication process executed by this function is not interruptible. The initial call to this function must contain all parameter values required to fully complete the authentication process. Any missing information will cause the authentication attempt to be rejected. Parameters identifier - the identifier defined by the Recovery Token identifier. Typically this would have been a system generated random string of characters available at Recovery Token Authenticator creation time. plaintext_token - the plaintext Recovery Token credential. Typically this would have been a system generated random string of characters available at Recovery Token Authenticator creation time. host_address - the apparent origin host IP address from where the authentication attempt is originating. This value is used in the enforcement of applicable Network Rules. opts - a Keyword List of values that either optionally override default behaviors of this function or are optionally required. The available options are: owning_owner_id - if the Access Account is an Owned Access Account, this value must be set to the record ID of the Access Account's Owner. Otherwise it must be set nil or not provided. The default value is nil . host_ban_rate_limit - overrides the default host IP address based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 30 attempts over a time window of 2 hours. identifier_rate_limit - overrides the default identifier based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 5 attempts over a time window of 30 minutes. deadline_minutes - overrides the default number of minutes that an authentication process can take before being rejected for taking too long. This deadline is needed because an arbitrary time can pass due to user interaction if the authenticator allows for an interruptable authentication process. The default deadline allows for 5 minutes to complete the authentication process.","ref":"MssubMcp.html#authenticate_recovery_token/4","title":"MssubMcp.authenticate_recovery_token/4","type":"function"},{"doc":"Confirms a specific Access Account Identity record as being valid for use. The return value of this function is a result tuple where a success tuple ( {:ok, &lt;value&gt;} ) indicates that the function processed without error, not that the validation was successful. The value element of the success tuple, the Authentication State, carries information about the actual outcome of the authentication attempt; see MscmpSystAuthn.Types.authentication_state/0 for more about the specific information carried by the Authentication State value. Otherwise, an error tuple is returned indicating the nature of the processing failure. If the Authentication State's status is returned as :authenticated , the validation process succeeded. On success the target Identity record has its validated field set to the current date/time and the Validation Authenticator is deleted from the system. The authentication process executed by this function is not interruptible. The initial call to this function must contain all parameter values required to fully complete the authentication process. Any missing information will cause the authentication attempt to be rejected. Parameters identifier - the identifier defined by the Validation Token identifier. Typically this would have been a system generated random string of characters available at Validation Token Authenticator creation time. plaintext_token - the plaintext Validation Token credential. Typically this would have been a system generated random string of characters available at Validation Token Authenticator creation time. host_address - the apparent origin host IP address from where the authentication attempt is originating. This value is used in the enforcement of applicable Network Rules. opts - a Keyword List of values that either optionally override default behaviors of this function or are optionally required. The available options are: owning_owner_id - if the Access Account is an Owned Access Account, this value must be set to the record ID of the Access Account's Owner. Otherwise it must be set nil or not provided. The default value is nil . host_ban_rate_limit - overrides the default host IP address based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 30 attempts over a time window of 2 hours. identifier_rate_limit - overrides the default identifier based Rate Limit. The value is set via a tuple in the following form: {&lt;Maximum Attempts&gt;, &lt;Time Window in Seconds&gt;} . The default value is 5 attempts over a time window of 30 minutes. deadline_minutes - overrides the default number of minutes that an authentication process can take before being rejected for taking too long. This deadline is needed because an arbitrary time can pass due to user interaction if the authenticator allows for an interruptable authentication process. The default deadline allows for 5 minutes to complete the authentication process.","ref":"MssubMcp.html#authenticate_validation_token/4","title":"MssubMcp.authenticate_validation_token/4","type":"function"},{"doc":"Create a new Access Account. Parameters access_account_params - a map of required and optional parameters which define the new Access Account record. Required attributes in this map are: internal_name , external_name , access_account_state_id , and allow_global_logins . Example iex&gt; state = MssubMcp . get_access_account_state_default ( ) iex&gt; { :ok , % Msdata.SystAccessAccounts { } } = ...&gt; MssubMcp . create_access_account ( ...&gt; %{ ...&gt; internal_name : &quot;example_create_accnt&quot; , ...&gt; external_name : &quot;Create Access Account Example&quot; , ...&gt; access_account_state_id : state . id , ...&gt; allow_global_logins : true ...&gt; } ...&gt; )","ref":"MssubMcp.html#create_access_account/1","title":"MssubMcp.create_access_account/1","type":"function"},{"doc":"Creates a new Application record. Application Subsystems need means by which they can make the MscmpSystInstance component aware of their existence and this function provides the means by which to do that. Note Note that this function is meant to expose Application record management to the relevant Application Subsystem programs and is not intended for regular management activities by end users. Parameters application_params - the parameters with which the new Application record should be created. The following attribute values are available: internal_name - a predetermined unique identifier for the Application record for use in programmatic contexts. This attribute is required and must be unique in the system. display_name - a unique, friendly name identifying the Application and for use in user interfaces. This attribute is required and must be unique in the system. syst_description - a user facing description of the Application including any special usage requirements or preconditions. This attribute is required. Examples Creating a new Application record. iex&gt; new_app_params = %{ ...&gt; internal_name : &quot;ex_app1&quot; , ...&gt; display_name : &quot;Example App 1&quot; , ...&gt; syst_description : &quot;An example application&quot; ...&gt; } iex&gt; { :ok , % Msdata.SystApplications { } } = ...&gt; MssubMcp . create_application ( new_app_params )","ref":"MssubMcp.html#create_application/1","title":"MssubMcp.create_application/1","type":"function"},{"doc":"Creates Application Context records for the identified Application. Application Contexts describe the Datastore Contexts each Instance is expected to support to allow an Application to access its data. Application Subsystems use this function to create the any required Application Context records not already registered in the MscmpSystInstance data. Application Contexts are used in the creation of Msdata.SystInstanceContexts records and provide a number of default values for the Instance Context records. Note Note that this function is meant to expose Application record management to the relevant Application Subsystem programs and is not intended for regular management activities by end users. Parameters application_context_params - a map defining the attributes which will be used to create the new Application Context record. The attributes are: internal_name - a predetermined unique identifier for the Application Context record for use in programmatic contexts. This attribute is required and must be unique in the system. display_name - a unique, friendly name identifying the Application Context and for use in user interfaces. This attribute is required and must be unique in the system. application_id - a reference to the ID value of the parent Application record. A valid value for this attribute is required unless the application_name attribute is set with the Internal Name of an existing Application record. If both this attribute and the application_name attributes are set, the attribute_name value will be used to resolve the parent Application. application_name - a reference to the Internal Name value of an existing Application record. This value is used to look-up the application_id and so if this attribute is provided with a valid value, the application_id attribute may be omitted. The value of this attribute takes precedence over any value set explicitly in the application_id attribute. If application_id is omitted, then this attribute is required. description - a description of the Application Context's role in the application and database. This becomes a comment in the database attached to the database role created for the context. start_context - a required boolean value which establishes the default value of derived Instance Context ( Msdata.SystInstanceContexts ) start_context settings. When true, an Instance Context record derived from this Application Context will be, by default, started as active database connections when the parent Instance is started. False indicates that by default Instance startup will not establish database connections for the context. This value muse be set false for any Application Context defining a Datastore Owner Context or any other Context where the login_context is set false . login_context - a required boolean value which indicates if a derived Instance Context is used to create database connections. If true, a derived Instance Context record will provide login information to establish a database connection on Instance start so long as its start_context value is also true . If this attribute is set false the derived Instance Context record will not define a Context capable of logging into the database. database_owner_context - a required boolean value which, when true, is designates an Application Context record as establishing the default values for Instance Datastore/database owners. If true, the start_context and login_context attributes must be set false as owner contexts are not used for database connectivity not may be started during the Instance start process. Examples Create an database owner Application Context record. iex&gt; new_context_params = %{ ...&gt; internal_name : &quot;ex_app2_owner&quot; , ...&gt; display_name : &quot;Example App 2 Owner&quot; , ...&gt; application_name : &quot;ex_app2&quot; , ...&gt; description : &quot;Database role owning objects for &#39;ex_app2&#39;.&quot; , ...&gt; start_context : false , ...&gt; login_context : false , ...&gt; database_owner_context : true ...&gt; } iex&gt; { :ok , % Msdata.SystApplicationContexts { } } = ...&gt; MssubMcp . create_application_context ( new_context_params )","ref":"MssubMcp.html#create_application_context/1","title":"MssubMcp.create_application_context/1","type":"function"},{"doc":"Creates an API Token Authenticator for the requested Access Account. On successful API Token Authenticator creation, a success tuple is returned where the value element is an Authenticator Result in the form of: { :ok , %{ access_account_id : &quot;c3c7fafd-5c45-11ed-ab46-f3d9be809bf9&quot; , account_identifier : &quot;EQH2jj38ha4qnYWAC8VZ&quot; , credential : &quot;8N5Tp81aeOCrYW9PECANrcwKCroSet3MlMp5BbKb&quot; } } It is important to note that this result value is the only time that the API Token Credential plaintext is available. After the function result is discarded the credential is no longer obtainable in plaintext form. Parameters access_account_id - the record ID of the Access Account for which to create the API Token Authenticator. opts - a Keyword List of optional values which changes the default behavior of the Authenticator creation process. Available options are: identity_token_length - this option overrides the default number of random characters to generate for the API Token Identity identifier. The default number of characters generated is 20. identity_tokens - overrides the default character set to use in the generation of the API Token Identity identifier. The default value is :mixed_alphanum . See the MscmpSystUtils.get_random_string/2 documentation for the tokens parameter which receives this option for more information regarding valid values for this setting. external_name - API Token Identities permit Access Account holder naming of the Identity as it may be common for an one Access Account to require multiple API Token Authenticators for different purposes. This option allows that name to be set at Identity creation time. The default value is nil . credential_token_length - this option overrides the default number of random characters to generate for the API Token Credential. The default number of characters generated is 40. credential_tokens - overrides the default character set to use in the generation of the API Token Credential. The default value is :mixed_alphanum . See the MscmpSystUtils.get_random_string/2 documentation for the tokens parameter which receives this option for more information regarding valid values for this setting. credential_token - overrides the system generated API Token Credential with the value of this option. The default is to allow the system to automatically generate the credential.","ref":"MssubMcp.html#create_authenticator_api_token/2","title":"MssubMcp.create_authenticator_api_token/2","type":"function"},{"doc":"Creates an Email/Password Authenticator for an Access Account. This function creates an Email Identity, Password Credential, and optionally an Identity Validation Authenticator (created by default). This function is typically used on adding a new Access Account to the system. The process is wrapped in a database transaction so if any one part of the Authenticator creation process fails, all parts should fail. This function will fail if you attempt to create an Authenticator of this type for an Access Account which already has one. In the case of Email Identity replacement, use the specific Identity process to create a new Email Identity instead of this more expansive process. On successful save of the Authenticator records, a success tuple is returned where the value element of the tuple will include basic data that might be required for later processing. If Email/Password Authenticator was created requiring validation (the default), the success tuple's value element will include data required to process the Validation Authenticator: { :ok , %{ access_account_id : &quot;c3c7fafd-5c45-11ed-ab46-f3d9be809bf9&quot; , account_identifier : &quot;SomeEmail@somedomain.com&quot; , validation_credential : &quot;Uo0kPoCOZd004g4X7IFWg3iJ7pz7XiBRBDkBGGiu&quot; , validation_identifier : &quot;5D7i6XmmH0HpYL72tePlEdSUMVL9ygMrEsDSGoTE&quot; } } Note that this is the only time the Validation Authenticator is provided and the Validation Credential plaintext is not recoverable after this return value is provided. When a Validation Authenticator is not created, no validation data will be included in the result: { :ok , %{ access_account_id : &quot;c3c7fafd-5c45-11ed-ab46-f3d9be809bf9&quot; , account_identifier : &quot;SomeEmail@somedomain.com&quot; } } Parameters access_account_id - the Access Account for whom the Email/Password Authenticator is being created. email_address - the email address which will identify the Access Account. plaintext_pwd - the candidate password for use a the Credential in Email/Password authentication processes.","ref":"MssubMcp.html#create_authenticator_email_password/4","title":"MssubMcp.create_authenticator_email_password/4","type":"function"},{"doc":"Adds a host IP address to the global disallowed hosts list. Disallowed hosts are IP addresses which are prevented from authenticating users with the system, and by extension prevents host access to application functions generally. Hosts are disallowed on a global basis and may be added to the list based on system heuristics which detect suspicious activity. Successfully adding a host to the list returns a success tuple and a struct representing the record just created. Attempting to add a host which is already part of the list will also result in a success tuple, but no record is returned. Parameters host_address - the IP address of the host to disallow. Examples Adding a new host to the list. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , false } = MssubMcp . host_disallowed ( ~i&quot;10.123.123.20&quot; ) iex&gt; { :ok , % Msdata.SystDisallowedHosts { } } = ...&gt; MssubMcp . create_disallowed_host ( ~i&quot;10.123.123.20&quot; ) Attempting to add a host already on the list. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , true } = MssubMcp . host_disallowed ( ~i&quot;10.123.123.3&quot; ) iex&gt; { :ok , nil } = ...&gt; MssubMcp . create_disallowed_host ( ~i&quot;10.123.123.3&quot; )","ref":"MssubMcp.html#create_disallowed_host/1","title":"MssubMcp.create_disallowed_host/1","type":"function"},{"doc":"Adds a new password to the Disallowed Passwords list. Disallowed passwords are passwords that are commonly known, are known to have been revealed in a successful hacking attack, or are otherwise not available for users to choose for their authentication credential. Enforcing that these passwords are not available for use depends upon the effective disallow_compromised Password Rule for the Access Account attempting authentication. An attempt to add a password which is already on the list will succeed as though the password were not already part of the list. Parameters password - The plaintext password to add to the list of disallowed passwords. Examples Adding a password successfully will simply return :ok . iex&gt; MssubMcp . create_disallowed_password ( &quot;Example Disallowed Password&quot; ) :ok Any subsequent attempt to add the same password to the list again will appear to succeed while silently doing nothing. iex&gt; MssubMcp . create_disallowed_password ( &quot;Example Disallowed Password&quot; ) :ok","ref":"MssubMcp.html#create_disallowed_password/1","title":"MssubMcp.create_disallowed_password/1","type":"function"},{"doc":"Creates a new Global Network Rule using the provided parameters. Global Network Rules are checked prior to all attempted user authentication events and have precedence over Owner and Instance Network Rules, though they are secondary to the Disallowed Hosts list. On successful creation, a result tuple in the form {:ok, &lt;new record&gt;} is returned where the &lt;new record&gt; is the fully populated Data struct of the record just created. If an exception is raised this function will return a failure tuple in the form of {:error, &lt;exception data&gt;} . Parameters insert_params - a map representing the values to use when creating the new Global Network Rule. See MscmpSystAuthn.Types.global_network_rule_params/0 for the available attributes. Example Adding a new &quot;Allow&quot; Global Network Rule for a CIDR network. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; new_global_rule = %{ ...&gt; ordering : 20 , ...&gt; functional_type : :allow , ...&gt; ip_host_or_network : ~i&quot;10.100.150.0/24&quot; ...&gt; } iex&gt; { :ok , % Msdata.SystGlobalNetworkRules { } } = ...&gt; MssubMcp . create_global_network_rule ( new_global_rule ) Adding a new &quot;Deny&quot; Global Network Rule for an IP Address range. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; new_global_rule = %{ ...&gt; ordering : 21 , ...&gt; functional_type : :deny , ...&gt; ip_host_or_network : nil , ...&gt; ip_host_range_lower : ~i&quot;10.100.151.1&quot; , ...&gt; ip_host_range_upper : ~i&quot;10.100.152.254&quot; ...&gt; } iex&gt; { :ok , % Msdata.SystGlobalNetworkRules { } } = ...&gt; MssubMcp . create_global_network_rule ( new_global_rule )","ref":"MssubMcp.html#create_global_network_rule/1","title":"MssubMcp.create_global_network_rule/1","type":"function"},{"doc":"Creates a new Instance record. Creating a new Instance record will also create new Instance Context records based on the defaults defined in the Instance Type Context records associated with the Instance Type and Application of the new Instance. This is accomplished with database triggers. Parameters instance_params - A map of attributes to use in creating the new Instance record in the system. internal_name - a pre-generated identifier for Instance record for use in programmatic contexts. This value is required and must be unique in the system. display_name - a friendly name which identifies the record for use in user interfaces. This value is required and must be unique in the system. dbserver_name - the name of the database server where the Instance Datastore exists. This value is required. Note that invalid values here may not be detected until such time as the Instance Datastore use is attempted. application_id - the record ID of the Application for which this Instance is being created. This value is required unless the application_name attribute has been provided instead. application_name - the internal name of the Application for which this Instance is being created. This value is requires unless the application_id attribute has been provided instead. instance_code - A value used in constructing the Instance Context credentials. This value should be a randomly generated series of between 8 and 64 bytes. instance_type_id - the record ID of the Instance Type of the new Instance record. This attribute is required unless the instance_type_name attribute is provided instead. instance_type_name - the internal name of the Instance Type of the new Instance record. This attribute is requires unless the instance_type_id attribute is provided instead. instance_state_id - the record ID of the Instance State in which to create the new Instance record. This value may be omitted and allowed to default based on the configured default Instance State. Optionally the Instance State may also be identified by the instance_state_name attribute. instance_state_name - the internal name of the Instance State in which to create the new Instance record. This value may be omitted and allowed to default based on the configured default Instance State. Optionally the Instance State may also be identified by the instance_state_id attribute. owner_id - the record ID of the Owner of the Instance. This attribute is required unless the owner_name attribute is provided. owner_name - th internal name of the Owner of the Instance. This attribute is required unless the owner_id attribute is provided. owning_instance_id - if the Instance is associated with a parent instance, such as a sandbox Instance being created for a parent production Instance, the parent/child relationship may be expressed by assigning this attribute to the record ID of the parent. This attribute is not required and the parent Instance may be identified by the owning_instance_name attribute instead. owning_instance_name - an alternate identification method for identifying a parent Instance when creating a child Instance. This attribute is optional and may used in lieu of using the owning_instance_id attribute to establish the parent/child relationship of the new Instance.","ref":"MssubMcp.html#create_instance/1","title":"MssubMcp.create_instance/1","type":"function"},{"doc":"Creates a new Instance Network Rule using the provided parameters. Instance Network Rules the checked after the Disallowed Hosts list, the Global Network Rules, and the Instance Network Rules and apply to all Instances owned by the specified Instance, unless a higher precedence rule already applies to the host. On successful creation, a result tuple in the form {:ok, &lt;new record&gt;} is returned where the &lt;new record&gt; is the fully populated Data struct of the record just created. If an exception is raised this function will return a failure tuple in the form of {:error, &lt;exception data&gt;} . Parameters instance_id - the record ID of the Instance for whom the Instance Network Rule is being created. insert_params - a map representing the values to use when creating the new Instance Network Rule. See MscmpSystAuthn.Types.instance_network_rule_params/0 for the available attributes. Example Adding a new &quot;Allow&quot; Instance Network Rule for a CIDR network. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , instance_id } = ...&gt; MssubMcp . get_instance_id_by_name ( &quot;app1_owner8_instance_types_std&quot; ) iex&gt; new_instance_rule = %{ ...&gt; ordering : 1 , ...&gt; functional_type : :allow , ...&gt; ip_host_or_network : ~i&quot;10.100.170.0/24&quot; ...&gt; } iex&gt; { :ok , % Msdata.SystInstanceNetworkRules { } } = ...&gt; MssubMcp . create_instance_network_rule ( instance_id , new_instance_rule ) Adding a new &quot;Deny&quot; Instance Network Rule for an IP Address range. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , instance_id } = ...&gt; MssubMcp . get_instance_id_by_name ( &quot;app1_owner8_instance_types_std&quot; ) iex&gt; new_instance_rule = %{ ...&gt; ordering : 2 , ...&gt; functional_type : :deny , ...&gt; ip_host_or_network : nil , ...&gt; ip_host_range_lower : ~i&quot;10.100.171.1&quot; , ...&gt; ip_host_range_upper : ~i&quot;10.100.172.254&quot; ...&gt; } iex&gt; { :ok , % Msdata.SystInstanceNetworkRules { } } = ...&gt; MssubMcp . create_instance_network_rule ( instance_id , new_instance_rule )","ref":"MssubMcp.html#create_instance_network_rule/2","title":"MssubMcp.create_instance_network_rule/2","type":"function"},{"doc":"Creates a new Instance Type record via the MscmpSystEnums service. Parameters instance_type_params - the parameters to use when creating the new Instance Type. The attributes internal_name , display_name , external_name , user_description , and user_options fields are required for Instance Type creation.","ref":"MssubMcp.html#create_instance_type/1","title":"MssubMcp.create_instance_type/1","type":"function"},{"doc":"Creates an Instance Type/Application association. Associating an Instance Type with an Application expresses that the Instance Type can support Instances of the given application. Parameters instance_type_id - the ID value of the Instance Type which will support Application Instances. application_id - the ID value which identifies the Application to be supported.","ref":"MssubMcp.html#create_instance_type_application/2","title":"MssubMcp.create_instance_type_application/2","type":"function"},{"doc":"Creates a new Account Code for an Access Account or resets the Account Code if is already exists. On successful Account Code Identity creation or reset, an Authenticator Result value is returned via a success tuple ( {:ok, &lt;result&gt;} ). The expected form of the result for a new Account Code is: %{ access_account_id : &quot;c3c7fafd-5c45-11ed-ab46-f3d9be809bf9&quot; , account_identifier : &quot;QY7QJTWH7MSK&quot; } There is no associated Credential or Validator for this Identity Type. Parameters access_account_id - the record ID of the Access Account that will be identified by the Account Code Identity. opts - a Keyword list of optional settings which can influence the behavior of the function call. Available options are: account_code - this option overrides the randomly generated Account Code with the value of this option. By default the system randomly generates the Account Code. identity_token_length - overrides the number of characters to randomly generate for use as the Account Code Identifier. The default value is 12. identity_tokens - overrides the character set used to create the randomly generated Account Code Identifier. The default value is :b32c . See the MscmpSystUtils.get_random_string/2 documentation for the tokens parameter which receives this option for more information regarding valid values for this setting.","ref":"MssubMcp.html#create_or_reset_account_code/2","title":"MssubMcp.create_or_reset_account_code/2","type":"function"},{"doc":"Creates a new Owner record. Parameters owner_params - a map of Owner record attributes to use when creating a new record. internal_name - a predetermined unique identifier for the Owner record for use in programmatic contexts. This attribute is required and must be unique in the system. display_name - a unique, friendly name identifying the owner and for use in user interfaces. This attribute is required and must be unique in the system. owner_state_id - the Owner State value with which to create the new Owner record. If not provided in the function call, this attribute will be defaulted to the configured Owner State default value for the enumeration.","ref":"MssubMcp.html#create_owner/1","title":"MssubMcp.create_owner/1","type":"function"},{"doc":"Creates a new Owner Network Rule using the provided parameters. Owner Network Rules the checked after the Disallowed Hosts list, the Global Network Rules, and the Instance Network Rules and apply to all Instances owned by the specified Owner, unless a higher precedence rule already applies to the host. On successful creation, a result tuple in the form {:ok, &lt;new record&gt;} is returned where the &lt;new record&gt; is the fully populated Data struct of the record just created. If an exception is raised this function will return a failure tuple in the form of {:error, &lt;exception data&gt;} . Parameters owner_id - the record ID of the Owner for whom the Owner Network Rule is being created. insert_params - a map representing the values to use when creating the new Owner Network Rule. See MscmpSystAuthn.Types.owner_network_rule_params/0 for the available attributes. Example Adding a new &quot;Allow&quot; Owner Network Rule for a CIDR network. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , owner_id } = MssubMcp . get_owner_id_by_name ( &quot;owner8&quot; ) iex&gt; new_owner_rule = %{ ...&gt; ordering : 1 , ...&gt; functional_type : :allow , ...&gt; ip_host_or_network : ~i&quot;10.100.160.0/24&quot; ...&gt; } iex&gt; { :ok , % Msdata.SystOwnerNetworkRules { } } = ...&gt; MssubMcp . create_owner_network_rule ( owner_id , new_owner_rule ) Adding a new &quot;Deny&quot; Owner Network Rule for an IP Address range. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , owner_id } = MssubMcp . get_owner_id_by_name ( &quot;owner8&quot; ) iex&gt; new_owner_rule = %{ ...&gt; ordering : 2 , ...&gt; functional_type : :deny , ...&gt; ip_host_or_network : nil , ...&gt; ip_host_range_lower : ~i&quot;10.100.161.1&quot; , ...&gt; ip_host_range_upper : ~i&quot;10.100.162.254&quot; ...&gt; } iex&gt; { :ok , % Msdata.SystOwnerNetworkRules { } } = ...&gt; MssubMcp . create_owner_network_rule ( owner_id , new_owner_rule )","ref":"MssubMcp.html#create_owner_network_rule/2","title":"MssubMcp.create_owner_network_rule/2","type":"function"},{"doc":"Creates Owner Password Rules for the requested Owner. Owners may optionally define their own Password Rules for their users so long as their desired rules are of equal or greater stringency than the Global Password Rules. If the new Owner Password Rules are defined to be less stringent than the current Global Password Rules, the Owner Password Rules will be saved as requested, but ignored when applied in favor of the more stringent rule. Parameters owner_id - the record ID of the Owner for whom the Password Rules are being created. insert_params - a map of the values to use when creating the new record. See MscmpSystAuthn.Types.password_rule_params/0 for details regarding the available attributes.","ref":"MssubMcp.html#create_owner_password_rules/2","title":"MssubMcp.create_owner_password_rules/2","type":"function"},{"doc":"Declines an unaccepted/unexpired invitation made to an Access Account to access an Instance. This process is only needed in the case where a syst_access_account_instance_assocs invitation may be accepted or declined by the Access Account holder. To be declined in this process the invitation record must have been previously created (see invite_to_instance/3 ), must not be expired, previously declined, or previously accepted; trying to decline a record in such a state will result in an error tuple being returned. Naturally, the Access Account holder may choose to never accept or decline the invitation and may simply allow the invitation to expire. Parameters access_account_instance_assoc - this value may be either the populated Msdata.SystAccessAccountInstanceAssocs struct to decline or the record ID of the record to decline.","ref":"MssubMcp.html#decline_instance_invite/1","title":"MssubMcp.decline_instance_invite/1","type":"function"},{"doc":"Declines an unaccepted/unexpired invitation made to an Access Account to access an Instance, referencing the record by its composite key values. This function performs the same process as decline_instance_invite/1 , but will look up the record to decline using the Access Account, Instance, and Credential Type record ID values. Parameters access_account_id - the record ID of the Access Account declining the invitation to the Instance. instance_id - the Instance record ID to which the Access Account has been invited.","ref":"MssubMcp.html#decline_instance_invite/2","title":"MssubMcp.decline_instance_invite/2","type":"function"},{"doc":"Deletes an Application Context record from the system Application Subsystems may use this function to remove an obsolete Application Context record from the system. Note Note that this function is meant to expose Application record management to the relevant Application Subsystem programs and is not intended for regular management activities by end users. Warning! While this function will remove an Application Context record from the system and prevent any new Instances of the Application from including the deleted Context, existing Instance Contexts based on the Application Context are not currently cleaned up by this function. Any clean-up of existing Instance Context data and of associated database roles and verification of extended clean-up activities is therefore the responsibility of the caller. On successful delete of the record, a success tuple is returned to the caller ( {:ok, :deleted} ). If the requested record is not found in the database, the returned value is {:ok, :not_found} . Any other outcome is returned via an error tuple. Parameters application_context_id - the record ID of the Application Context record to delete. This value is required. Examples Deleting an existing Application Context. iex&gt; record_id = MssubMcp . get_application_context_id_by_name ( &quot;ex_app2_delctx&quot; ) iex&gt; MssubMcp . delete_application_context ( record_id ) { :ok , :deleted } Attempting to delete a non-existent record. iex&gt; record_id = &quot;00000000-0000-0000-0000-000000000000&quot; iex&gt; MssubMcp . delete_application_context ( record_id ) { :ok , :not_found }","ref":"MssubMcp.html#delete_application_context/1","title":"MssubMcp.delete_application_context/1","type":"function"},{"doc":"Deletes a host IP address from the Disallowed Hosts list based on either a Msdata.SystDisallowedHosts record or the ID of such a record. If the record is found and deleted a success tuple in the form {:ok, :deleted} is returned. If the record is not found the success tuple {:ok, :not_found} is returned. Once a host is removed from the Disallowed Hosts list, users are allowed to authenticate from the host, so long as no other effective Network Rule prevents the action. Parameters disallowed_host - either the fully populated Msdata.SystDisallowedHosts data struct for the record to delete or the ID of the record. Note that when the data struct is provided Ecto optimistic locking is applied to the the delete operation. Examples Deleting a host by record ID. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , target_host_record } = ...&gt; MssubMcp . get_disallowed_host_record_by_host ( ~i&quot;10.10.250.4&quot; ) iex&gt; MssubMcp . delete_disallowed_host ( target_host_record . id ) { :ok , :deleted } Deleting a host by record struct. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , target_host_record } = ...&gt; MssubMcp . get_disallowed_host_record_by_host ( ~i&quot;10.10.250.5&quot; ) iex&gt; MssubMcp . delete_disallowed_host ( target_host_record ) { :ok , :deleted } Deleting a struct for a no longer existent record. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , target_host_record } = ...&gt; MssubMcp . get_disallowed_host_record_by_host ( ~i&quot;10.10.250.6&quot; ) iex&gt; MssubMcp . delete_disallowed_host ( target_host_record ) { :ok , :deleted } iex&gt; MssubMcp . delete_disallowed_host ( target_host_record ) { :ok , :not_found }","ref":"MssubMcp.html#delete_disallowed_host/1","title":"MssubMcp.delete_disallowed_host/1","type":"function"},{"doc":"Deletes a host IP address from the Disallowed Hosts list as looked up by the host IP address. If the record is found and deleted a success tuple in the form {:ok, :deleted} is returned. If the record is not found the success tuple {:ok, :not_found} is returned. Any other condition would cause an error tuple to be returned. Once a host is removed from the Disallowed Hosts list, users are allowed to authenticate from the host, so long as no other effective Network Rule prevents the action. Parameters host_addr - the IP address of the host that is no longer to be disallowed. Examples Deleting a host that does exist in the list. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , true } = MssubMcp . host_disallowed ( ~i&quot;10.10.251.1&quot; ) iex&gt; { :ok , :deleted } = ...&gt; MssubMcp . delete_disallowed_host_addr ( ~i&quot;10.10.251.1&quot; ) iex&gt; { :ok , false } = MssubMcp . host_disallowed ( ~i&quot;10.10.251.1&quot; ) Attempting to delete a host not already on the list. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , false } = MssubMcp . host_disallowed ( ~i&quot;10.10.251.10&quot; ) iex&gt; { :ok , :not_found } = ...&gt; MssubMcp . delete_disallowed_host_addr ( ~i&quot;10.10.251.10&quot; )","ref":"MssubMcp.html#delete_disallowed_host_addr/1","title":"MssubMcp.delete_disallowed_host_addr/1","type":"function"},{"doc":"Removes a password from the disallowed passwords list. On success, this function will return a success tuple indicating if the requested password was deleted from the disallowed passwords list ( {:ok, :deleted} ) or if the password simply wasn't found in the list ( {:ok, :not_found} ). Parameters password - the plaintext password to delete from the disallowed passwords list. Examples Result when deleting a record from the list. iex&gt; MssubMcp . delete_disallowed_password ( &quot;No Longer Disallowed&quot; ) { :ok , :deleted } Result when trying to delete a record not already on the list. iex&gt; MssubMcp . delete_disallowed_password ( &quot;Not on List&quot; ) { :ok , :not_found }","ref":"MssubMcp.html#delete_disallowed_password/1","title":"MssubMcp.delete_disallowed_password/1","type":"function"},{"doc":"Deletes an existing Global Network Rule record as referenced by the record ID. On successful deletion, a simple result of :ok is returned. On error, an error tuple in the form of {:error, &lt;exception&gt;} is returned. Parameters global_network_rule_id - The record ID of the Global Network Rule record to delete.","ref":"MssubMcp.html#delete_global_network_rule/1","title":"MssubMcp.delete_global_network_rule/1","type":"function"},{"doc":"Deletes an existing Instance Network Rule record as referenced by the record ID. On successful deletion, a simple result of :ok is returned. On error, an error tuple in the form of {:error, &lt;exception&gt;} is returned. Parameters instance_network_rule_id - The record ID of the Instance Network Rule record to delete.","ref":"MssubMcp.html#delete_instance_network_rule/1","title":"MssubMcp.delete_instance_network_rule/1","type":"function"},{"doc":"Deletes an Instance Type from the MscmpSystEnums service. Note that an attempt to delete an in-use Instance Type will result in a constraint error. Parameters instance_type_name - the internal name of an Instance Type to delete from the system.","ref":"MssubMcp.html#delete_instance_type/1","title":"MssubMcp.delete_instance_type/1","type":"function"},{"doc":"Disassociates the Instance Type/Application support relationship. Note that this will only prevent the creation of new Instances of the Instance Type for the Application. Existing Instances that were created when the relationship was valid will continue to exist. Parameters instance_type_application - This value can be either the ID value of the Instance Type Application record or a Msdata.SystInstanceTypeApplications struct with at least the id field defined.","ref":"MssubMcp.html#delete_instance_type_application/1","title":"MssubMcp.delete_instance_type_application/1","type":"function"},{"doc":"Deletes an existing Owner Network Rule record as referenced by the record ID. On successful deletion, a simple result of :ok is returned. On error, an error tuple in the form of {:error, &lt;exception&gt;} is returned. Parameters owner_network_rule_id - The record ID of the Owner Network Rule record to delete.","ref":"MssubMcp.html#delete_owner_network_rule/1","title":"MssubMcp.delete_owner_network_rule/1","type":"function"},{"doc":"Deletes an Owner Password Rules record from the system. Parameters owner_id - the Owner record ID whose Password Rules are to be deleted.","ref":"MssubMcp.html#delete_owner_password_rules/1","title":"MssubMcp.delete_owner_password_rules/1","type":"function"},{"doc":"Retrieves a fully populated Access Account record as found by internal name. 'Fully populated' in this context means that the related Account Account State and related functional type data is also retrieved along with the actual Access Account data. Parameters access_account_name - the internal name of the Access Account record to retrieve. Example iex&gt; { ...&gt; :ok , ...&gt; % Msdata.SystAccessAccounts { internal_name : &quot;example_accnt&quot; } ...&gt; } = ...&gt; MssubMcp . get_access_account_by_name ( &quot;example_accnt&quot; )","ref":"MssubMcp.html#get_access_account_by_name/1","title":"MssubMcp.get_access_account_by_name/1","type":"function"},{"doc":"Looks up an Access Account record ID by its internal name. Parameters access_account_name - the internal name of the record for which to retrieve the record ID. Examples iex&gt; { :ok , access_account_id } = ...&gt; MssubMcp . get_access_account_id_by_name ( &quot;example_accnt&quot; ) iex&gt; is_binary ( access_account_id ) true","ref":"MssubMcp.html#get_access_account_id_by_name/1","title":"MssubMcp.get_access_account_id_by_name/1","type":"function"},{"doc":"Retrieves the Password Rules to apply for a requested Access Account as identified by its record ID. When evaluating the validity of candidate passwords for a user the system retrieves the Global Password Rules and then the Access Account Owner Password Rules, if such Rules have been defined. The system will compare each of the Rules in the Global and Owner Password Rules with each other and select the rule which demands the greatest stringency. This process results in a composite Password Rule which can then be applied to test any candidate password for validity. This calculated composite Password Rule is what is returned by this function. The return value is wrapped in a result tuple, {:ok, &lt;rule&gt;} on success and {:error, &lt;exception&gt;} in cases of failure. Parameters access_account_id - the Access Account record ID of the user.","ref":"MssubMcp.html#get_access_account_password_rule/1","title":"MssubMcp.get_access_account_password_rule/1","type":"function"},{"doc":"Retrieves the Password Rules to apply for a requested Access Account as identified by its record ID, raising on error. This function works the same as get_access_account_password_rule/1 except that any errors cause an exception to be raised. Parameters access_account_id - the Access Account record ID of the user.","ref":"MssubMcp.html#get_access_account_password_rule!/1","title":"MssubMcp.get_access_account_password_rule!/1","type":"function"},{"doc":"Returns the Access Account State record for the given Internal Name; raises on error. On successful execution either the requested Access Account State Enumeration record is returned or nil if the record does not exist. Parameters access_account_state_name - the Internal Name of the desire Access Account State record to return. Examples Finding a Access Account State record by Internal Name. iex&gt; % Msdata.SystEnumItems { } = ...&gt; MssubMcp . get_access_account_state_by_name ( &quot;access_account_states_sysdef_active&quot; ) Looking for a non-existent record. iex&gt; MssubMcp . get_access_account_state_by_name ( &quot;nonexistent_type&quot; ) nil","ref":"MssubMcp.html#get_access_account_state_by_name/1","title":"MssubMcp.get_access_account_state_by_name/1","type":"function"},{"doc":"Returns the Access Account State Enumeration record which is configured as being default. If no Access Account State record is configured as default, then nil is returned. Parameters functional_type - an optional parameter which, if provided and not nil , will return the default Access Account State record configured for the requested functional type rather than the system default Access Account State. The default for this parameter is to treat the parameter as not provided ( nil ). Examples Requesting the system default Access Account State. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;access_account_states_sysdef_pending&quot; } = ...&gt; MssubMcp . get_access_account_state_default ( ) Requesting the default Access Account State for a specific functional type. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;access_account_states_sysdef_inactive&quot; } = ...&gt; MssubMcp . get_access_account_state_default ( :access_account_states_inactive )","ref":"MssubMcp.html#get_access_account_state_default/1","title":"MssubMcp.get_access_account_state_default/1","type":"function"},{"doc":"Retrieves the Account Code Identity record defined for the requested Access Account if one exists. If no Account Code Identity exists for the requested Access Account a tuple in the form of {:ok, :not_found} is returned. Parameters access_account_id - the Access Account record ID for which to retrieve the Account Code Identity.","ref":"MssubMcp.html#get_account_code_by_access_account_id/1","title":"MssubMcp.get_account_code_by_access_account_id/1","type":"function"},{"doc":"Returns a populated Msdata.SystApplications struct for the requested record. Parameters application - either the record ID of the desired Application record or its Internal Name. This parameter is required. opts - allows optional parameters to be provided which govern the behavior of this function. The options are provided via a Keyword List. The available options are: include_contexts - a boolean value indicating whether or not to also retrieve the fully populated list of :application_contexts associated with the requested Application. Contexts are returned as a standard association of Msdata.SystApplicationContexts structs. The default value of this option is false .","ref":"MssubMcp.html#get_application/2","title":"MssubMcp.get_application/2","type":"function"},{"doc":"Retrieves the Application Context record ID for the record matching provided Internal Name argument. When the requested Application Context record can not be found this function returns nil . All errors raise an exception. Parameters application_context_name - the Internal Name value of the Application Context record to search for. Examples Finding an existing Application Context. iex&gt; id = MssubMcp . get_application_context_id_by_name ( &quot;ex_app2_idctx&quot; ) iex&gt; is_binary ( id ) true Searching for a non-existent Application Context. iex&gt; MssubMcp . get_application_context_id_by_name ( &quot;nonexistent_context&quot; ) nil","ref":"MssubMcp.html#get_application_context_id_by_name/1","title":"MssubMcp.get_application_context_id_by_name/1","type":"function"},{"doc":"Returns the Application record ID for the requested Application Internal Name; raises on error. On successful execution the record ID of the requested Application is returned. If the requested Application Internal Name is not found nil is returned. Parameters applicaton_name - the internal name of the desired Application record. Examples Finding an application returns its ID value. iex&gt; application_id = MssubMcp . get_application_id_by_name ( &quot;app1&quot; ) iex&gt; is_binary ( application_id ) true Asking for a non-existent application returns nil . iex&gt; MssubMcp . get_application_id_by_name ( &quot;nonexistent_application&quot; ) nil","ref":"MssubMcp.html#get_application_id_by_name/1","title":"MssubMcp.get_application_id_by_name/1","type":"function"},{"doc":"Returns the Network Rule which should be applied for the given Host IP Address. This function compares the provided Host IP Address against the applicable Network Rules which apply to it and return the specific rule which should be applied during the authentication process. Network Rule Precedence The specific rules to check for applicability depends on the other provided parameters. The available Network Rule sets in order of precedence are: Disallowed Hosts : Globally disallowed hosts are always checked first and no later rule can override the denial. Only removing the host from the Disallowed Hosts List can reverse this denial. Global Network Rules : These are rules applied to all presented Host IP Addresses. Instance Network Rules : Rules defined by Instance Owners and are the most granular rule level available. These Network Rules are only evaluated if the instance_id parameter is provided. Owner Network Rules : Network Rules which are applicable to all Instances of a given Owner, provided no superseding Instance Network Rule was found. This rule set is included if either the instance_id or owner_id parameter is provided. Default Network Rule : When no explicitly defined Network Rule has been found for a host, this rule will apply implicitly. The current rule grants access from any host. Return Value This function returns a result tuple. The value element of the result tuple is a map of type MscmpSystAuthn.Types.applied_network_rule/0 . The map indicates which precedence group the rule came from, the ID of the Network Rule record if the rule was derived from the various Network Rule data tables, and the Functional Type of the rule: :allow meaning the rule explicitly allows the host to attempt an authentication, or :deny indicating that the host is not allowed to attempt authentication. Parameters host_address - the Host IP Address which the user wishes to authenticate from. instance_id - the record ID of an Instance to which the user wants to gain access. This parameter is optional, though excluding this parameter will leave the Instance Network Rules might properly apply unevaluated. If this parameter is provided, the Owner of the Instance is implied and there is no need to also supply the owner_id parameter. owner_id - the record ID of an Owner which owns the candidate Instances to which the user wishes to authenticate. This parameter is not required if the instance_id parameter has been provided. Otherwise, this parameter is optional, though if the Owner has not been resolved through this parameter or via the instance_id , the Owner Network Rules that might apply to the authentication attempt will not be applied. Examples When the host is a member of the Disallowed Hosts lists. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , %{ functional_type : :deny , network_rule_id : id , precedence : :disallowed } } = ...&gt; MssubMcp . get_applied_network_rule ( ~i&quot;10.123.123.3&quot; ) iex&gt; is_binary ( id ) true When the Host IP Address does not match any explicitly defined rule and the implicit rule applies. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MssubMcp . get_applied_network_rule ( ~i&quot;10.124.124.3&quot; ) { :ok , %{ functional_type : :allow , network_rule_id : nil , precedence : :implied } } When a Global Network Rule explicitly allows the Host IP Address to attempt authentication. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , %{ functional_type : :allow , network_rule_id : id , precedence : :global } } = ...&gt; MssubMcp . get_applied_network_rule ( ~i&quot;10.125.125.3&quot; ) iex&gt; is_binary ( id ) true Note that while the examples did not include Instance or Owner IDs, the examples are none-the-less representative of cases where they are included.","ref":"MssubMcp.html#get_applied_network_rule/3","title":"MssubMcp.get_applied_network_rule/3","type":"function"},{"doc":"Returns the Network Rule which should be applied for the given Host IP Address, raising on error. This function works the same as get_applied_network_rule/3 except this function returns its result without wrapping it in a result tuple. If an error is encountered an exception is raised. Parameters host_address - the Host IP Address which the user wishes to authenticate from. instance_id - the record ID of an Instance to which the user wants to gain access. This parameter is optional, though excluding this parameter will leave the Instance Network Rules might properly apply unevaluated. If this parameter is provided, the Owner of the Instance is implied and there is no need to also supply the owner_id parameter. owner_id - the record ID of an Owner which owns the candidate Instances to which the user wishes to authenticate. This parameter is not required if the instance_id parameter has been provided. Otherwise, this parameter is optional, though if the Owner has not been resolved through this parameter or via the instance_id , the Owner Network Rules that might apply to the authentication attempt will not be applied. Examples When the host is a member of the Disallowed Hosts lists. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; %{ functional_type : :deny , network_rule_id : id , precedence : :disallowed } = ...&gt; MssubMcp . get_applied_network_rule! ( ~i&quot;10.123.123.3&quot; ) iex&gt; is_binary ( id ) true When the Host IP Address does not match any explicitly defined rule and the implicit rule applies. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MssubMcp . get_applied_network_rule! ( ~i&quot;10.124.124.3&quot; ) %{ functional_type : :allow , network_rule_id : nil , precedence : :implied } When a Global Network Rule explicitly allows the Host IP Address to attempt authentication. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; %{ functional_type : :allow , network_rule_id : id , precedence : :global } = ...&gt; MssubMcp . get_applied_network_rule! ( ~i&quot;10.125.125.3&quot; ) iex&gt; is_binary ( id ) true Note that while the examples did not include Instance or Owner IDs, the examples are none-the-less representative of cases where they are included.","ref":"MssubMcp.html#get_applied_network_rule!/3","title":"MssubMcp.get_applied_network_rule!/3","type":"function"},{"doc":"Returns the Credential Type record for the given Internal Name; raises on error. On successful execution either the requested Credential Type Enumeration record is returned or nil if the record does not exist. Parameters credential_type_name - the Internal Name of the desire Credential Type record to return. Examples Finding a Credential Type record by Internal Name. iex&gt; % Msdata.SystEnumItems { } = ...&gt; MssubMcp . get_credential_type_by_name ( &quot;credential_types_sysdef_token_api&quot; ) Looking for a non-existent record. iex&gt; MssubMcp . get_credential_type_by_name ( &quot;nonexistent_type&quot; ) nil","ref":"MssubMcp.html#get_credential_type_by_name/1","title":"MssubMcp.get_credential_type_by_name/1","type":"function"},{"doc":"Returns the Credential Type Enumeration record which is configured as being default. If no Credential Type record is configured as default, then nil is returned. Parameters functional_type - an optional parameter which, if provided and not nil , will return the default Credential Type record configured for the requested functional type rather than the system default Credential Type. The default for this parameter is to treat the parameter as not provided ( nil ). Examples Requesting the system default Credential Type. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;credential_types_sysdef_password&quot; } = ...&gt; MssubMcp . get_credential_type_default ( ) Requesting the default Credential Type for a specific functional type. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;credential_types_sysdef_mfa_totp&quot; } = ...&gt; MssubMcp . get_credential_type_default ( :credential_types_mfa_totp )","ref":"MssubMcp.html#get_credential_type_default/1","title":"MssubMcp.get_credential_type_default/1","type":"function"},{"doc":"Returns a Keyword List of the default values for each Instance State's functional type. Instance updating functions that change the Instance State value of the Instance will default to the appropriate Instance State if a specific Instance State value is not provided by the caller.","ref":"MssubMcp.html#get_default_instance_state_ids/0","title":"MssubMcp.get_default_instance_state_ids/0","type":"function"},{"doc":"Retrieves a Disallowed Host record from the database as identified by its host address. Parameters host_address - the IP address of the disallowed host record to retrieve. Example Retrieving a Disallowed Host record by IP address. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; { :ok , % Msdata.SystDisallowedHosts { } } = ...&gt; MssubMcp . get_disallowed_host_record_by_host ( ~i&quot;10.123.123.4&quot; ) Attempting to retrieve a record for a host not on the list. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MssubMcp . get_disallowed_host_record_by_host ( ~i&quot;10.125.120.20&quot; ) { :ok , nil }","ref":"MssubMcp.html#get_disallowed_host_record_by_host/1","title":"MssubMcp.get_disallowed_host_record_by_host/1","type":"function"},{"doc":"Retrieves a Disallowed Host record from the database as identified by its host address, raising on error. This function works the same as get_disallowed_host_record_by_host/1 except this function returns its result without wrapping it in a result tuple. If an error is encountered an exception is raised. Parameters host_address - the IP address of the disallowed host record to retrieve. Example Retrieving a Disallowed Host record by IP address. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; % Msdata.SystDisallowedHosts { } = ...&gt; MssubMcp . get_disallowed_host_record_by_host! ( ~i&quot;10.123.123.4&quot; ) Attempting to retrieve a record for a host not on the list. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MssubMcp . get_disallowed_host_record_by_host! ( ~i&quot;10.125.120.20&quot; ) nil","ref":"MssubMcp.html#get_disallowed_host_record_by_host!/1","title":"MssubMcp.get_disallowed_host_record_by_host!/1","type":"function"},{"doc":"Retrieves a Disallowed Host record by the record ID. This function assumes the record exists. If the record does not exist an error tuple will be returned. Parameters disallowed_host_id - the record ID of the Disallowed Host record to retrieve. Example Retrieving a Disallowed Host record by record ID. { :ok , % Msdata.SystDisallowedHosts { } } = MssubMcp . get_disallowed_host_record_by_id ( &quot;ad7f2030-5895-11ed-a888-0f8a20e745a9&quot; )","ref":"MssubMcp.html#get_disallowed_host_record_by_id/1","title":"MssubMcp.get_disallowed_host_record_by_id/1","type":"function"},{"doc":"Retrieves a Disallowed Host record by the record ID, raising on error. This function works the same as get_disallowed_host_record_by_id/1 except this function returns its result without wrapping it in a result tuple. If an error is encountered, including if the record does not exist, an exception is raised. Parameters disallowed_host_id - the record ID of the Disallowed Host record to retrieve. Example Retrieving a Disallowed Host record by record ID. % Msdata.SystDisallowedHosts { } = MssubMcp . get_disallowed_host_record_by_id! ( &quot;ad7f2030-5895-11ed-a888-0f8a20e745a9&quot; )","ref":"MssubMcp.html#get_disallowed_host_record_by_id!/1","title":"MssubMcp.get_disallowed_host_record_by_id!/1","type":"function"},{"doc":"Retrieves a Global Network Rule record based on its record ID. For a given Global Network Rule record ID this function will return a result tuple in the form of {:ok, &lt;record&gt;} where &lt;record&gt; is the fully populated Msdata.SystGlobalNetworkRules . If the record does not exist, then {:ok, :not_found} is returned. Otherwise, an error tuple in the form of {:error, &lt;exception&gt;} is returned. Parameters global_network_rule_id - the record ID of the desired Global Network Rule record.","ref":"MssubMcp.html#get_global_network_rule/1","title":"MssubMcp.get_global_network_rule/1","type":"function"},{"doc":"Retrieves a Global Network Rule record based on its record ID, raising on error. This function works the same as get_global_network_rule/1 except this function returns its result without wrapping it in a result tuple. If an error is encountered, including if the record does not exist, an exception is raised. Parameters global_network_rule_id - the record ID of the desired Global Network Rule record.","ref":"MssubMcp.html#get_global_network_rule!/1","title":"MssubMcp.get_global_network_rule!/1","type":"function"},{"doc":"Retrieves the currently active Global Password Rules. On successful retrieval a success tuple in the form of {:ok, &lt;record&gt;} is returned where record is a Msdata.SystGlobalPasswordRules struct. Any exceptions are returned via an error tuple.","ref":"MssubMcp.html#get_global_password_rules/0","title":"MssubMcp.get_global_password_rules/0","type":"function"},{"doc":"Retrieves the currently active Global Password Rules, raising on error. This function works the same as get_global_password_rules/0 except that any errors cause an exception to be raised.","ref":"MssubMcp.html#get_global_password_rules!/0","title":"MssubMcp.get_global_password_rules!/0","type":"function"},{"doc":"Returns the Identity Type record for the given Internal Name; raises on error. On successful execution either the requested Identity Type Enumeration record is returned or nil if the record does not exist. Parameters identity_type_name - the Internal Name of the desire Identity Type record to return. Examples Finding a Identity Type record by Internal Name. iex&gt; % Msdata.SystEnumItems { } = ...&gt; MssubMcp . get_identity_type_by_name ( &quot;identity_types_sysdef_account&quot; ) Looking for a non-existent record. iex&gt; MssubMcp . get_identity_type_by_name ( &quot;nonexistent_type&quot; ) nil","ref":"MssubMcp.html#get_identity_type_by_name/1","title":"MssubMcp.get_identity_type_by_name/1","type":"function"},{"doc":"Returns the Identity Type Enumeration record which is configured as being default. If no Identity Type record is configured as default, then nil is returned. Parameters functional_type - an optional parameter which, if provided and not nil , will return the default Identity Type record configured for the requested functional type rather than the system default Identity Type. The default for this parameter is to treat the parameter as not provided ( nil ). Examples Requesting the system default Identity Type. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;identity_types_sysdef_email&quot; } = ...&gt; MssubMcp . get_identity_type_default ( ) Requesting the default Identity Type for a specific functional type. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;identity_types_sysdef_api&quot; } = ...&gt; MssubMcp . get_identity_type_default ( :identity_types_api )","ref":"MssubMcp.html#get_identity_type_default/1","title":"MssubMcp.get_identity_type_default/1","type":"function"},{"doc":"Returns the SystInstances record identified by its internal name. Parameters instance_name - the internal name of the Instance record to return. Example iex&gt; { :ok , % Msdata.SystInstances { } } = ...&gt; MssubMcp . get_instance_by_name ( &quot;app1_owner1_instance_types_sml&quot; )","ref":"MssubMcp.html#get_instance_by_name/1","title":"MssubMcp.get_instance_by_name/1","type":"function"},{"doc":"Retrieves the Datastore Options based on the Instance database record and the provided Startup Options. Parameters instance - the instance parameter is either the record ID value of the Instance record desired or the Msdata.SystInstances struct for the target Instance. startup_options - a map of values containing the Startup Options obtained from the MscmpSystOptions component.","ref":"MssubMcp.html#get_instance_datastore_options/2","title":"MssubMcp.get_instance_datastore_options/2","type":"function"},{"doc":"Returns the ID of the Instance record as identified by its internal name. Parameters instance_name - the internal name of the Instance record to reference. Example iex&gt; { :ok , instance_id } = ...&gt; MssubMcp . get_instance_id_by_name ( &quot;app1_owner1_instance_types_sml&quot; ) iex&gt; is_binary ( instance_id ) true","ref":"MssubMcp.html#get_instance_id_by_name/1","title":"MssubMcp.get_instance_id_by_name/1","type":"function"},{"doc":"Retrieves a Instance Network Rule record based on its record ID. For a given Instance Network Rule record ID this function will return a result tuple in the form of {:ok, &lt;record&gt;} where &lt;record&gt; is the fully populated Msdata.SystInstanceNetworkRules . If the record does not exist, then {:ok, :not_found} is returned. Otherwise, an error tuple in the form of {:error, &lt;exception&gt;} is returned. Parameters instance_network_rule_id - the record ID of the desired Instance Network Rule record.","ref":"MssubMcp.html#get_instance_network_rule/1","title":"MssubMcp.get_instance_network_rule/1","type":"function"},{"doc":"Retrieves a Instance Network Rule record based on its record ID, raising on error. This function works the same as get_instance_network_rule/1 except this function returns its result without wrapping it in a result tuple. If an error is encountered, including if the record does not exist, an exception is raised. Parameters instance_network_rule_id - the record ID of the desired Instance Network Rule record.","ref":"MssubMcp.html#get_instance_network_rule!/1","title":"MssubMcp.get_instance_network_rule!/1","type":"function"},{"doc":"Retrieves the Instance State Enumeration record identified by the provided Internal Name. If the requested Internal Name does not match an existing Instance State Enumeration record nil is returned. Parameters instance_state_name - the internal name of the Instance State to retrieve. Examples Retrieving an Instance State Enumeration record. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;instance_states_sysdef_active&quot; } = ...&gt; MssubMcp . get_instance_state_by_name ( &quot;instance_states_sysdef_active&quot; ) Trying to retrieve a non-existent Instance State. iex&gt; MssubMcp . get_instance_state_by_name ( &quot;nonexistent_state&quot; ) nil","ref":"MssubMcp.html#get_instance_state_by_name/1","title":"MssubMcp.get_instance_state_by_name/1","type":"function"},{"doc":"Returns the Instance State Enumeration record which is configured as being default. If no Instance State record is configured as default, then nil is returned. Parameters functional_type - an optional parameter which, if provided and not nil , will return the default Instance State record configured for the requested functional type rather than the system default Instance State. The default for this parameter is to treat the parameter as not provided ( nil ). Examples Requesting the system default Instance State. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;instance_states_sysdef_uninitialized&quot; } = ...&gt; MssubMcp . get_instance_state_default ( ) Requesting the default Instance State for a specific functional type. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;instance_states_sysdef_active&quot; } = ...&gt; MssubMcp . get_instance_state_default ( :instance_states_active )","ref":"MssubMcp.html#get_instance_state_default/1","title":"MssubMcp.get_instance_state_default/1","type":"function"},{"doc":"Returns the Instance Type record for the given Internal Name; raises on error. On successful execution either the requested Instance Type Enumeration record is returned or nil if the record does not exist. Parameters instance_type_name - the Internal Name of the desire Instance Type record to return. Examples Finding a Instance Type record by Internal Name. iex&gt; % Msdata.SystEnumItems { } = ...&gt; MssubMcp . get_instance_type_by_name ( &quot;instance_types_big&quot; ) Looking for a non-existent record. iex&gt; MssubMcp . get_instance_type_by_name ( &quot;nonexistent_type&quot; ) nil","ref":"MssubMcp.html#get_instance_type_by_name/1","title":"MssubMcp.get_instance_type_by_name/1","type":"function"},{"doc":"Returns the Instance Type record which is configured as the system default Instance Type. If no system default has not been defined nil is returned. Examples iex&gt; % Msdata.SystEnumItems { } = MssubMcp . get_instance_type_default ( )","ref":"MssubMcp.html#get_instance_type_default/0","title":"MssubMcp.get_instance_type_default/0","type":"function"},{"doc":"Retrieves an Owner record by its internal name. This retrieval operation will also populate the associated records of Owner State and the Owner State Functional Type. Examples iex&gt; {:ok, %Msdata.SystOwners{internal_name: &quot;owner1&quot;}} = ...&gt; MssubMcp.get_owner_by_name(&quot;owner1&quot;)","ref":"MssubMcp.html#get_owner_by_name/1","title":"MssubMcp.get_owner_by_name/1","type":"function"},{"doc":"Retrieves the Owner record ID by Owner internal name. Examples iex&gt; {:ok, owner_id} = MssubMcp.get_owner_id_by_name(&quot;owner1&quot;) iex&gt; is_binary(owner_id) true","ref":"MssubMcp.html#get_owner_id_by_name/1","title":"MssubMcp.get_owner_id_by_name/1","type":"function"},{"doc":"Retrieves a Owner Network Rule record based on its record ID. For a given Owner Network Rule record ID this function will return a result tuple in the form of {:ok, &lt;record&gt;} where &lt;record&gt; is the fully populated Msdata.SystOwnerNetworkRules . If the record does not exist, then {:ok, :not_found} is returned. Otherwise, an error tuple in the form of {:error, &lt;exception&gt;} is returned. Parameters owner_network_rule_id - the record ID of the desired Owner Network Rule record.","ref":"MssubMcp.html#get_owner_network_rule/1","title":"MssubMcp.get_owner_network_rule/1","type":"function"},{"doc":"Retrieves a Owner Network Rule record based on its record ID, raising on error. This function works the same as get_owner_network_rule/1 except this function returns its result without wrapping it in a result tuple. If an error is encountered, including if the record does not exist, an exception is raised. Parameters owner_network_rule_id - the record ID of the desired Owner Network Rule record.","ref":"MssubMcp.html#get_owner_network_rule!/1","title":"MssubMcp.get_owner_network_rule!/1","type":"function"},{"doc":"Retrieves the currently active Owner Password Rules for the requested Owner. On successful retrieval a success tuple in the form of {:ok, &lt;record&gt;} is returned where &lt;record&gt; is a populated Msdata.SystownerPasswordRules struct if Password Rules for the requested Owner was found or nil otherwise. Any exceptions are returned via an error tuple. Parameters owner_id - the Owner record ID for whom to retrieve Password Rules.","ref":"MssubMcp.html#get_owner_password_rules/1","title":"MssubMcp.get_owner_password_rules/1","type":"function"},{"doc":"Retrieves the currently active Owner Password Rules for the requested Owner, raising on error. This function works the same as get_owner_password_rules/1 except that any errors cause an exception to be raised. Parameters owner_id - the Owner record ID for whom to retrieve Password Rules.","ref":"MssubMcp.html#get_owner_password_rules!/1","title":"MssubMcp.get_owner_password_rules!/1","type":"function"},{"doc":"Returns the Owner State Enumeration record for the given Internal Name argument. If the requested Internal Name does not match an existing Owner State Enumeration record nil is returned. Parameters owner_state_name - the internal name of the Owner State to retrieve. Examples Retrieving an Owner State Enumeration record. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;owner_states_sysdef_active&quot; } = ...&gt; MssubMcp . get_owner_state_by_name ( &quot;owner_states_sysdef_active&quot; ) Trying to retrieve a non-existent Owner State. iex&gt; MssubMcp . get_owner_state_by_name ( &quot;nonexistent_state&quot; ) nil","ref":"MssubMcp.html#get_owner_state_by_name/1","title":"MssubMcp.get_owner_state_by_name/1","type":"function"},{"doc":"Returns the Owner State Enumeration record which is configured as being default. If no Owner State record is configured as default, then nil is returned. Parameters functional_type - an optional parameter which, if provided and not nil , will return the default Owner State record configured for the requested functional type rather than the system default Owner State. The default for this parameter is to treat the parameter as not provided ( nil ). Examples Requesting the system default Owner State. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;owner_states_sysdef_active&quot; } = ...&gt; MssubMcp . get_owner_state_default ( ) Requesting the default Owner State for a specific functional type. iex&gt; % Msdata.SystEnumItems { internal_name : &quot;owner_states_sysdef_inactive&quot; } = ...&gt; MssubMcp . get_owner_state_default ( :owner_states_inactive )","ref":"MssubMcp.html#get_owner_state_default/1","title":"MssubMcp.get_owner_state_default/1","type":"function"},{"doc":"Indicates whether the provided host IP address is to be denied access to the system. This function returns a tuple in the form of {:ok, &lt;disallowed&gt;} where the disallowed value is either true meaning that the requested host is disallowed from authenticating with the system or false if the host is permitted to attempt an authentication. Parameters host_address - the host IP address to test. Typically this will be the host address of a user wishing to authenticate with the system. Examples An allowed host will return a false result tuple. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MssubMcp . host_disallowed ( ~i&quot;10.150.150.10&quot; ) { :ok , false } A disallowed host returns a true result tuple. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MssubMcp . host_disallowed ( ~i&quot;10.123.123.5&quot; ) { :ok , true }","ref":"MssubMcp.html#host_disallowed/1","title":"MssubMcp.host_disallowed/1","type":"function"},{"doc":"Indicates whether the provided host IP address is to be denied access to the system, raising on error. This function works the same as host_disallowed/1 except this function returns its result without wrapping it in a result tuple. If an error is encountered an exception is raised. Parameters host_address - the host IP address to test. Typically this will be the host address of a user wishing to authenticate with the system. Examples An allowed host will return a false value. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MssubMcp . host_disallowed? ( ~i&quot;10.150.150.10&quot; ) false A disallowed host returns a true value. iex&gt; import IP , only : [ sigil_i : 2 ] iex&gt; MssubMcp . host_disallowed? ( ~i&quot;10.123.123.5&quot; ) true","ref":"MssubMcp.html#host_disallowed?/1","title":"MssubMcp.host_disallowed?/1","type":"function"},{"doc":"Identifies an Access Account by its Account Code identifier. On successful identification, the Account Code Identity record which was found based on the supplied parameters is returned via a success tuple. If the function completes successfully but no Identity record is found for the Identifier a value of {:ok, :not_found} is returned. Parameters account_code - the Account Code identifier which will identify the Access Account owner_id - if the expected Access Account is an Owned Access Account, the Owner must be identified. If the Access Account is Unowned, this parameter should be nil .","ref":"MssubMcp.html#identify_access_account_by_code/2","title":"MssubMcp.identify_access_account_by_code/2","type":"function"},{"doc":"Initializes an uninitialized Instance. When a new Instance is created in the database, the record is giving an Instance State with a functional type of instance_states_uninitialized meaning that the Instance record has been created in the database, but the Instance's own database and associated database roles have not yet been set up. Initializing an Instance creates its database and its database roles (&quot;Datastore&quot; and &quot;Datastore Contexts&quot;). Once initialized, the Instance record is given an Instance State of functional type instance_states_initialized . Initialized Instances may be started and have their Datastores migrated to the current version of the Instance's database. Parameters instance_id - the record ID of the Instance to initialize. startup_options - a map of values containing the Startup Options obtained from the MscmpSystOptions component. opts - a Keyword List of optional values used during the initialization process. The available options include: initializing_state_id - the record ID value of the Instance State to use to indicate that the record is being initialized. If this value is not provided the configured default Instance State for the functional type instance_states_initializing will be used. initialized_state_id - the record ID value of the Instance State to use to indicate that the record has successfully been initialized. If this value is not provided the configured default Instance State for the functional type instance_states_initialized will be used. failed_state_id - the record ID value of the Instance State to use to indicate that the record has failed to be initialized. If this value is not provided the default configured Instance State for the functional type instance_states_failure will be used. db_shutdown_timeout - a timeout value used to limit the time allowed for a clean shutdown of the DBA and Privileged database connections used for initialization of the Datastore. See the documentation for MscmpSystDb.create_datastore/2 for more information.","ref":"MssubMcp.html#initialize_instance/3","title":"MssubMcp.initialize_instance/3","type":"function"},{"doc":"Invites or re-invites an Access Account to establish access rights to a specific Instance. The invitation process creates a syst_access_account_instance_assocs record for the requested Access Account and Instance and sets the invitation_issued field to the current date/time. Re-invitation will update an existing syst_access_account_instance_assocs record resetting invite data such as the invitation expiration date or resetting the declined state if the record was previously declined by the Access Account holder. Once a syst_access_account_instance_assocs record is accepted, it may not be re- invited again using this process until the record is revoked (deleted). syst_access_account_instance_assocs are unique to the Access Account and Instance combination and only one such record may exist for that combination at any one time. Parameters access_account_id - the record ID of the Access Account to invite to the Instance. instance_id - the Instance record ID to which the Access Account is being invited. opts - a keyword list of optional parameters used to set record values and behaviors. Available options are: create_accepted - will create a syst_access_account_instance_assocs record which is already accepted when set true . The default value is false . expiration_days - for records that are not created as accepted and act as true invitations, this option sets the number of days in which an Access Account holder may accept the invitation. After this time the invitation is considered expired and must be re-invited before it can be used to grant access again. The default value for this option is 30 days.","ref":"MssubMcp.html#invite_to_instance/3","title":"MssubMcp.invite_to_instance/3","type":"function"},{"doc":"Returns a list of Application Context records. Parameters application_id - an optional reference to a specific application for which to return Application Context records. By default this value is nil which results in all Application Context records for all Applications being returned.","ref":"MssubMcp.html#list_application_contexts/1","title":"MssubMcp.list_application_contexts/1","type":"function"},{"doc":"Indicates whether the requested password is disallowed. This function returns a tuple in the form of {:ok, &lt;disallowed&gt;} where the disallowed value is either true meaning that the requested password is disallowed or false if the password is available for use. Regardless of the return of this function, disallowed passwords are only prevented for use if the effective disallow_compromised Password Rule for the Access Account attempting authentication is set. Parameters password - the plaintext password to test for disallowed status. Examples When a password has been previously disallowed and cannot be used as a user credential. iex&gt; MssubMcp . password_disallowed ( &quot;Is Disallowed&quot; ) { :ok , true } When a password has not been previously disallowed. iex&gt; MssubMcp . password_disallowed ( &quot;Is Not Disallowed&quot; ) { :ok , false }","ref":"MssubMcp.html#password_disallowed/1","title":"MssubMcp.password_disallowed/1","type":"function"},{"doc":"Indicates whether the requested password is disallowed, raising on error. This function works the same as disallowed_password/1 except this function returns a simple boolean value rather than a result tuple. If an error is encountered an exception is raised. Parameters password - the plaintext password to test for disallowed status. Examples When a password has been previously disallowed and cannot be used as a user credential. iex&gt; MssubMcp . password_disallowed? ( &quot;Is Disallowed&quot; ) true When a password has not been previously disallowed. iex&gt; MssubMcp . password_disallowed? ( &quot;Is Not Disallowed&quot; ) false","ref":"MssubMcp.html#password_disallowed?/1","title":"MssubMcp.password_disallowed?/1","type":"function"},{"doc":"Processes the given function in the context of the MCP services &amp; Datastore. Returns the return value of the provided function. Parameters operation - a function which wraps the operations to be executed in the MCP service context. Examples Retrieving an Msdata.SystOwners record from the MCP database. iex&gt; mcp_operation = fn -&gt; MscmpSystInstance . get_owner_by_name ( &quot;owner1&quot; ) end iex&gt; { :ok , % Msdata.SystOwners { } } = MssubMcp . process_operation ( mcp_operation )","ref":"MssubMcp.html#process_operation/1","title":"MssubMcp.process_operation/1","type":"function"},{"doc":"Purges the requested Access Account if the Access Account State is of a purge eligible functional type. Parameters access_account - is either the record ID of the Access Account to purge or the populated Msdata.SystAccessAccounts struct representing the record to purge. Example iex&gt; { :ok , target_access_account } = ...&gt; MssubMcp . get_access_account_by_name ( &quot;example_purge_accnt&quot; ) iex&gt; MssubMcp . purge_access_account ( target_access_account ) :ok","ref":"MssubMcp.html#purge_access_account/1","title":"MssubMcp.purge_access_account/1","type":"function"},{"doc":"Purges an eligible Instance from the system. Purging an Instance drops its associated Datastore and its defining Msdata.SystInstances records from the database. In order for the purge to be successful, the Instance must be in an Instance State of functional type instance_states_purge_eligible . Warning Naturally, great care must be taken in the lead up to calling this function as purging an Instance leads to the irreversible loss of the Instance's data (absent externally managed backups of some sort). Parameters instance - either the record ID or the Msdata.SystInstances struct of the Instance to purge. startup_options - a map of values containing the Startup Options obtained from the MscmpSystOptions component.","ref":"MssubMcp.html#purge_instance/2","title":"MssubMcp.purge_instance/2","type":"function"},{"doc":"Removes an Owner record from the system. Note that only Owner records in an Owner State of functional type owner_states_purge_eligible may be purged from the system. Parameters owner - either the record ID of an Owner record to delete or the Msdata.SystOwners struct representing the Owner to purge.","ref":"MssubMcp.html#purge_owner/1","title":"MssubMcp.purge_owner/1","type":"function"},{"doc":"Requests the creation of a Validation Token Authenticator for the specified Identity. On successful creation of the requested Validation Token Authenticator, an Authenticator Result will be returned as the value element of a success tuple: { :ok , %{ access_account_id : &quot;c3c7fafd-5c45-11ed-ab46-f3d9be809bf9&quot; , validation_identifier : &quot;psYFOfuULJPTbs5MUvOYTyt71fAbQCj7XcmerRlQ&quot; , validation_credential : &quot;zz29w7l5Ev7vuRlGFHcPPjLTXjepdbYlyQwbBjDe&quot; } } Importantly, the system generated Validation Token identifier and plaintext credential are returned to the caller. This is the only opportunity to obtain the plaintext credential; after the return value of the function is disposed of there is no way to once again retrieve the plaintext of the Validation Token Credential. Once the Validation Token Authenticator has been successfully created, the target Identity (typically an Email Identity) may not be used for authentication until the Validation Token itself has been successfully authenticated via the authenticate_validation_token/4 function. The created Validation Token Authenticator will expire after a time. After expiration the the Authenticator will no longer be to be authenticated by authenticate_validation_token/4 . The only way to validate the target Identity at that point is to create a new Validation Token Authenticator for the Identity using this function. Parameters target_identity - either the record ID or the Msdata.SystIdentities struct of the Identity record to validate. Typically this Identity will be an Email Identity. opts - a Keyword List of options which can change the behavior to the Identity validation request. The available options are: expiration_hours - overrides the default number of hours after which to consider the Validation Authenticator expired. By default the Validation Authenticator expires 24 hours after creation. identity_token_length - this option overrides the default number of random characters to generate for the Validation Token Identity identifier. The default number of characters generated is 40. identity_tokens - overrides the default character set to use in the generation of the Validation Token Identity identifier. The default value is :mixed_alphanum . See the MscmpSystUtils.get_random_string/2 documentation for the tokens parameter which receives this option for more information regarding valid values for this setting. credential_token_length - this option overrides the default number of random characters to generate for the Validation Token Credential. The default number of characters generated is 40. credential_tokens - overrides the default character set to use in the generation of the Validation Token Credential. The default value is :mixed_alphanum . See the MscmpSystUtils.get_random_string/2 documentation for the tokens parameter which receives this option for more information regarding valid values for this setting. credential_token - overrides the system generated Validation Credential with the value of this option. The default is to allow the system to automatically generate the credential.","ref":"MssubMcp.html#request_identity_validation/2","title":"MssubMcp.request_identity_validation/2","type":"function"},{"doc":"Requests to start a Password Credential recovery process for the specified Access Account. Assuming that the Access Account's Password Credential exists and isn't already being recovered, this function will create a new Recovery Token Authenticator for the Access Account's Password Credential. On successful creation of the requested Recovery Token Authenticator, an Authenticator Result will be returned as the value element of a success tuple: { :ok , %{ access_account_id : &quot;c3c7fafd-5c45-11ed-ab46-f3d9be809bf9&quot; , account_identifier : &quot;acdyItesdmUvUoM7mKwPKd3mrBBnH87L2WA1DPip&quot; , credential : &quot;WYbFG2vkJOLD5ITX9tSE5OTZ9JlHdJE8BQ8Ukiiq&quot; } } Importantly, the system generated Recovery Token account identifier and plaintext credential are returned to the caller. This is the only opportunity to obtain the plaintext credential; after the return value of the function is disposed of there is no way to once again retrieve the plaintext of the Recovery Token Credential. The existence of a Recovery Token Authenticator for a Password Credential does not prevent that Password Credential from continuing to be used in the authentication process. A Recovery Token Authenticator will expire after a time. After expiration the Recovery Token will no longer be able to be authenticated with authenticate_recovery_token/4 . Any further recovery of the Password Credential will require a new Recovery Token be created. Parameters access_account_id - the record ID of the Access Account to which the Password Credential needing recovering belongs. opts - a Keyword List of options which can change the behavior to the password recovery request. The available options are: expiration_hours - overrides the default number of hours after which to consider the Recovery Authenticator expired. By default the Recovery Authenticator expires 24 hours after creation. identity_token_length - this option overrides the default number of random characters to generate for the Recovery Token Identity identifier. The default number of characters generated is 40. identity_tokens - overrides the default character set to use in the generation of the Recovery Token Identity identifier. The default value is :mixed_alphanum . See the MscmpSystUtils.get_random_string/2 documentation for the tokens parameter which receives this option for more information regarding valid values for this setting. credential_token_length - this option overrides the default number of random characters to generate for the Recovery Token Credential. The default number of characters generated is 40. credential_tokens - overrides the default character set to use in the generation of the Recovery Token Credential. The default value is :mixed_alphanum . See the MscmpSystUtils.get_random_string/2 documentation for the tokens parameter which receives this option for more information regarding valid values for this setting. credential_token - overrides the system generated Recovery Credential with the value of this option. The default is to allow the system to automatically generate the credential.","ref":"MssubMcp.html#request_password_recovery/2","title":"MssubMcp.request_password_recovery/2","type":"function"},{"doc":"Revokes a previously create Account Code Identity from an Access Account, deleting it from the system. On successful deletion a success tuple in the form {:ok, :deleted} is returned. If no existing Account Code Identity is found a tuple in this form {:ok, :not_found} is returned. All other outcomes are error conditions resulting in the return of an error tuple. Parameters access_account_id - the Access Account record ID from which to revoke the Account Code Identity.","ref":"MssubMcp.html#revoke_account_code/1","title":"MssubMcp.revoke_account_code/1","type":"function"},{"doc":"Revokes the request API Token Authenticator by deleting it from the system. API Token Authenticators will regularly need to be decommissioned from the system by the Access Account holders they represent. By revoking an API Token it is deleted from system. A successful deletion will return a success tuple if the form {:ok, :deleted} . If the API Token Identity is not found this function will return a success tuple of {:ok, :not_found} . Any other outcome is an error and results in an error tuple being returned. Parameters identity - either the record ID of the API Token Identity to revoke or the current-state Msdata.SystIdentities struct of that record.","ref":"MssubMcp.html#revoke_api_token/1","title":"MssubMcp.revoke_api_token/1","type":"function"},{"doc":"Revokes the access or invitation to access an Instance from the given Access Account. Simply put, Access Accounts are both invited and granted access to Instances via Access Account Instance Association records (see: Msdata.SystAccessAccountInstanceAssocs ) and this function deletes those records. This has the effect of revoking the invitation to access an Instance from the Access Account/Credential Type combination. Records in any state of invited, accepted, or declined may be revoked/deleted using this function. Parameters access_account_instance_assoc - this value may be either the populated Msdata.SystAccessAccountInstanceAssocs struct to revoke or the record ID of the record to revoke.","ref":"MssubMcp.html#revoke_instance_access/1","title":"MssubMcp.revoke_instance_access/1","type":"function"},{"doc":"Revokes the access or invitation to access an Instance from the given Access Account/Credential Type combination, referencing the record by its composite key values. This function performs the same action as revoke_instance_access/1 but identified the record being revoked (deleted) using its composite/candidate key values. Parameters access_account_id - the record ID of the Access Account from which the invitation to access is being revoked. instance_id - the Instance record ID from which the Access Account had previously been invited to access.","ref":"MssubMcp.html#revoke_instance_access/2","title":"MssubMcp.revoke_instance_access/2","type":"function"},{"doc":"Revokes the Recovery Token Authenticator for a previously initiated Password Credential recovery. While Recovery Token Authenticators expire of their own accord after a time, they may also explicitly be revoked. In reality this means simply deleting the Recovery Token Authenticator from the system. The return value of this function on successful execution will be the success tuple {:ok, :deleted} . If a recovery is not already underway for the requested Access Account, the function will return successfully but will indicate that no action took place with a return of {:ok, :not_found} . Any other condition is an error condition and the return value will be an error tuple indicating the nature of the issue. Parameters access_account_id - identifies the Access Account for whom the Recovery Token Authenticator should be revoked. The expected value is the record ID of the Access Account.","ref":"MssubMcp.html#revoke_password_recovery/1","title":"MssubMcp.revoke_password_recovery/1","type":"function"},{"doc":"Revokes a Validation Authenticator (&quot;Validator&quot;) issued for the requested Identity. While Validators will expire on their own if not confirmed first, there are cases where Validators should be revoked prior to that time, such as if the Validator communication to the user has been lost and a new Validator needs to be generated. The return value is a result tuple which indicates whether or not the revocation happened ( {:ok, :deleted} ), if the Validator was not found ( {:ok, :not_found} ), or an error tuple in any other circumstance. Parameters target_identity_id - the record ID of the Identity record which the Validator was meant to validate. So if the Validator to revoke was for an Email Identity, this value would be the ID of the Email Identity and not the Validation Identity.","ref":"MssubMcp.html#revoke_validator_for_identity_id/1","title":"MssubMcp.revoke_validator_for_identity_id/1","type":"function"},{"doc":"Sets the Instance State of an Instance. Parameters instance - the current Msdata.SystInstances struct representing the Instance to be updated. instance_state_id - The record ID of the new Instance State value into which to place the Instance record.","ref":"MssubMcp.html#set_instance_state/2","title":"MssubMcp.set_instance_state/2","type":"function"},{"doc":"Starts all Applications and each Application's child Instances. This function calls the start_application/3 function for each Application configured in the system. See the documentation for start_application/3 for more information about this function and the available parameters.","ref":"MssubMcp.html#start_all_applications/2","title":"MssubMcp.start_all_applications/2","type":"function"},{"doc":"Starts the requested Application and its child Instances. For the requested Application, start a DynamicSupervisor under which to supervise all of the services related to that Application including its child Instances. Once the Application supervisor is started any child Instances which are in a start-eligible status are started under the Application supervisor. The Instance startup process starts each Instance asynchronously and concurrently. The instance startup process will also upgrade each Instance Datastore to the current version of the application, if required. As such, you should be prepared for Application startup to be long running. Parameters application - either the record ID or the Msdata.SystApplications struct representing the Application to start. startup_options - a map of values containing the Startup Options obtained from the MscmpSystOptions component. opts - a Keyword List of optional values used during the initialization process. The available options include: max_concurrency - the maximum number of Instances to start concurrently. This defaults to the greater of 1 or one quarter of the value returned by System.schedulers_online/0 floored. other available options are passed to start_instance/3 . See the documentation for start_instance/3 for the options it is able to accept.","ref":"MssubMcp.html#start_application/3","title":"MssubMcp.start_application/3","type":"function"},{"doc":"Starts an Instance and places it under the appropriate Application's supervisor. An Instance is essentially a tenant environment running a specific Application. Each environment's runtime characteristics are independent of other environments configured to run in the same system. To be started the Instance must be in an Instance State of either functional type instance_states_initialized or instance_states_active . Trying to start an Instance in other Instance States will result in an error. Note that we assume that the Application supervisor is already started and is ready to start child processes. Parameters instance - either the record ID or the Msdata.SystInstances struct of the Instance to start. startup_options - a map of values containing the Startup Options obtained from the MscmpSystOptions component. opts - a Keyword List of optional values used during the initialization process. The available options include: migrating_state_id - the record ID of the Instance State to use while the starting Instance is being updated to the most current database definition of the application. If not provided the currently configured default Instance State for functional type instance_states_migrating will be used. active_state_id - the record ID of the Instance State to use indicating that the Instance is ready to accept user workloads. If not provided the currently configured default Instance State for functional type instance_states_active will be used. failure_state_id - the record ID of the Instance State to use indicating that the Instance startup process has failed and that the Instance is in an inconsistent state. If not provided the currently configured default Instance State for functional type instance_states_failure will be used. migration_bindings - this a Keyword List containing values that will be substituted into the migration SQL files used to update a Datastore to the current version of the Application. Usually, there is no need to provide this option as the most common migration bindings are automatically generated from Instance record data.","ref":"MssubMcp.html#start_instance/3","title":"MssubMcp.start_instance/3","type":"function"},{"doc":"Establishes MCP Subsystem process references in the calling process's process dictionary. Datastore, Enumerations, and Settings services are determined by entries in the executing process's Process Dictionary. The MCP Subsystem as an OTP Application starts these services under pre-determined local names which are in turn set in the Process Dictionary by this function. This function is used by processes wishing to set MCP Subsystem services as the long running context spanning multiple function calls by the process. For example, a GenServer that only every access MCP Subsystem Datastores or Services can call this during the initialization process which will live for the life of the GenServer or until they are explicitly unset by some other call. The return value of the call provides the caller references to identifiers for each of the three previously set target services represented as a tuple: { &lt; previous_datastore_context &gt; , &lt; previous_enums_service_name &gt; , &lt; previous_settings_service_name &gt; } This value is suitable to pass to stop_mcp_service_context/1 if the MCP Subsystem context setting is only intended to be temporary.","ref":"MssubMcp.html#start_mcp_service_context/0","title":"MssubMcp.start_mcp_service_context/0","type":"function"},{"doc":"Stops all Applications, Application Supervisors, and their child Instances. This function will call stop_application/2 for each Application configured in the system. For more information about the available options and behaviors of Application shutdown, please see the documentation for stop_application/2 .","ref":"MssubMcp.html#stop_all_applications/1","title":"MssubMcp.stop_all_applications/1","type":"function"},{"doc":"Shuts down the Supervisor process of the requested Application and all of its child processes, including Instances. Parameters application - either the record ID or the Msdata.SystApplications struct representing the Application to stop. opts - a Keyword List of optional values used during the initialization process. The available options include: supervisor_shutdown_timeout - a timeout value used to allow processes supervised by the Application supervisor to shut down cleanly. By default, this value is set to 60,000ms. Other options available are defined by and passed to the stop_instance/2 function for Instance shutdown. See the stop_instance/2 for full information of the available options.","ref":"MssubMcp.html#stop_application/2","title":"MssubMcp.stop_application/2","type":"function"},{"doc":"Stops an Instance. Stopping an Instance shuts down its supervisor and any monitored processes. Parameters instance - either the record ID or the Msdata.SystInstances struct of the Instance to stop. opts - a Keyword List of optional values used during the initialization process. The available options include: supervisor_shutdown_timeout - a timeout value used to allow processes supervised by the Instance supervisor to shut down cleanly. By default, this value is set to 60,000ms. db_shutdown_timeout - a timeout value used to limit the time allowed for a clean shutdown of the database connections used for operating Datastore. See the documentation for MscmpSystDb.stop_datastore/2 for more information.","ref":"MssubMcp.html#stop_instance/2","title":"MssubMcp.stop_instance/2","type":"function"},{"doc":"Unsets the MCP Subsystem service references from the process's Process Dictionary. This function unsets the MCP Subsystem service references in one of two ways depending on the argument passed to the function. If a tuple in the form: { &lt; new_datastore_context &gt; , &lt; new_enums_service_name &gt; , &lt; new_settings_service_name &gt; } is passed, the references in the tuple will be set as the new service context for the process. This is useful if a previous context existed and only temporary access to the MCP Subsystem context was required (see start_mcp_service_context/0 for the most common source for these values.) Otherwise the service context values in the Process Dictionary are set to nil and calls to other contextually sensitive functions will fail until a new service context is set for the process. The function simply returns :ok once it has stopped the MCP Subsystem service context. Parameters replacement_service_names - an optional tuple of references to the services which are to replace the MCP Subsystem service references being unset by this function. See the above for the form of the tuple. If this parameter is omitted, the Process Dictionary references for context services will be set nil , meaning no service context aware functions will work properly until a new service context is set.","ref":"MssubMcp.html#stop_mcp_service_context/1","title":"MssubMcp.stop_mcp_service_context/1","type":"function"},{"doc":"Tests a candidate password against the effective Password Rules for a given Access Account. Prior to attempting to save a Password Credential, it should be tested for compliance with the Global Password Rules and any Owner Password Rules that exist for the Owner of the Access Account. This function performs that test and will return all of the violations detected. If no issues are detected, a success tuple with a value of empty list will be returned ( {:ok, []} ). Note that this function is recommended to run prior to attempting to save a Password Credential, but is not required. Any function which can save a new password to the database will independently test the candidate password against the effective Password Rules prior to saving the Credential, erroring on any invalid password. Parameters access_account_id - the record ID of the Access Account for whom to perform the test. The applicable Password Rules may derive from the Access Account Owner if the Access Account is in fact owned. plaintext_pwd - the candidate Password to test against the rules. Examples A successful password test. iex&gt; { :ok , access_account_id } = ...&gt; MssubMcp . get_access_account_id_by_name ( &quot;example_accnt&quot; ) iex&gt; MssubMcp . test_credential ( access_account_id , &quot;A Passing Password.&quot; ) { :ok , [ ] } An invalid password test. iex&gt; { :ok , access_account_id } = ...&gt; MssubMcp . get_access_account_id_by_name ( &quot;example_accnt&quot; ) iex&gt; MssubMcp . test_credential ( access_account_id , &quot;short&quot; ) { :ok , [ password_rule_length_min : 8 ] }","ref":"MssubMcp.html#test_credential/2","title":"MssubMcp.test_credential/2","type":"function"},{"doc":"Updates the maintainable fields of a given Access Account record. Parameters access_account - either the record ID value of the Access Account to update or is the complete Msdata.SystAccessAccounts struct representing the before-update state of the Access Account record. access_account_params - a map containing those attributes to be changed along with their new values. Example iex&gt; { :ok , target_access_account } = ...&gt; MssubMcp . get_access_account_by_name ( &quot;example_accnt&quot; ) iex&gt; { :ok , updated_access_account } = ...&gt; MssubMcp . update_access_account ( ...&gt; target_access_account , ...&gt; %{ external_name : &quot;Updated Example Account Name&quot; } ...&gt; ) iex&gt; % Msdata.SystAccessAccounts { ...&gt; external_name : &quot;Updated Example Account Name&quot; ...&gt; } = updated_access_account","ref":"MssubMcp.html#update_access_account/2","title":"MssubMcp.update_access_account/2","type":"function"},{"doc":"Updates the External Name value of an existing API Token Identity. API Token Identities permit Access Account holder naming of the Identity as it may be common for an one Access Account to require multiple API Token Authenticators for different purposes. On success this function returns a success tuple where the value element of the tuple is the updated Msdata.SystIdentities struct. On error, an error tuple is returned. Parameters identity - either the record ID of the API Token Identity to update or the current-state Msdata.SystIdentities struct of that record. external_name - the text of the updated External Name value or nil to remove the text of an existing non-nil value.","ref":"MssubMcp.html#update_api_token_external_name/2","title":"MssubMcp.update_api_token_external_name/2","type":"function"},{"doc":"Updates an existing Application record using the provided parameters as new values. Allows an Application Subsystem program to update its representative Application record as required. Note Note that this function is meant to expose Application record management to the relevant Application Subsystem programs and is not intended for regular management activities by end users. Parameters application - either a fully populated Msdata.SystApplications struct representing the current state of the Application record or the ID of the Application record to update. This argument is required. application_params - a map containing the attributes with updated values for the Application record update operation. The attributes which may be updated are: display_name - a unique, friendly name identifying the Application and for use in user interfaces. This value may not be set nil if it is included. syst_description - a user facing description of the Application including any special usage requirements or preconditions. This attribute may not be set nil if it is included. Examples Creating a new Application record. iex&gt; target_app_id = MssubMcp . get_application_id_by_name ( &quot;ex_app2&quot; ) iex&gt; update_app_params = %{ ...&gt; display_name : &quot;Example App #2&quot; , ...&gt; syst_description : &quot;An updated example application.&quot; ...&gt; } iex&gt; { :ok , % Msdata.SystApplications { display_name : &quot;Example App #2&quot; } } = ...&gt; MssubMcp . update_application ( target_app_id , update_app_params )","ref":"MssubMcp.html#update_application/2","title":"MssubMcp.update_application/2","type":"function"},{"doc":"Updates an existing Application Context record. Allows an Application Subsystem to update its Application Context entries as permitted. Note Note that this function is meant to expose Application record management to the relevant Application Subsystem programs and is not intended for regular management activities by end users. Parameters application_context - this required parameter may either be the Application Context record ID or the fully populated Msdata.SystApplicationContexts struct to update. application_context_params - a map of attributes which are to be updated with the new values of those attributes. The available attributes for updates are: display_name - a unique, friendly name identifying the Application Context and for use in user interfaces. This attribute is required and must be unique in the system. description - a description of the Application Context's role in the application and database. This becomes a comment in the database attached to the database role created for the context. start_context - a required boolean value which establishes the default value of derived Instance Context ( Msdata.SystInstanceContexts ) start_context settings. When true, an Instance Context record derived from this Application Context will be, by default, started as active database connections when the parent Instance is started. False indicates that by default Instance startup will not establish database connections for the context. This value muse be set false for any Application Context defining a Datastore Owner Context or any other Context where the login_context is set false . Examples Updating an existing Application Context record iex&gt; app_context_id = ...&gt; MssubMcp . get_application_context_id_by_name ( &quot;ex_app2_updctx&quot; ) iex&gt; update_params = %{ ...&gt; display_name : &quot;Updated Ex. App 2 Context&quot; , ...&gt; description : &quot;A now updated description&quot; , ...&gt; start_context : false ...&gt; } iex&gt; { :ok , ...&gt; % Msdata.SystApplicationContexts { ...&gt; display_name : &quot;Updated Ex. App 2 Context&quot; , ...&gt; description : &quot;A now updated description&quot; , ...&gt; start_context : false ...&gt; } } = ...&gt; MssubMcp . update_application_context ( app_context_id , update_params )","ref":"MssubMcp.html#update_application_context/2","title":"MssubMcp.update_application_context/2","type":"function"},{"doc":"Updates an existing Global Network Rule with new values. This function works similar to create_global_network_rule/1 but updates an existing Global Network Rule record rather than creating a new one. On successful update, a result tuple in the form {:ok, &lt;record&gt;} is returned where the &lt;record&gt; is the fully populated Data struct of the record just updated. If an exception is raised this function will return a failure tuple in the form of {:error, &lt;exception data&gt;} . Parameters global_network_rule - this value is either a fully populated Msdata.SystGlobalNetworkRules struct of an existing Global Network Rule record or the ID of such a record. If the data struct is provided, Ecto optimistic locking is applied to the update operation. update_params - a map representing the values to use when updating the Global Network Rule. All parameters are optional, with omission meaning that the existing value should retain its current value. See MscmpSystAuthn.Types.global_network_rule_params/0 for the available attributes.","ref":"MssubMcp.html#update_global_network_rule/2","title":"MssubMcp.update_global_network_rule/2","type":"function"},{"doc":"Updates the Global Password Rules with new values. The Global Password Rules are created at system installation time with a default and recommended set of values, but these values may be customized as desired any time after installation. Note that the original Global Password Rules data will be retrieved for use in the update process and that no Ecto optimistic locking will be employed with this update. Parameters update_params - a map of the values to use when updating the Global Password Rules record. See MscmpSystAuthn.Types.password_rule_params/0 for details regarding the available attributes.","ref":"MssubMcp.html#update_global_password_rules/1","title":"MssubMcp.update_global_password_rules/1","type":"function"},{"doc":"Updates the Global Password Rules with new values using a caller provided data source record. This function works the same as described in create_update_global_password_rules/1 except that in this version the caller must also provide a source data struct to act as the basis of the update. Ecto optimistic locking will be applied to the update process. Parameters global_password_rules - a fully populated Msdata.SystGlobalPasswordRules record representing the state of the Global Password Rules prior to the change. update_params - a map of the values to use when updating the Global Password Rules record. See MscmpSystAuthn.Types.password_rule_params/0 for details regarding the available attributes.","ref":"MssubMcp.html#update_global_password_rules/2","title":"MssubMcp.update_global_password_rules/2","type":"function"},{"doc":"Updates an existing Instance Network Rule with new values. This function works similar to create_instance_network_rule/2 but updates an existing Instance Network Rule record rather than creating a new one. On successful update, a result tuple in the form {:ok, &lt;record&gt;} is returned where the &lt;record&gt; is the fully populated Data struct of the record just updated. If an exception is raised this function will return a failure tuple in the form of {:error, &lt;exception data&gt;} . Parameters instance_network_rule - this value is either a fully populated Msdata.SystInstanceNetworkRules struct of an existing Instance Network Rule record or the ID of such a record. If the data struct is provided, Ecto optimistic locking is applied to the update operation. update_params - a map representing the values to use when updating the Instance Network Rule. All parameters are optional, with omission meaning that the existing value should retain its current value. See MscmpSystAuthn.Types.instance_network_rule_params/0 for the available attributes.","ref":"MssubMcp.html#update_instance_network_rule/2","title":"MssubMcp.update_instance_network_rule/2","type":"function"},{"doc":"Updates an existing Instance Type record via the MscmpSystEnums service. Parameters instance_type_name - the internal name of the Instance Type to target for updating. instance_type_params - the parameters to use when creating the new Instance Type. All attributes in the parameter map are optional in updating contexts.","ref":"MssubMcp.html#update_instance_type/2","title":"MssubMcp.update_instance_type/2","type":"function"},{"doc":"Updates Instance Type Context default values which are applied to new Instance Contexts. Parameters instance_type_context - this value may either be the record ID of the target Instance Type Context record or a copy of the current Msdata.SystInstanceTypeContexts struct representing the target record. instance_type_context_params - a map containing those attributes to be updated with their new values. instance_type_id - the ID value of the owning Instance Type record. This value is required unless the instance_type_name attribute is provided. instance_type_name - the internal name value of the owning Instance Type record. This value required unless the instance_type_id value is provided instead. application_context_id - the record ID value of the Application Context with which this record is associated. This value is required unless the application_context_name value is provided instead. application_context_name - the internal name value of the Application Context with which this record is associated. This value is required unless the application_context_id value is provided instead. default_db_pool_size - the default size of the database connection pool to use for Instances Contexts created for Instances of this Instance Type. This field defaults to 0 on Instance Type Context creation.","ref":"MssubMcp.html#update_instance_type_context/2","title":"MssubMcp.update_instance_type_context/2","type":"function"},{"doc":"Updates an Owner record. Parameters owner - This value must either by the record ID of an existing Owner record or the Msdata.SystOwners struct representing an existing owner. update_params - a map of Owner record attributes to be updated. For update operations only those attributes to be updates must be provided. internal_name - a predetermined unique identifier for the Owner record for use in programmatic contexts. This attribute must be unique in the system and may not be nil. display_name - a unique, friendly name identifying the owner and for use in user interfaces. This attribute must be unique in the system and may not be nil. owner_state_id - the record ID value of the new Owner State of the Owner record. Note that if this attribute is provided, but is set nil, an error will result.","ref":"MssubMcp.html#update_owner/2","title":"MssubMcp.update_owner/2","type":"function"},{"doc":"Updates an existing Owner Network Rule with new values. This function works similar to create_owner_network_rule/2 but updates an existing Owner Network Rule record rather than creating a new one. On successful update, a result tuple in the form {:ok, &lt;record&gt;} is returned where the &lt;record&gt; is the fully populated Data struct of the record just updated. If an exception is raised this function will return a failure tuple in the form of {:error, &lt;exception data&gt;} . Parameters owner_network_rule - this value is either a fully populated Msdata.SystOwnerNetworkRules struct of an existing Owner Network Rule record or the ID of such a record. If the data struct is provided, Ecto optimistic locking is applied to the update operation. update_params - a map representing the values to use when updating the Owner Network Rule. All parameters are optional, with omission meaning that the existing value should retain its current value. See MscmpSystAuthn.Types.owner_network_rule_params/0 for the available attributes.","ref":"MssubMcp.html#update_owner_network_rule/2","title":"MssubMcp.update_owner_network_rule/2","type":"function"},{"doc":"Updates the Owner Password Rules with new values. After creation, Owner Password Rules may be updated with new values as might meet the specific needs of the Owner. Parameters owner - the record ID of the Owner for whom the Password Rules are being updated or the fully populated data struct representing the current Owner Password Rules. Note that if the data struct is provided Ecto optimistic locking will be in effect. update_params - a map of the values to use when updating the Owner Password Rules record. See MscmpSystAuthn.Types.password_rule_params/0 for details regarding the available attributes.","ref":"MssubMcp.html#update_owner_password_rules/2","title":"MssubMcp.update_owner_password_rules/2","type":"function"},{"doc":"Compares a &quot;Test&quot; set of Password Rules against a &quot;Standard&quot; set of Password Rules and reports on which of the &quot;Test&quot; Rules are considered less stringent than the &quot;Standard&quot; Rules. The primary use case for this function is to test how Owner Password Rules (&quot;Test&quot; Rules) compare against the Global Password Rules (&quot;Standard&quot; Rules), but the function can compare any two rules. The return value of this function is wrapped in a result tuple. A result of {:ok, &lt;rule violations&gt;} is returned on success and an error tuple in the form of {:error, &lt;exception&gt;} is returned on error. The &lt;rule violations&gt; value is a Keyword List where each tuple's key represents the rule violated and the tuple's value is the required value for that rule; whether the required value is a minimum or maximum depends on the nature of the specific rule being reported. Parameters test_rules - a Password Rule which will be tested against the value of the standard_rules . Where the test_rules are less stringent than the standard_rules , a violation is reported in the result. standard_rules - the &quot;Standard&quot; against which the test_rules are judged. This parameter is optional and when nil the Global Password Rule is retrieved and used as the default &quot;Standard&quot; Rules. Otherwise either a generic MscmpSystAuthn.Types.password_rules/0 value or a populated Msdata.SystGlobalPasswordRules data struct may be provided.","ref":"MssubMcp.html#verify_password_rules/2","title":"MssubMcp.verify_password_rules/2","type":"function"},{"doc":"Compares a &quot;Test&quot; set of Password Rules against a &quot;Standard&quot; set of Password Rules and reports on which of the &quot;Test&quot; Rules are considered less stringent than the &quot;Standard&quot; Rules, raising on error. This function works the same as verify_password_rules/2 except that any errors cause an exception to be raised. Parameters test_rules - a Password Rule which will be tested against the value of the standard_rules . Where the test_rules are less stringent than the standard_rules , a violation is reported in the result. standard_rules - the &quot;Standard&quot; against which the test_rules are judged. This parameter is optional and when nil the Global Password Rule is retrieved and used as the default &quot;Standard&quot; Rules. Otherwise either a generic MscmpSystAuthn.Types.password_rules/0 value or a populated Msdata.SystGlobalPasswordRules data struct may be provided.","ref":"MssubMcp.html#verify_password_rules!/2","title":"MssubMcp.verify_password_rules!/2","type":"function"}]