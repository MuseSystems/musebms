searchNodes=[{"doc":"MscmpSystError - Exception Handling Component API for working with the MuseBMS error reporting subsystem. This module defines a nested structure for reporting errors in contexts where a result should be represented by an error result. By capturing lower level errors and reporting them in a standard way, various application errors, especially non-fatal errors, can be handled as appropriate and logged for later analysis. The basic form of a reportable application error is: {:error, %MscmpSystError{}} where %MscmpSystError{} contains basic fields to identify the kind of error, the source of the error, and other error related data. Functions in this API are used to work with the returned exception.","ref":"MscmpSystError.html","title":"MscmpSystError","type":"exception"},{"doc":"Returns the root cause of an MscmpSystError exception object. The MscmpSystError exception handling framework allows for nested exceptions to be reported stack trace style from lower levels of the application where an exception was caused into higher levels of the application which enter a failure state due to the lower level root cause. This function will traverse the nesting and return the bottom most Error Struct. If some other object, such as a standard error tuple is passed to the function, the function will simply return the value. Examples iex&gt; my_err = % MscmpSystError { ...&gt; code : :example_error , ...&gt; message : &quot;Outer error message&quot; , ...&gt; cause : % MscmpSystError { ...&gt; code : :example_error , ...&gt; message : &quot;Intermediate error message&quot; , ...&gt; cause : % MscmpSystError { ...&gt; code : :example_error , ...&gt; message : &quot;Root error message&quot; , ...&gt; cause : { :error , &quot;Example Error&quot; } , ...&gt; } , ...&gt; } , ...&gt; } iex&gt; MscmpSystError . get_root_cause ( my_err ) % MscmpSystError { code : :example_error , message : &quot;Root error message&quot; , cause : { :error , &quot;Example Error&quot; } } iex&gt; MscmpSystError . get_root_cause ( { :error , &quot;Example Error&quot; } ) { :error , &quot;Example Error&quot; }","ref":"MscmpSystError.html#get_root_cause/1","title":"MscmpSystError.get_root_cause/1","type":"function"},{"doc":"Defines a nestable exception format for reporting MuseBMS application exceptions. Fields in the exception are: code - classifies the error into a specific kind of exception likely to be seen in application. Useful for pattern matching, logging, and determining if any raised exception should be handled or not. message - the text description of the error condition. This should be meaningful to humans. cause - includes information that may be helpful in understanding the cause of the error condition. This could include nested t:MscmpSystError/0 objects, exception data created outside of this exception framework, or pertinent data such as parameters and data that is directly related to the exception.","ref":"MscmpSystError.html#t:t/0","title":"MscmpSystError.t/0","type":"type"},{"doc":"Defines the public types exposed by the MscmpSystError component.","ref":"MscmpSystError.Types.html","title":"MscmpSystError.Types","type":"module"},{"doc":"Categories or groups of error kinds which might be seen in the application. The level of granularity we're trying to achieve here is we want any logic that makes decisions on whether to handle an error/exception to be able to understand the nature of the error.","ref":"MscmpSystError.Types.html#t:mscmp_error/0","title":"MscmpSystError.Types.mscmp_error/0","type":"type"}]