searchData={"items":[{"type":"module","title":"MscmpSystError.Types.Context","doc":"Defines the Context data which a MscmpSystError exception can be associated\nwith in a standard way.\n\nNote that one should not expect that any given exception will provide context\ndata, but it is expected that any exception which does provide context data\nwill use this module's definitions and structure.","ref":"MscmpSystError.Types.Context.html"},{"type":"type","title":"MscmpSystError.Types.Context.t/0","doc":"Represents the context associated with a MscmpSystError exception.","ref":"MscmpSystError.Types.Context.html#t:t/0"},{"type":"type","title":"Attributes - MscmpSystError.Types.Context.t/0","doc":"* `:parameters`: A map of function parameters and their values which were\n    in effect when the error was encountered.\n\n  * `:origin`: A tuple containing the module, function, and arity where the\n    error originated, or `nil` if unknown.\n\n  * `:supporting_data`: Any additional data that might be relevant to the\n    error or exception, or `nil` if not provided.","ref":"MscmpSystError.Types.Context.html#t:t/0-attributes"},{"type":"behaviour","title":"MscmpSystError","doc":"MscmpSystError establishes a common framework for defining and handling errors.\n\nMscmpSystError provides a structured way to define and handle errors within an\napplication. It defines a set of fields that errors should include, such as\n`kind`, `message`, `context`, and `cause`. This standardization enables\nconsistent error handling and reporting across different parts of an\napplication.\n\nTo create a new Error type implemention, you can use the `use MscmpSystError`\nmacro in your module.\n\n```elixir\ndefmodule Mserror.MyError do\n  use MscmpSystError,\n    kinds: [my_error: \"`:my_error` Error Kind documentation\"],\n    component: ExampleComponent\nend\n```","ref":"MscmpSystError.html"},{"type":"behaviour","title":"Options - MscmpSystError","doc":"The `use MscmpSystError` macro requires that the following options are provided:\n\n* `:kinds` - A keyword list of error kinds, where the key is the atom\n  representing the error kind, and the value is a string providing a\n  documentation string for the error kind.\n\n* `:component` - This is a reference to the Component where the error type is\n  defined.  As errors may be propogated from lower level dependencies to higher\n  level components, this value helps identify the origin of any given error.\n\nFailing to provide these options will result in a compile time error.\n\n> #### `use MscmpSystError` {: .info}\n>\n> When `use MscmpSystError` is called with the required options, it:\n>\n> 1. Implements the `MscmpSystError` behaviour.\n>\n> 2. Defines a `kinds` type based on the provided `:kinds` option.\n>\n> 3. Creates a struct with fields for `kind`, `message`, `mserror`, `component`,\n>    `context`, and `cause`.\n>\n> 4. Implements `defexception` with the struct fields.\n>\n> 5. Defines an `exception/1` function that delegates to `new/3`.\n>\n> 6. Implements a `new/3` function that creates a new error struct with the\n>    given kind, message, and options.","ref":"MscmpSystError.html#module-options"},{"type":"function","title":"MscmpSystError.get_root_cause/1","doc":"Returns the root cause of an error object implementing the MscmpSystError behavior.\n\nThe MscmpSystError exception handling framework allows for nested exceptions to be reported\nstack trace style from lower levels of the application where an exception was caused into higher\nlevels of the application which enter a failure state due to the lower level root cause.\n\nThis function will traverse the nesting and return the bottom most Error Struct. If some other\nobject, such as a standard error tuple is passed to the function, the function will simply\nreturn that value.","ref":"MscmpSystError.html#get_root_cause/1"},{"type":"function","title":"Examples - MscmpSystError.get_root_cause/1","doc":"iex> my_err = %ExampleError{\n    ...>   kind: :example_error,\n    ...>   message: \"Outer error message\",\n    ...>   cause: %ExampleError{\n    ...>     kind: :example_error,\n    ...>     message: \"Intermediate error message\",\n    ...>     cause: %ExampleError{\n    ...>       kind: :example_error,\n    ...>       message: \"Root error message\",\n    ...>       cause: {:error, \"Example Error\"},\n    ...>     },\n    ...>   },\n    ...> }\n    iex> MscmpSystError.get_root_cause(my_err)\n    %ExampleError{\n      kind: :example_error,\n      message: \"Root error message\",\n      cause: {:error, \"Example Error\"}\n    }\n\n    iex> MscmpSystError.get_root_cause({:error, \"Example Error\"})\n    {:error, \"Example Error\"}","ref":"MscmpSystError.html#get_root_cause/1-examples"},{"type":"callback","title":"MscmpSystError.new/3","doc":"Defines the callback for creating a new error of the implementing module.\n\nThis function should be implemented by all modules using MscmpSystError.\nIt creates a new error struct with the given kind, message, and options.","ref":"MscmpSystError.html#c:new/3"},{"type":"callback","title":"Parameters - MscmpSystError.new/3","doc":"* `kind` - The kind of error, which should be one of the kinds defined in\n    the implementing module.\n\n  * `message` - A string describing the error.\n\n  * `opts` - A keyword list of additional options.","ref":"MscmpSystError.html#c:new/3-parameters"},{"type":"callback","title":"Options - MscmpSystError.new/3","doc":"* `:context` - A map containing additional context information for the error.\n\n  * `:cause` - The cause of the error, which can be an exception, an error tuple,\n    or any other term.","ref":"MscmpSystError.html#c:new/3-options"},{"type":"callback","title":"Returns - MscmpSystError.new/3","doc":"Returns a struct of the implementing module with the error details.","ref":"MscmpSystError.html#c:new/3-returns"}],"content_type":"text/markdown","producer":{"name":"ex_doc","version":[48,46,51,52,46,50]}}