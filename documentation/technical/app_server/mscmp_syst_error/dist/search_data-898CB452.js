searchData={"items":[{"type":"exception","title":"MscmpSystError","doc":"API for defining a standard for error handling and reporting.\n\nThis module defines a nested structure for reporting errors in contexts where a result should be\nrepresented by an error result.  By capturing lower level errors and reporting them in a\nstandard way, various application errors, especially non-fatal errors, can be handled as\nappropriate and logged for later analysis.\n\nThe basic form of a reportable application error is: `{:error, %MscmpSystError{}}` where\n`%MscmpSystError{}` contains basic fields to identify the kind of error, the source of the\nerror, and other error related data.\n\nFunctions in this API are used to work with the returned exception.","ref":"MscmpSystError.html"},{"type":"function","title":"MscmpSystError.get_root_cause/1","doc":"Returns the root cause of an `MscmpSystError` exception object.\n\nThe `MscmpSystError` exception handling framework allows for nested exceptions to be reported\nstack trace style from lower levels of the application where an exception was caused into higher\nlevels of the application which enter a failure state due to the lower level root cause.\n\nThis function will traverse the nesting and return the bottom most Error Struct.  If some other\nobject, such as a standard error tuple is passed to the function, the function will simply\nreturn the value.","ref":"MscmpSystError.html#get_root_cause/1"},{"type":"function","title":"Examples - MscmpSystError.get_root_cause/1","doc":"iex> my_err = %MscmpSystError{\n    ...>            code:    :example_error,\n    ...>            message: \"Outer error message\",\n    ...>            cause:    %MscmpSystError{\n    ...>                        code:    :example_error,\n    ...>                        message: \"Intermediate error message\",\n    ...>                        cause:    %MscmpSystError{\n    ...>                                    code:    :example_error,\n    ...>                                    message: \"Root error message\",\n    ...>                                    cause:    {:error, \"Example Error\"},\n    ...>                                  },\n    ...>                      },\n    ...>          }\n    iex> MscmpSystError.get_root_cause(my_err)\n    %MscmpSystError{\n      code:     :example_error,\n      message:  \"Root error message\",\n      cause:    {:error, \"Example Error\"}\n    }\n\n    iex> MscmpSystError.get_root_cause({:error, \"Example Error\"})\n    {:error, \"Example Error\"}","ref":"MscmpSystError.html#get_root_cause/1-examples"},{"type":"type","title":"MscmpSystError.t/0","doc":"Defines a nestable exception format for reporting MuseBMS application exceptions.\n\nFields in the exception are:\n  * `code` - classifies the error into a specific kind of exception likely to be seen in\n  application.  Useful for pattern matching, logging, and determining if any raised exception\n  should be handled or not.\n\n  * `message` - the text description of the error condition.  This should be meaningful to\n  humans.\n\n  * `cause` - includes information that may be helpful in understanding the cause of the error\n  condition.  This could include nested `t:MscmpSystError/0` objects, exception data created\n  outside of this exception framework, or pertinent data such as parameters and data that is\n  directly related to the exception.","ref":"MscmpSystError.html#t:t/0"},{"type":"module","title":"MscmpSystError.Types","doc":"Defines the public types exposed by the MscmpSystError component.","ref":"MscmpSystError.Types.html"},{"type":"type","title":"MscmpSystError.Types.mscmp_error/0","doc":"Categories or groups of error kinds which might be seen in the application.\n\nThe level of granularity we're trying to achieve here is we want any logic\nthat makes decisions on whether to handle an error/exception to be able to\nunderstand the nature of the error.","ref":"MscmpSystError.Types.html#t:mscmp_error/0"}],"content_type":"text/markdown"}