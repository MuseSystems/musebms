searchNodes=[{"doc":"","ref":"DevSupport.html","title":"DevSupport","type":"module"},{"doc":"","ref":"DevSupport.html#get_datastore_context_id/0","title":"DevSupport.get_datastore_context_id/0","type":"function"},{"doc":"","ref":"DevSupport.html#start_dev_environment/1","title":"DevSupport.start_dev_environment/1","type":"function"},{"doc":"","ref":"DevSupport.html#stop_dev_environment/0","title":"DevSupport.stop_dev_environment/0","type":"function"},{"doc":"MscmpSystSettings - User Configuration Management A user options configuration management service. The Settings Service provides caching and management functions for user configurable options which govern how the application operates. Multiple Settings Service instances may be in operation depending on the needs of the application; for example, in the case of multi-tenancy, each tenant will have its own instance of the Setting Service running since each tenant's needs of the application may unique. On startup, the Settings Service creates an in memory cache and populates the cache from the database. Inquiries for settings are then served from the cache rather than the database as needed. Operations which change the Settings data are written to the database and then updated in the cache. Settings maintained by this service may be changed by users at any time while the application is running. Therefore, any logic depending on the Settings from this service should be written as to be insensitive to such changes. Logic should avoid multiple retrievals of the same setting during any one transaction.","ref":"MscmpSystSettings.html","title":"MscmpSystSettings","type":"module"},{"doc":"Creates a new user defined setting. This function creates a setting which is automatically marked as being user defined. User created settings such as those created by this function are the only kind of settings which may be deleted via delete_setting/2 . Parameters creation_params a map defining the new settings record. The map must contain the following keys: internal_name - This is the unique value which represents the name of the setting and is used for latter lookup of setting values. This key should be suitable for programmatic references to the setting. display_name - A unique value used to display the setting name in user interface contexts. user_description - A user visible description of the setting including information describing how the setting is used in the application and directions for correct usage. Currently, the description must be at least 6 characters long. other allowed values, such as the setting values themselves, are also permitted here, but not required. Examples iex&gt; new_setting = %{ ...&gt; internal_name : &quot;create_example_setting&quot; , ...&gt; display_name : &quot;Create Example Setting&quot; , ...&gt; user_description : &quot;An example of setting creation.&quot; , ...&gt; setting_integer : 9876 ...&gt; } iex&gt; MscmpSystSettings . create_setting ( new_setting ) :ok","ref":"MscmpSystSettings.html#create_setting/1","title":"MscmpSystSettings.create_setting/1","type":"function"},{"doc":"Deletes the named user defined setting from the system. Note that this function cannot be used to delete a system defined setting. Trying to do so will result in a error being raised. Parameters setting_name - the name of the setting should be deleted. Examples iex&gt; MscmpSystSettings . delete_setting ( &quot;delete_example_setting&quot; ) :ok","ref":"MscmpSystSettings.html#delete_setting/1","title":"MscmpSystSettings.delete_setting/1","type":"function"},{"doc":"Retrieves the value of the given type for the requested setting. Parameters setting_name - the name of the setting for which to retrieve a value. setting_type - the type of value which to return. Examples iex&gt; MscmpSystSettings . get_setting_value ( ...&gt; &quot;get_example_setting&quot; , ...&gt; :setting_decimal_range ) % MscmpSystDb.DbTypes.DecimalRange { lower : Decimal . new ( &quot;1.1&quot; ) , upper : Decimal . new ( &quot;99.99&quot; ) , lower_inclusive : true , upper_inclusive : false }","ref":"MscmpSystSettings.html#get_setting_value/2","title":"MscmpSystSettings.get_setting_value/2","type":"function"},{"doc":"Retrieves all values associated with the requested setting. Parameters setting_name - the name of the setting for which to retrieve values. The successful return of this function is an instance of the Msdata.SystSettings struct containing the values requested. Examples iex&gt; MscmpSystSettings . get_setting_values ( &quot;get_example_setting&quot; )","ref":"MscmpSystSettings.html#get_setting_values/1","title":"MscmpSystSettings.get_setting_values/1","type":"function"},{"doc":"Retrieves the currently set Settings Service name or nil if none has been set. Examples iex&gt; MscmpSystSettings . get_settings_service ( ) :settings_instance","ref":"MscmpSystSettings.html#get_settings_service/0","title":"MscmpSystSettings.get_settings_service/0","type":"function"},{"doc":"Retrieves all values for all settings. This function returns all other setting metadata, such as the records' IDs, descriptions, etc. Examples iex&gt; MscmpSystSettings . list_all_settings ( )","ref":"MscmpSystSettings.html#list_all_settings/0","title":"MscmpSystSettings.list_all_settings/0","type":"function"},{"doc":"Establishes the current Settings Service instance for the process. A running system is likely to have more than one instance of the Settings Service running. For example, in multi-tenant applications each tenant may have its own instance of the Setting Service, caching data unique to the tenant. Calling MscmpSystSettings.put_settings_service/1 will set the reference to the desired Settings Service instance for any subsequent MscmpSystSettings calls. The service name is set in the Process Dictionary of the process from which the calls are being made. As such, you must call put_settings_service at least once for any process from which you wish to access the Settings Service. Because we're just thinly wrapping Process.put/2 here, the return value will be the previous value set here, or nil if no previous value was set. Parameters service_name - The name of the service which is to be set as servicing the process. Examples iex&gt; MscmpSystSettings . put_settings_service ( :settings_instance )","ref":"MscmpSystSettings.html#put_settings_service/1","title":"MscmpSystSettings.put_settings_service/1","type":"function"},{"doc":"Refreshes the cached settings values from the database. Calling this function causes the existing cached settings to be purged from the cache and the cache to be repopulated from the database using the datastore context provided to start_link/1 . Examples iex&gt; MscmpSystSettings . refresh_from_database ( ) :ok","ref":"MscmpSystSettings.html#refresh_from_database/0","title":"MscmpSystSettings.refresh_from_database/0","type":"function"},{"doc":"Sets the value of any one setting type for the named setting. Parameters setting_name - the name of the setting to update with the new value. setting_type - sets which of the different available value types is being updated. setting_value - is the new value to set on the setting. Note that the setting value must be appropriate for the setting_type argument or an error will be raised. Examples iex&gt; MscmpSystSettings . set_setting_value ( ...&gt; &quot;set_example_setting&quot; , ...&gt; :setting_decimal , ...&gt; Decimal . new ( &quot;1029.3847&quot; ) ) :ok","ref":"MscmpSystSettings.html#set_setting_value/3","title":"MscmpSystSettings.set_setting_value/3","type":"function"},{"doc":"Sets one or more of the available setting types for the named setting. This function is similar to set_setting_values/4 , except that multiple setting types can have their values set at the same time. In addition to the typed setting values, the setting display name and/or user description values may also be set. Parameters setting_name - the name of the setting to update with the new values. update_params - is a map that complies with the MscmpSystSettings.Types.setting_service_params() type specification and includes the updates to setting type values, updates to the display_name value, and/or updates to the user_description value. Examples iex&gt; update_values = %{ ...&gt; user_description : &quot;An example of updating the user description.&quot; , ...&gt; setting_integer : 6758 , ...&gt; setting_date_range : ...&gt; % MscmpSystDb.DbTypes.DateRange { ...&gt; lower : ~D[2022-04-01] , ...&gt; upper : ~D[2022-04-12] , ...&gt; upper_inclusive : true ...&gt; } ...&gt; } iex&gt; MscmpSystSettings . set_setting_values ( ...&gt; &quot;set_example_setting&quot; , ...&gt; update_values ) :ok","ref":"MscmpSystSettings.html#set_setting_values/2","title":"MscmpSystSettings.set_setting_values/2","type":"function"},{"doc":"Starts an instance of the Settings Service. Starting the service establishes the required processes and pre-populates the service cache with data from the database. Most other functions in this module require that the service is started prior to use and will fail if the service is not started. The service_name argument provides a unique name under which the service can be found. This argument is a subset of those that allowed for registering GenServers; the allowed forms for service name are simple atoms for basic local name registry or a &quot;via tuple&quot;, such as might be used with the Registry module. The datastore_context_name is an atom which represents a started MscmpSystDb context. This context will be used for accessing and modifying database data.","ref":"MscmpSystSettings.html#start_link/1","title":"MscmpSystSettings.start_link/1","type":"function"},{"doc":"Terminates a running instance of the settings service. Examples &gt; MscmpSystSettings . terminate_settings_service ( ) :ok","ref":"MscmpSystSettings.html#terminate_settings_service/0","title":"MscmpSystSettings.terminate_settings_service/0","type":"function"},{"doc":"The primary data structure for applications settings data. Defined in MscmpSystSettings .","ref":"Msdata.SystSettings.html","title":"Msdata.SystSettings","type":"module"},{"doc":"Produces a changeset used to create or update a settings record. The change_params argument defines the attributes to be used in maintaining a settings record. Of the allowed fields, the following are required for creation: internal_name - A unique key which is intended for programmatic usage by the application and other applications which make use of the data. display_name - A unique key for the purposes of presentation to users in user interfaces, reporting, etc. user_description - A description of the setting including its use cases and any limits or restrictions. This field must contain between 6 and 1000 characters to be considered valid. The options define other attributes which can guide validation of change_param values: min_internal_name_length - Sets a minimum length for internal_name values. The default value is 6 Unicode graphemes. max_internal_name_length - The maximum length allowed for the internal_name value. The default is 64 Unicode graphemes. min_display_name_length - Sets a minimum length for display_name values. The default value is 6 Unicode graphemes. max_display_name_length - The maximum length allowed for the display_name value. The default is 64 Unicode graphemes. min_user_description_length - Sets a minimum length for user_description values. The default value is 6 Unicode graphemes. max_user_description_length - The maximum length allowed for the user_description value. The default is 1000 Unicode graphemes.","ref":"Msdata.SystSettings.html#changeset/3","title":"Msdata.SystSettings.changeset/3","type":"function"},{"doc":"","ref":"Msdata.SystSettings.html#t:t/0","title":"Msdata.SystSettings.t/0","type":"type"},{"doc":"Types used by Settings service module.","ref":"MscmpSystSettings.Types.html","title":"MscmpSystSettings.Types","type":"module"},{"doc":"The valid forms of service name acceptable to identify the Settings service. Currently we expect the service name to be an atom, though we expect that any of a simple local name, the :global registry, or the Registry module to be used for service registration. Any registry compatible with those options should also work.","ref":"MscmpSystSettings.Types.html#t:service_name/0","title":"MscmpSystSettings.Types.service_name/0","type":"type"},{"doc":"Identification of each unique Setting managed by the Settings Service instance.","ref":"MscmpSystSettings.Types.html#t:setting_name/0","title":"MscmpSystSettings.Types.setting_name/0","type":"type"},{"doc":"A map definition describing what specific key/value pairs are available for passing as SystSettings changeset parameters.","ref":"MscmpSystSettings.Types.html#t:setting_params/0","title":"MscmpSystSettings.Types.setting_params/0","type":"type"},{"doc":"The expected form of the parameters used to start the Settings service.","ref":"MscmpSystSettings.Types.html#t:setting_service_params/0","title":"MscmpSystSettings.Types.setting_service_params/0","type":"type"},{"doc":"Data types of values accepted by any individual setting record. Note that any one setting record may set values for one or more of these types concurrently.","ref":"MscmpSystSettings.Types.html#t:setting_types/0","title":"MscmpSystSettings.Types.setting_types/0","type":"type"}]