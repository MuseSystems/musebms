searchData={"items":[{"type":"module","title":"DevSupport","doc":"","ref":"DevSupport.html"},{"type":"function","title":"DevSupport.start_dev_environment/1","doc":"","ref":"DevSupport.html#start_dev_environment/1"},{"type":"function","title":"DevSupport.stop_dev_environment/0","doc":"","ref":"DevSupport.html#stop_dev_environment/0"},{"type":"protocol","title":"MscmpSystPerms.Protocol","doc":"Defines a common API for the various higher level implementations which use\n`MscmpSystPerms` as a core for permission management.","ref":"MscmpSystPerms.Protocol.html"},{"type":"function","title":"MscmpSystPerms.Protocol.get_effective_perm_grants/2","doc":"Provides the effective Permissions/Rights/Scopes for the user context\nidentified by the `selector` as calculated from all effective grants and\nrevocations.\n\nThis function answers the question, \"what rights does this user really have?\"\n\nOn successful execution, a success tuple is returned including a map of the\nselected Permissions and the Rights/Scopes granted.  Errors will result in the\nreturn of an error tuple.","ref":"MscmpSystPerms.Protocol.html#get_effective_perm_grants/2"},{"type":"function","title":"Parameters - MscmpSystPerms.Protocol.get_effective_perm_grants/2","doc":"* `selector` - this value is a struct which determines the specific\n  implementation of this function to call and which contains the keys/values\n  to use in selecting which Permission and Permission Role Grant records to\n  retrieve.  Specific details about what records are involved and how the\n  selection return values are determine are implementation specific and will\n  be documented on a case-by-case basis.\n\n  * `opts` - a Keyword List of optional parameters which may be provided.  The\n  only general option is listed below, each specific implementation of this\n  function may extend the available options as appropriate to the\n  implementation.\n\n    * `permissions` - a list of specific Permission names to lookup.  This is\n    usually supplied as a limiting filter; without this list the typical\n    behavior is to return all of the permissions for a given Permission\n    Functional Type filtered only by the `selector` data.  Again, the details\n    of the filtering or inclusion using this option will be implementation\n    specific and documented for each individual implementation.","ref":"MscmpSystPerms.Protocol.html#get_effective_perm_grants/2-parameters"},{"type":"function","title":"MscmpSystPerms.Protocol.grant_perm_role/2","doc":"Grants a Permission Role to the given selector.\n\nOn successful execution of the grant, the function will return a simple `:ok`.\nOn error, an error tuple is returned.","ref":"MscmpSystPerms.Protocol.html#grant_perm_role/2"},{"type":"function","title":"Parameters - MscmpSystPerms.Protocol.grant_perm_role/2","doc":"* `selector` - this value is a struct which determines the specific\n  implementation of this function to call and which contains the keys/values\n  to use as the unique identifier of the user context to which you are\n  granting Permission Roles.\n\n  * `perm_role_id` - the record ID value of the Permission Role record which\n  you are granting to the user context identified by the `selector`.","ref":"MscmpSystPerms.Protocol.html#grant_perm_role/2-parameters"},{"type":"function","title":"MscmpSystPerms.Protocol.list_perm_denials/2","doc":"List all explicit denials of Permissions from the identified user context.\n\nAn assumption made by this module is that Permission Roles are granted to\nusers as whole roles, but individual Permissions may be explicitly denied from\nusers on a Permission by Permission basis.  This function is intended to list\nPermission denials for a user context so that the denials may be managed.\n\nSome user contexts may not offer explicit Permission denials.  In these cases\nthis function should simply return a success tuple containing an empty list as\nthe value.","ref":"MscmpSystPerms.Protocol.html#list_perm_denials/2"},{"type":"function","title":"Parameters - MscmpSystPerms.Protocol.list_perm_denials/2","doc":"* `selector` - this value is a struct which determines the specific\n  implementation of this function to call and which contains the keys/values\n  to use in selecting which Permission denial records to retrieve. Specific\n  details about what records are involved and how the selection return values\n  are determine are implementation specific and will be documented on a case-\n  by-case basis.\n\n  * `opts` - a Keyword List of optional parameters which may be provided.  The\n  only general option is listed below, each specific implementation of this\n  function may extend the available options as appropriate to the\n  implementation.","ref":"MscmpSystPerms.Protocol.html#list_perm_denials/2-parameters"},{"type":"function","title":"MscmpSystPerms.Protocol.list_perm_grants/2","doc":"Lists all of the Permission Role records granted to the user context\nidentified by the `selector`, including the Rights/Scopes of the grants.\n\nThis function facilitates understanding what roles have been granted to user\nand what Permissions/Rights/Scopes those roles grant to the user.  This list\nis intended to be descriptive and not directly indicating the effective grants\napplied to the user.  Typical uses of this function are to populate lists of\nPermission Role Grants for the purposes of managing user access.","ref":"MscmpSystPerms.Protocol.html#list_perm_grants/2"},{"type":"function","title":"Parameters - MscmpSystPerms.Protocol.list_perm_grants/2","doc":"* `selector` - this value is a struct which determines the specific\n  implementation of this function to call and which contains the keys/values\n  to use in selecting which Permission and Permission Role Grant records to\n  retrieve.  Specific details about what records are involved and how the\n  selection return values are determine are implementation specific and will\n  be documented on a case-by-case basis.\n\n  * `opts` - a Keyword List of optional parameters which may be provided.  The\n  only general option is listed below, each specific implementation of this\n  function may extend the available options as appropriate to the\n  implementation.\n\n\n    * `include_perms` - a boolean option which, when set `true`, will preload\n    the `Msdata.SystPermRoleGrants` `perm` data.  The default value for this\n    option is `false`.","ref":"MscmpSystPerms.Protocol.html#list_perm_grants/2-parameters"},{"type":"function","title":"MscmpSystPerms.Protocol.revoke_perm_role/2","doc":"Revokes a previously granted Permission Role from the given selector.\n\nOn successful execution a success tuple is returned.  If the grant was\nactually deleted this tuple will take the form `{:ok, :deleted}`.  If the\ngrant was not found for the user context identified by the `selector` then the\n`{:ok, :not_found}` tuple will be returned.  Any other outcome is an error\nresulting in an error tuple being returned.","ref":"MscmpSystPerms.Protocol.html#revoke_perm_role/2"},{"type":"function","title":"Parameters - MscmpSystPerms.Protocol.revoke_perm_role/2","doc":"* `selector` - this value is a struct which determines the specific\n  implementation of this function to call and which contains the keys/values\n  to use as the unique identifier of the user context from which you are\n  revoking Permission Roles.\n\n  * `perm_role_id` - the record ID value of the Permission Role record which\n  you are revoking from the user context identified by the `selector`.","ref":"MscmpSystPerms.Protocol.html#revoke_perm_role/2-parameters"},{"type":"type","title":"MscmpSystPerms.Protocol.t/0","doc":"All the types that implement this protocol.","ref":"MscmpSystPerms.Protocol.html#t:t/0"},{"type":"module","title":"MscmpSystPerms","doc":"Provides a generalized foundation for user permission system\nimplementations.\n\nThe principle idea of this component is to organization permissions in a way\nthat higher level components can introduce the concept of user and\nestablish contexts of applicability while keeping a cohesion in permissioning\ncapability.  To this end this component provides the core concepts for use in\nany permissioning system using this ecosystem of components.","ref":"MscmpSystPerms.html"},{"type":"module","title":"Concepts - MscmpSystPerms","doc":"Below are the concepts used in formulating the functional design of this\ncomponent.  While these concepts are generally applicable it's worth keeping\nin mind that any specific implementation of these concepts in an application\nwill have its own nuance and details that will have to be understood to properly\nuse the permissions of the system.\n\n##","ref":"MscmpSystPerms.html#module-concepts"},{"type":"module","title":"Rights - MscmpSystPerms","doc":"A Right is defined as the general ability to perform an action in the system.\nThere are a small handful of Rights:\n\n  * \"__View Right__\" - the ability of a user to see data. For users lacking this\n  Right for a certain data element, the element will either be presented as an\n  empty field or hidden altogether.  The View Right must always be at\n  least equal to or more expansive than the \"Maintenance Right\" defined below.\n\n  * \"__Maintenance Right__\" - the ability to perform data maintenance specifically\n  maintaining (editing) pre-existing data.  This Right does not include the\n  idea of being able to create new records or deleting existing records; just\n  changing existing records.\n\n  * \"__Administrative Right__\" - the ability to perform data administration which is\n  the ability to create or destroy data.  While it is typical for Administrative\n  Right holders to also be granted similar Maintenance Rights, it is not\n  implicitly so and there are some circumstances where it can be desirable for\n  these two rights to not be equal.\n\n  * \"__Operations Right__\" - whereas the previous Rights all concern being able to\n  view or manipulate data, the Operations Right expresses the ability to perform\n  system operations or processes.  Such an operation might be logging into the\n  system, scheduling a job, starting some expensive process, or launching an\n  integration job to a third party platform.  The operation or process will\n  naturally likely be working with system data, but the user is not directly\n  doing so and as such data related rights are not necessarily required to\n  exercise a granted Operations Right.\n\n##","ref":"MscmpSystPerms.html#module-rights"},{"type":"module","title":"Scopes - MscmpSystPerms","doc":"Scopes define the extent to which a granted Right applies.  For example, a user\nbeing given View Rights to a document such as a Sales Order may be allowed to\nview all Sales Orders in the system or they may be limited to those Sales Orders\nfor which they are designated as the \"owner\".  Scope is the mechanism which\nallows the View to be fine tuned in that way.\n\nSimilar to Rights, a small number of Scopes are available for use:\n\n  * \"__Deny__\" - the Right is not actually granted to the user but instead is\n  explicitly denied to the user.  The use of the Deny Scope will become clearer\n  when we discuss Permissions and Permission Role Grants.\n\n  * \"__Same User__\" - the Right is limited to the current user exercising the Right.\n  This is the case from the section summary example can only view their own\n  Sales Orders. The Right does not extend to data owned by other users.\n\n  * \"__Same Group__\" - the Right is limited to data belonging to a group or\n  organizational designation to which the user is also assigned.  The details of\n  group membership/designation will be specific to the implementation but the\n  concept of a group based limitation of Rights is supported by this Scope.\n\n  * \"__All__\" - the Right grant permits access to all applicable data or operations\n  without additional limitation.  From the summary example this is the case\n  where the user can see all Sales Orders.\n\n  * \"__Unused__\" - is a special scope which indicates that a Right is not applicable\n  to any grants in question.  The use of the Unused Scope will become clearer\n  when we discuss Permissions and Permission Role Grants.\n\n##","ref":"MscmpSystPerms.html#module-scopes"},{"type":"module","title":"Permission Functional Types - MscmpSystPerms","doc":"Permission Functional Types provide a grouping mechanism for Permissions and\nPermission Roles (discussed below).  The idea here is that an application may\ndefine different applicability contexts for the permissions of the system.\nConsider an application which supports business operations and inventory\nmanagement across multiple warehouses.  A permission such as one that grants an\nemployee the right to log into the system might have a \"global\" reach (there's\nonly one system) but having permission to process inventory transactions may be\nspecific to each warehouse, a \"warehouse\" reach.  The application could\naccommodate this by implementing a \"Global\" Permission Functional Type to\ninclude all those permissions which are global in nature and a \"Warehouse\"\nPermission Functional Type to include all permissions which are granted\nwarehouse by warehouse.\n\nPermission Functional Types are deeply tied to the implementation of application\nfunctionality and as such they are for the most part not end user configurable.\nThe exception to this are the user interface representations such as the display\nname and description fields.\n\nThis concept is conveyed via the `Msdata.SystPermFunctionalTypes` struct.\n\n##","ref":"MscmpSystPerms.html#module-permission-functional-types"},{"type":"module","title":"Permissions - MscmpSystPerms","doc":"A Permission defines the specific data point, application document, or operation\nfor which Rights may be granted.  For all Rights a Permission will define the\navailable Scopes which may be granted; this means that any given Permission may\noffer all Scopes or some subset of them for a given Right.\n\nIf a Permission's functional use doesn't include a specific Right, the only\navailable Scope for the irrelevant Right will be the special \"Unused\" Scope.\nFor example a Permission for logging into the system doesn't include the concept\nof viewing data, logging in is only an \"Operation\"; so the login Permission will\nmake the \"Unused\" Scope the only available scope for its View Right.\n\nBecause a Permission's functional use may include multiple Rights and it may\nonly be appropriate to grant some of the of those Rights to the user, a\nPermission may include the Scope of \"Deny\" as an available Scope.  An example of\nthis would be viewing certain documents; it might be appropriate to grant a user\nread only access to all Purchase Orders in the system.  In this case a Purchase\nOrder Document Permission grant to the user would use the \"All\" Scope for the\nView Right, but would set the Maintenance and Administration Rights of that\npermission to \"Deny\".  Since the Purchase Order Document Permission is for all\nrights pertaining to Purchase Order Documents, we need that ability to\nselectively deny permission.\n\nThis concept is conveyed via the `Msdata.SystPermFuncs` struct.\n\n##","ref":"MscmpSystPerms.html#module-permissions"},{"type":"module","title":"Permission Roles - MscmpSystPerms","doc":"Permission Roles allow for the grouping of specific Permissions and the specific\ngrants of Rights.  These Permission Roles are then the assigned to system users,\ngiving these users the collective Rights of their assigned Permission Roles.\nNote that Permission Roles are intended to be additive; this means that if a\ntwo Permission Roles are granted to a user, and one Role gives the user view\nonly access to Sales Orders but the other Role gives the user both Maintenance\nand Administrative Rights to Sales Orders, the Role which gives Maintenance and\nAdministrative Rights will be the effective Role for that Permission.  Its the\ngreatest of grants from each granted Permission Roles which wins.\n\nPermission Roles may be system defined, which means they cannot be changed\nexcept for their user interface presentation elements.  This component also\nsupports arbitrarily defined user Permission Roles as user security policy\ndictates as appropriate.\n\nA Permission Role is defined for a specific Permission Functional Type which\nbecomes important to the Permission Role's child Permission Role Grants.  In\nessence this means that a single Permission Role may not span the application\ndefined Permission Functional Type boundaries when granting Permissions to\nusers.\n\n##","ref":"MscmpSystPerms.html#module-permission-roles"},{"type":"module","title":"Permission Role Grants - MscmpSystPerms","doc":"A child of the Permission Role, a single Permission Role Grant grants a single\nPermission and defines the specific Scope for each of the Rights from the\navailable Scopes defined by the Permission itself.\n\nOnly Permissions which share the same Permission Functional Type as the parent\nPermission Role may be granted using the Permission Role Grants.  This ensures\nthat each Permission Role functions which a cohesive application context.\n\nPermission Role Grants assume the system defined status of their parent\nPermission Role.  If the parent Permission Role is system defined then the\nPermission Role Grant may not be changed or deleted nor may new Permission Role\nGrant records be created for that Permission Role.  User defined Permission Role\nparents allow editing Scope assignments to Rights and the addition and removal\nof Permission Role Grant records.\n\nNaturally, only a single Permission Role Grant record for exist for any\ncombination of Permission Role and Permission records.","ref":"MscmpSystPerms.html#module-permission-role-grants"},{"type":"module","title":"A Basis for Permissions - MscmpSystPerms","doc":"As has been stated before, this component provides the basic concepts of what it\nmeans to have Permissions in an application and the general aspects of\nimplementing these concepts.  Notably absent is what constitutes a \"user\", how\ncontexts of applicability are established, or implementations of permission\nchecks.\n\nThe thinking in this regard is that higher level components or applications\nthemselves will use MscmpSystPerms as a library providing basic Permissions data\nmanagement while providing implementations for users, Permission Role assignment\nto those users in their correct contexts, and necessarily building on those next\nsteps the actual evaluation of whether or not a user has a permission to do\nsomething in the system.\n\nOne recommendation for implementing applications is that the Permission Role\nassignment to users should be the exclusive mechanism for granting Permission\nRights; what we mean by this is that Permission specific, one-off grants to\nusers are to be avoided.  From a user security perspective it becomes difficult\nto consistently manage two paths for granting authority in the system,\nespecially if one of those paths is genuinely exceptional.  One-off revocations\nof Permissions Rights from specific individual users is acceptable, however,\nbecause the its immediately apparent to the user when user maintenance has\noverlooked the removal of a one-off revocations (the user can't dont something\nthey expect to be able to do).","ref":"MscmpSystPerms.html#module-a-basis-for-permissions"},{"type":"function","title":"MscmpSystPerms.compare_scopes/2","doc":"Compares two Scope values and returns a value indicating the relative\nexpansiveness of Scope.\n\nScopes restrict, to varying degrees, how much data a user might access for a\ngiven Right.  We can compare Scopes relative to how much more or less data\na Scope grants to a user and that's what this function does.  Scopes granting\nmore expansive access to data are considered greater than Scopes granting data\non more restrictive terms.  Of course any two scopes may be equal as well.\n\nThe return value is an atom indicating whether the Scope in the first\nparameter position is greater than, less than, or equal to the expansiveness\nof Scope in the second parameter position.  These return values are:\n\n  * `:eq` - both the first and second Scopes are equal in terms of the\n  expansiveness and are considered 'equal' to each other.\n\n  * `:gt` - the first Scope parameter confers a greater expansiveness than the\n  second Scope parameter and is considered 'greater than' the Scope of the\n  second parameter.\n\n  * `:lt` - the first Scope parameter confers a lesser expansiveness than the\n  second Scope parameter and is considered 'less than' the Scope of the second\n  parameter.","ref":"MscmpSystPerms.html#compare_scopes/2"},{"type":"function","title":"MscmpSystPerms.create_perm/1","doc":"Creates a new user defined Permission record.\n\nUpon creation this function returns a success tuple in the form\n`{:ok, %Msdata.SystPerms{}}` where the struct is the data of the newly created\nrecord.  On error an error tuple is returned (`{:error, %MscmpSystError{}}`).","ref":"MscmpSystPerms.html#create_perm/1"},{"type":"function","title":"Parameters - MscmpSystPerms.create_perm/1","doc":"* `perm_params` - a map of values which describe the Permission record to\n  create.  For details see `t:MscmpSystPerms.Types.perm_params/0`.","ref":"MscmpSystPerms.html#create_perm/1-parameters"},{"type":"function","title":"MscmpSystPerms.create_perm_role/1","doc":"Creates a new user defined Permission Role record.\n\nOn successful record creation this function returns a success tuple in the\nform `{:ok, %Msdata.SystPermRoles{}}` where the struct is the data of the\ncreated record.  On error an error tuple is returned\n(`{:error, %MscmpSystError{}}`).","ref":"MscmpSystPerms.html#create_perm_role/1"},{"type":"function","title":"Parameters - MscmpSystPerms.create_perm_role/1","doc":"* `perm_role_params` - a map describing the new Permission Role record's\n  values.  For more about see `t:MscmpSystPerms.Types.perm_role_params/0`.","ref":"MscmpSystPerms.html#create_perm_role/1-parameters"},{"type":"function","title":"MscmpSystPerms.create_perm_role_grant/1","doc":"Creates a new Permission Role Grant to a user defined Permission Role.\n\nOn successful record creation this function returns a success tuple in the\nform `{:ok, %Msdata.SystPermRoleGrants{}}` where the struct is the data of the\ncreated record.  On error an error tuple is returned\n(`{:error, %MscmpSystError{}}`).\n\nNew Permission Role Grant records can only be created for parent Permission\nRole records that are not set as being system defined.","ref":"MscmpSystPerms.html#create_perm_role_grant/1"},{"type":"function","title":"Parameters - MscmpSystPerms.create_perm_role_grant/1","doc":"* `perm_role_grant_params` - a map describing the new Permission Role Grant\n  record's values.  For more about see\n  `t:MscmpSystPerms.Types.perm_role_grant_params/0`.","ref":"MscmpSystPerms.html#create_perm_role_grant/1-parameters"},{"type":"function","title":"MscmpSystPerms.delete_perm/1","doc":"Deletes a user defined Permission record.\n\nOn successful deletion of the record this function returns a success tuple in\nthe form `{:ok, :deleted}`.  If the requested record is not found a success\ntuple in the form `{:ok, :not_found}` is returned.  On error an error tuple is\nreturned (`{:error, %MscmpSystError{}}`).","ref":"MscmpSystPerms.html#delete_perm/1"},{"type":"function","title":"Parameters - MscmpSystPerms.delete_perm/1","doc":"* `perm` - either a populated `Msdata.SystPerms` struct or the record ID\n  value of the Permission record to delete.","ref":"MscmpSystPerms.html#delete_perm/1-parameters"},{"type":"function","title":"MscmpSystPerms.delete_perm_role/1","doc":"Deletes user defined Permission Role records.\n\nOn successful deletion of the record this function returns a success tuple in\nthe form `{:ok, :deleted}`.  If the requested record is not found a success\ntuple in the form `{:ok, :not_found}` is returned.  On error an error tuple is\nreturned (`{:error, %MscmpSystError{}}`).\n\nSystem defined Permission Role records may not be deleted using this API.","ref":"MscmpSystPerms.html#delete_perm_role/1"},{"type":"function","title":"Parameters - MscmpSystPerms.delete_perm_role/1","doc":"* `perm_role` - either the record ID value of the Permission Role record to\n  delete or a populated `Msdata.SystPermRoles` struct representing the\n  Permission Role record.","ref":"MscmpSystPerms.html#delete_perm_role/1-parameters"},{"type":"function","title":"MscmpSystPerms.delete_perm_role_grant/1","doc":"Deletes the Permission Role Grant records of user defined Permission Roles.\n\nOn successful deletion of the record this function returns a success tuple in\nthe form `{:ok, :deleted}`.  If the requested record is not found a success\ntuple in the form `{:ok, :not_found}` is returned.  On error an error tuple is\nreturned (`{:error, %MscmpSystError{}}`).\n\nPermission Role Grant records belonging to System defined Permission Roles may\nnot be deleted using this API.","ref":"MscmpSystPerms.html#delete_perm_role_grant/1"},{"type":"function","title":"Parameters - MscmpSystPerms.delete_perm_role_grant/1","doc":"* `perm_role_grant` - either the record ID value of the Permission Role\n  Grant record to delete or a populated `Msdata.SystPermRoleGrants` struct\n  representing the Permission Role Grant record.","ref":"MscmpSystPerms.html#delete_perm_role_grant/1-parameters"},{"type":"function","title":"MscmpSystPerms.get_effective_perm_grants/2","doc":"Provides the effective Permissions/Rights/Scopes for the user context\nidentified by the `selector` as calculated from all effective grants and\nrevocations.\n\nThis function answers the question, \"what rights does this user really have?\"\n\nOn successful execution, a success tuple is returned including a map of the\nselected Permissions and the Rights/Scopes granted.  Errors will result in the\nreturn of an error tuple.","ref":"MscmpSystPerms.html#get_effective_perm_grants/2"},{"type":"function","title":"Parameters - MscmpSystPerms.get_effective_perm_grants/2","doc":"* `selector` - this value is a struct which determines the specific\n  implementation of this function to call and which contains the keys/values\n  to use in selecting which Permission and Permission Role Grant records to\n  retrieve.  Specific details about what records are involved and how the\n  selection return values are determine are implementation specific and will\n  be documented on a case-by-case basis.\n\n  * `opts` - a Keyword List of optional parameters which may be provided.  The\n  only general option is listed below, each specific implementation of this\n  function may extend the available options as appropriate to the\n  implementation.\n\n    * `permissions` - a list of specific Permission names to lookup.  This is\n    usually supplied as a limiting filter; without this list the typical\n    behavior is to return all of the permissions for a given Permission\n    Functional Type filtered only by the `selector` data.  Again, the details\n    of the filtering or inclusion using this option will be implementation\n    specific and documented for each individual implementation.","ref":"MscmpSystPerms.html#get_effective_perm_grants/2-parameters"},{"type":"function","title":"MscmpSystPerms.get_perm_role_id_by_name/2","doc":"Retrieves the Permission Role record ID as found by its functional type name\nand Internal Name.\n\nThe function will either return the record ID of the requested Permission Role\nor `nil` of that role was not found.  If an error occurs an error tuple is\nreturned.","ref":"MscmpSystPerms.html#get_perm_role_id_by_name/2"},{"type":"function","title":"Parameters - MscmpSystPerms.get_perm_role_id_by_name/2","doc":"* `perm_func_type_name` - the Internal Name of the Permission Functional Type\n to which the search should be restricted.  While the Permission Role name\n itself is unique, specifying the Permission Functional Type serves as a check\n that request context is correct.\n\n * `perm_role_name` - the Internal Name value of the Permission Role to search\n for.","ref":"MscmpSystPerms.html#get_perm_role_id_by_name/2-parameters"},{"type":"function","title":"Examples - MscmpSystPerms.get_perm_role_id_by_name/2","doc":"Retrieve the record ID of a Permission Role record.\n\n    iex> _perm_role_id =\n    ...>   MscmpSystPerms.get_perm_role_id_by_name(\"func_type_1\", \"perm_role_1\")\n\nSearching for a non-existent record returns `nil`.\n\n    iex> MscmpSystPerms.get_perm_role_id_by_name(\"func_type_1\", \"nonexistent_role\")\n    nil","ref":"MscmpSystPerms.html#get_perm_role_id_by_name/2-examples"},{"type":"function","title":"MscmpSystPerms.grant_perm_role/2","doc":"Grants a Permission Role to the given selector.\n\nOn successful execution of the grant, the function will return a simple `:ok`.\nOn error, an error tuple is returned.","ref":"MscmpSystPerms.html#grant_perm_role/2"},{"type":"function","title":"Parameters - MscmpSystPerms.grant_perm_role/2","doc":"* `selector` - this value is a struct which determines the specific\n  implementation of this function to call and which contains the keys/values\n  to use as the unique identifier of the user context to which you are\n  granting Permission Roles.\n\n  * `perm_role_id` - the record ID value of the Permission Role record which\n  you are granting to the user context identified by the `selector`.","ref":"MscmpSystPerms.html#grant_perm_role/2-parameters"},{"type":"function","title":"MscmpSystPerms.list_perm_denials/2","doc":"List all explicit denials of Permissions from the identified user context.\n\nAn assumption made by this module is that Permission Roles are granted to\nusers as whole roles, but individual Permissions may be explicitly denied from\nusers on a Permission by Permission basis.  This function is intended to list\nPermission denials for a user context so that the denials may be managed.\n\nSome user contexts may not offer explicit Permission denials.  In these cases\nthis function should simply return a success tuple containing an empty list as\nthe value.","ref":"MscmpSystPerms.html#list_perm_denials/2"},{"type":"function","title":"Parameters - MscmpSystPerms.list_perm_denials/2","doc":"* `selector` - this value is a struct which determines the specific\n  implementation of this function to call and which contains the keys/values\n  to use in selecting which Permission denial records to retrieve.  Specific\n  details about what records are involved and how the selection return values\n  are determine are implementation specific and will be documented on a case-\n  by-case basis.\n\n  * `opts` - a Keyword List of optional parameters which may be provided.  The\n  only general option is listed below, each specific implementation of this\n  function may extend the available options as appropriate to the\n  implementation.","ref":"MscmpSystPerms.html#list_perm_denials/2-parameters"},{"type":"function","title":"MscmpSystPerms.list_perm_grants/2","doc":"Lists all of the Permission Role records granted to the user context\nidentified by the `selector`, including the Rights/Scopes of the grants.\n\nThis function facilitates understanding what roles have been granted to user\nand what Permissions/Rights/Scopes those roles grant to the user.  This list\nis intended to be descriptive and not directly indicating the effective grants\napplied to the user.  Typical uses of this function are to populate lists of\nPermission Role Grants for the purposes of managing user access.","ref":"MscmpSystPerms.html#list_perm_grants/2"},{"type":"function","title":"Parameters - MscmpSystPerms.list_perm_grants/2","doc":"* `selector` - this value is a struct which determines the specific\n  implementation of this function to call and which contains the keys/values\n  to use in selecting which Permission and Permission Role Grant records to\n  retrieve.  Specific details about what records are involved and how the\n  selection return values are determine are implementation specific and will\n  be documented on a case-by-case basis.\n\n  * `opts` - a Keyword List of optional parameters which may be provided.  The\n  only general option is listed below, each specific implementation of this\n  function may extend the available options as appropriate to the\n  implementation.\n\n    * `include_perms` - a boolean option which, when set `true`, will preload\n    the `Msdata.SystPermRoleGrants` `perm` data.  The default value for this\n    option is `false`.","ref":"MscmpSystPerms.html#list_perm_grants/2-parameters"},{"type":"function","title":"MscmpSystPerms.revoke_perm_role/2","doc":"Revokes a previously granted Permission Role from the given selector.\n\nOn successful execution a success tuple is returned.  If the grant was\nactually deleted this tuple will take the form `{:ok, :deleted}`.  If the\ngrant was not found for the user context identified by the `selector` then the\n`{:ok, :not_found}` tuple will be returned.  Any other outcome is an error\nresulting in an error tuple being returned.","ref":"MscmpSystPerms.html#revoke_perm_role/2"},{"type":"function","title":"Parameters - MscmpSystPerms.revoke_perm_role/2","doc":"* `selector` - this value is a struct which determines the specific\n  implementation of this function to call and which contains the keys/values\n  to use as the unique identifier of the user context from which you are\n  revoking Permission Roles.\n\n  * `perm_role_id` - the record ID value of the Permission Role record which\n  you are revoking from the user context identified by the `selector`.","ref":"MscmpSystPerms.html#revoke_perm_role/2-parameters"},{"type":"function","title":"MscmpSystPerms.update_perm/2","doc":"Updates an existing Permission record.\n\nUpon update this function returns a success tuple in the form\n`{:ok, %Msdata.SystPerms{}}` where the struct is the data of the updated\nrecord.  On error an error tuple is returned (`{:error, %MscmpSystError{}}`).\n\nSystem defined Permission records only allow the user interface display fields\nto be updated (`display_name`, `user_description`).  User defined permissions\nallow a broader range of changes.","ref":"MscmpSystPerms.html#update_perm/2"},{"type":"function","title":"Parameters - MscmpSystPerms.update_perm/2","doc":"* `perm` - either a fully populated `Msdata.SystPerms` struct representing\n  the before-update state of the Permission record or the record ID of the\n  Permission record to update.\n\n  * `perm_params` - a map of values which describe the desired update fields\n  and their new values.  For details see `t:MscmpSystPerms.Types.perm_params/0`.","ref":"MscmpSystPerms.html#update_perm/2-parameters"},{"type":"function","title":"MscmpSystPerms.update_perm_functional_type/2","doc":"Updates Permission Functional Type user maintainable data.\n\nThis record type is usually maintained via database migrations and most\nchanges are not possible at the application server level.  However the user\nfacing `display_name` and `user_description` fields are available for update.\n\nOn successful update, a success tuple is returned including a copy of the\nupdated Permission Functional Type record (`{:ok,  }`).  On failure\nan error tuple is returned indicating the reason for failure\n(`{:error, reason}`).","ref":"MscmpSystPerms.html#update_perm_functional_type/2"},{"type":"function","title":"Parameters - MscmpSystPerms.update_perm_functional_type/2","doc":"* `perm_functional_type` - a required value which is either the populated\n  `Msdata.SystPermFunctionalTypes` struct or ID value of the record to be\n  updated.\n\n  * `perm_functional_type_params` - a map of values which define the change to\n  be made to the database.  For details on which fields may be maintained see\n  `t:MscmpSystPerms.Types.perm_functional_type_params/0`.","ref":"MscmpSystPerms.html#update_perm_functional_type/2-parameters"},{"type":"function","title":"MscmpSystPerms.update_perm_role/2","doc":"Updates Permission Role records.\n\nUpon update this function returns a success tuple in the form\n`{:ok, %Msdata.SystPermRoles{}}` where the struct is the data of the updated\nrecord.  On error an error tuple is returned (`{:error, %MscmpSystError{}}`).\n\nSystem defined Permission Role records only allow the user interface display\nfields to be updated (`display_name`, `user_description`).  User defined\nPermission Roles allow a broader range of changes.","ref":"MscmpSystPerms.html#update_perm_role/2"},{"type":"function","title":"Parameters - MscmpSystPerms.update_perm_role/2","doc":"* `perm_role` - either the record ID of the Permission Role record to update\n  or a populated `Msdata.SystPermRoles` struct representing the pre-update\n  version of the record's data.\n\n  * `perm_role_params` - a map describing the new Permission Role record's\n  values.  For more about see `t:MscmpSystPerms.Types.perm_role_params/0`.","ref":"MscmpSystPerms.html#update_perm_role/2-parameters"},{"type":"function","title":"MscmpSystPerms.update_perm_role_grant/2","doc":"Updates the Permission Role Grant records of user defined Permission Roles.\n\nUpon update this function returns a success tuple in the form\n`{:ok, %Msdata.SystPermRoleGrants{}}` where the struct is the data of the\nupdated record.  On error an error tuple is returned\n(`{:error, %MscmpSystError{}}`).\n\nPermission Role Grant records which are children of system defined Permission\nRoles may not be updated using this API.","ref":"MscmpSystPerms.html#update_perm_role_grant/2"},{"type":"function","title":"Parameters - MscmpSystPerms.update_perm_role_grant/2","doc":"* `perm_role_grant` - either the record ID of the Permission Role Grant\n  record to update or a populated `Msdata.SystPermRoleGrants` struct\n  representing the pre-update version of the record's data.\n\n  * `perm_role_grant_params` - a map describing the Permission Role Grant\n  record values to update.  For more about see\n  `t:MscmpSystPerms.Types.perm_role_grant_params/0`.","ref":"MscmpSystPerms.html#update_perm_role_grant/2-parameters"},{"type":"module","title":"Msdata.SystPermFunctionalTypes","doc":"Defines the different kinds of permissions and allows those permissions to be\nassociated with various degrees of authority.\n\nDefined in `MscmpSystPerms`.","ref":"Msdata.SystPermFunctionalTypes.html"},{"type":"function","title":"Msdata.SystPermFunctionalTypes.update_changeset/3","doc":"","ref":"Msdata.SystPermFunctionalTypes.html#update_changeset/3"},{"type":"type","title":"Msdata.SystPermFunctionalTypes.t/0","doc":"","ref":"Msdata.SystPermFunctionalTypes.html#t:t/0"},{"type":"module","title":"Msdata.SystPermRoleGrants","doc":"Records that grant permissions to specific roles and in specific degrees of\nauthority.\n\nDefined in `MscmpSystPerms`.","ref":"Msdata.SystPermRoleGrants.html"},{"type":"function","title":"Msdata.SystPermRoleGrants.insert_changeset/1","doc":"","ref":"Msdata.SystPermRoleGrants.html#insert_changeset/1"},{"type":"function","title":"Msdata.SystPermRoleGrants.update_changeset/2","doc":"","ref":"Msdata.SystPermRoleGrants.html#update_changeset/2"},{"type":"type","title":"Msdata.SystPermRoleGrants.t/0","doc":"","ref":"Msdata.SystPermRoleGrants.html#t:t/0"},{"type":"module","title":"Msdata.SystPermRoles","doc":"Groups together individual permissions such that they can be sensibly granted\nto users.\n\nDefined in `MscmpSystPerms`.","ref":"Msdata.SystPermRoles.html"},{"type":"function","title":"Msdata.SystPermRoles.insert_changeset/2","doc":"","ref":"Msdata.SystPermRoles.html#insert_changeset/2"},{"type":"function","title":"Msdata.SystPermRoles.update_changeset/3","doc":"","ref":"Msdata.SystPermRoles.html#update_changeset/3"},{"type":"type","title":"Msdata.SystPermRoles.t/0","doc":"","ref":"Msdata.SystPermRoles.html#t:t/0"},{"type":"module","title":"Msdata.SystPerms","doc":"Definition of a system/application permission.\n\nDefined in `MscmpSystPerms`.","ref":"Msdata.SystPerms.html"},{"type":"function","title":"Msdata.SystPerms.insert_changeset/2","doc":"","ref":"Msdata.SystPerms.html#insert_changeset/2"},{"type":"function","title":"Msdata.SystPerms.update_changeset/3","doc":"","ref":"Msdata.SystPerms.html#update_changeset/3"},{"type":"type","title":"Msdata.SystPerms.t/0","doc":"","ref":"Msdata.SystPerms.html#t:t/0"},{"type":"module","title":"MscmpSystPerms.Types","doc":"Types used by the Perms component.","ref":"MscmpSystPerms.Types.html"},{"type":"type","title":"MscmpSystPerms.Types.perm_functional_type_id/0","doc":"The data type of the Permission Functional Type record.","ref":"MscmpSystPerms.Types.html#t:perm_functional_type_id/0"},{"type":"type","title":"MscmpSystPerms.Types.perm_functional_type_name/0","doc":"The data type of the Permission Functional Type Internal Name value.","ref":"MscmpSystPerms.Types.html#t:perm_functional_type_name/0"},{"type":"type","title":"MscmpSystPerms.Types.perm_functional_type_params/0","doc":"A map of user updatable Permission Functional Type attributes.\n\nWhile all Permission Functional Type records are considered system defined\nwhich prevents most data changes, those that effect the display of the record\nto system users are still permitted.","ref":"MscmpSystPerms.Types.html#t:perm_functional_type_params/0"},{"type":"type","title":"Attributes - MscmpSystPerms.Types.perm_functional_type_params/0","doc":"* `display_name` - a record candidate key displayed in user interfaces as\n  the name of the record.  This value is required, may not be set `nil`, and\n  must be unique in the system.\n\n  * `user_description` - a custom, user defined description which overrides\n  the system description, if any exists.  This attribute is optional and may\n  be set `nil` in which case the system description will be used.","ref":"MscmpSystPerms.Types.html#t:perm_functional_type_params/0-attributes"},{"type":"type","title":"MscmpSystPerms.Types.perm_grants/0","doc":"Defines the return value type for certain functions returning existing\nPermission Grants.\n\nFunctions which retrieve Permission Grant Role records for specific selection\ncriteria will often return a simplified value indicating the Permissions\ngranted including the Scope granted for each of the Permission's Rights.\n\nIn some cases a specific requested Permission may not be granted at all.  In\nthis scenario, an Msdata.SystPermRoleGrants role record won't exist, but the\nfunction should still return a `t:perm_grants/0` value with the default Scopes\nfor the requested Permission's Rights (usually `:deny`).\n\nThe keys for this map should be `t:perm_name/0` value of the Permission record\nin question.","ref":"MscmpSystPerms.Types.html#t:perm_grants/0"},{"type":"type","title":"MscmpSystPerms.Types.perm_id/0","doc":"The type of the Permission record ID value.","ref":"MscmpSystPerms.Types.html#t:perm_id/0"},{"type":"type","title":"MscmpSystPerms.Types.perm_name/0","doc":"The Internal Name type for Permission records.","ref":"MscmpSystPerms.Types.html#t:perm_name/0"},{"type":"type","title":"MscmpSystPerms.Types.perm_params/0","doc":"A map defining the data used in creating or updating Permission records.\n\nFor additional context and documentation of concepts discussed here and below\nsee the top level `MscmpSystPerms` documentation.","ref":"MscmpSystPerms.Types.html#t:perm_params/0"},{"type":"type","title":"Attributes - MscmpSystPerms.Types.perm_params/0","doc":"* `internal_name` - a candidate key useful for programmatic references to\n  individual records.  This is required data and the value must be unique in\n  the system.  Update operations may only change this attribute when the\n  record is not system defined.\n\n  * `display_name` - a candidate key used in user interface representations of\n  the record.  This is required data and the value must be unique in the\n  system.  This value may be updated for both system and user defined records\n  so long as the new value remains unique in the system.\n\n\n  * `user_description` - a custom, user defined description which overrides\n  the system description, if it exists.  This attribute is optional and may be\n  set `nil` in which case the system description will be used.  This value may\n  be changed for system defined Permission records.\n\n\n  * `perm_functional_type_id` - identifies the Permission Functional Type of\n  which this Permission record is part.  This value is required data and may\n  only be set during the creation of user defined permissions.  This attribute\n  may not be changed for system defined Permission records or after record\n  creation.\n\n\n  * `view_scope_options` - a list of `t:MscmpSystPerms.Types.rights_scope/0`\n  values defining the Permission record's recognized Scopes for its View\n  Right.  A value for this attribute must be set to a list containing at least\n  one Scope; if the View Right is not used by the Permission then the value of\n  this attribute should be set to `[\"unused\"]`.  This attribute may only be\n  updated for user defined Permission records.\n\n\n  * `maint_scope_options` - a list of `t:MscmpSystPerms.Types.rights_scope/0`\n  values defining the Permission record's recognized Scopes for its\n  Maintenance Right.  A value for this attribute must be set to a list\n  containing at least one Scope; if the Maintenance Right is not used by the\n  Permission then the value of this attribute should be set to `[\"unused\"]`.\n  This attribute may only be updated for user defined Permission records.\n\n  * `admin_scope_options` - a list of `t:MscmpSystPerms.Types.rights_scope/0`\n  values defining the Permission record's recognized Scopes for its\n  Administration Right.  A value for this attribute must be set to a list\n  containing at least one Scope; if the Administration Right is not used by\n  the Permission then the value of this attribute should be set to\n  `[\"unused\"]`.  This attribute may only be updated for user defined\n  Permission records.\n\n\n  * `ops_scope_options` - a list of `t:MscmpSystPerms.Types.rights_scope/0`\n  values defining the Permission record's recognized Scopes for its Operations\n  Right.  A value for this attribute must be set to a list containing at least\n  one Scope; if the Operations Right is not used by the Permission then the\n  value of this attribute should be set to `[\"unused\"]`.  This attribute may\n  only be updated for user defined Permission records.","ref":"MscmpSystPerms.Types.html#t:perm_params/0-attributes"},{"type":"type","title":"MscmpSystPerms.Types.perm_role_grant_id/0","doc":"Establishes the type of the Permission Role Grant record.","ref":"MscmpSystPerms.Types.html#t:perm_role_grant_id/0"},{"type":"type","title":"MscmpSystPerms.Types.perm_role_grant_params/0","doc":"A map of attributes used in creating or updating Permission Role Grant\nrecords.\n\nPermission Role Grant records are considered either \"System Defined\" or\n\"User Defined\" based on their parent `Msdata.SystPermRoles` record's\n`syst_defined` value.  The usage of some attributes described below will\ndepend on that parent record definition.","ref":"MscmpSystPerms.Types.html#t:perm_role_grant_params/0"},{"type":"type","title":"Attributes - MscmpSystPerms.Types.perm_role_grant_params/0","doc":"* `perm_role_id` - a `t:MscmpSystPerms.Types.perm_role_id/0` reference to\n  this record's parent Permission Role.  On user defined Permission Role Grant\n  creation this is is a required value.  This value may not be changed after\n  record creation.\n\n  * `perm_id` - a `t:MscmpSystPerms.Types.perm_id/0` reference to the\n  Permission record for the Permission being granted by the Permission Role.\n  On user defined Permission Role Grant creation this is is a required value.\n  This value may not be changed after record creation time.  Note that all\n  Permissions being granted by the Permission Role Grant record must share the\n  same Permission Functional Type as the Permission Role Grant's parent\n  Permission Role record.\n\n  * `view_scope` - the `t:MscmpSystPerms.Types.rights_scope` value of the View\n  Right being granted by the Permission Role Grant record.  This value is\n  required and must be one of the available Scopes defined by the Permission\n  being granted.  This value may not be changed if the Permission Role Grant\n  record is considered system defined.\n\n  * `maint_scope` - the `t:MscmpSystPerms.Types.rights_scope` value of the\n  Maintenance Right being granted by the Permission Role Grant record.  This\n  value is required and must be one of the available Scopes defined by the\n  Permission being granted.  This value may not be changed if the Permission\n  Role Grant record is considered system defined.\n\n  * `admin_scope` - the `t:MscmpSystPerms.Types.rights_scope` value of the\n  Administration Right being granted by the Permission Role Grant record.\n  This value is required and must be one of the available Scopes defined by\n  the Permission being granted.  This value may not be changed if the\n  Permission Role Grant record is considered system defined.\n\n  * `ops_scope` - the `t:MscmpSystPerms.Types.rights_scope` value of the\n  Operations Right being granted by the Permission Role Grant record.  This\n  value is required and must be one of the available Scopes defined by the\n  Permission being granted.  This value may not be changed if the Permission\n  Role Grant record is considered system defined.","ref":"MscmpSystPerms.Types.html#t:perm_role_grant_params/0-attributes"},{"type":"type","title":"MscmpSystPerms.Types.perm_role_id/0","doc":"The data type of the record ID for the Permission Role record.","ref":"MscmpSystPerms.Types.html#t:perm_role_id/0"},{"type":"type","title":"MscmpSystPerms.Types.perm_role_name/0","doc":"The data type of the Permission Role record Internal Name value.","ref":"MscmpSystPerms.Types.html#t:perm_role_name/0"},{"type":"type","title":"MscmpSystPerms.Types.perm_role_params/0","doc":"A map of attributes describing Permission Role record values for use in record\ncreation and update.","ref":"MscmpSystPerms.Types.html#t:perm_role_params/0"},{"type":"type","title":"Attributes - MscmpSystPerms.Types.perm_role_params/0","doc":"* `internal_name` - a record candidate key used to identify the record in\n  programmatic contexts.  The Internal Name value is a required data value and\n  it must be unique in the system.  User defined Permission Role records may\n  change this value so long as the uniqueness requirement is met.  System\n  defined Permission Role records may not change this value.\n\n  * `display_name` - a record candidate key used to identify the record in\n  user interface contexts.  A non-nil, system unique value is required for the\n  attribute.  This value may be changed for both user defined and system\n  defined Permission Role records so long as the uniqueness requirement is\n  observed.\n\n  * `perm_functional_type_id` - a required value which establishes for which\n  Permission Functional Type the Permission Role is being defined.  Permission\n  Roles will only be able to grant the Rights of Permissions of the same\n  Permission Functional Type.  This value may only be set at user defined\n  Permission Role record creation time and may not be updated later.\n\n  * `user_description` - a custom, user defined description which overrides\n  the system description, if any exists.  This attribute is optional and may\n  be set `nil` in which case the system description will be used.  This value\n  may updated for system defined Permission Role records.","ref":"MscmpSystPerms.Types.html#t:perm_role_params/0-attributes"},{"type":"type","title":"MscmpSystPerms.Types.rights_scope/0","doc":"Defines the system recognized Scopes which can be assigned to Permission\nRights options.\n\nNote that any given Permission may support all or only some of these Scopes.\nSee the description of any specific Permission to understand which specific\nScopes it supports.","ref":"MscmpSystPerms.Types.html#t:rights_scope/0"},{"type":"type","title":"Scopes - MscmpSystPerms.Types.rights_scope/0","doc":"* `:deny` - in some cases it is desirable to grant some Rights of a\n  Permission, but not others.  The `:deny` Scope supports not granting all\n  rights of a Permission when other Rights are granted.\n\n  * `:same_user` - the Right of the Permission is granted to the user, but\n  is limited to records for which they are designated as owner is some way.\n  Precisely how this designation is determined will be specified by each\n  function recognizing this Scope of Rights.\n\n  * `:same_group` - the Right of the Permission is granted to the user, but\n  is limited to records for which they are designated belonging to a group or\n  groups to which the user also has rights. Precisely how this determination\n  made will depend on the implementation details of the functionality in\n  question.\n\n  * `:all` - the Right of the Permission is granted to the user without any\n  Scope dependent limitations.\n\n  * `:unused` - when a permission does not support one of the standard Rights,\n  this value is assigned to the Right's options and any Permission Role Grant\n  for that Right.","ref":"MscmpSystPerms.Types.html#t:rights_scope/0-scopes"},{"type":"module","title":"MscmpSystPerms.Types.PermGrantValue","doc":"A data structure describing what Scope is granted for each Right of a\nPermission.","ref":"MscmpSystPerms.Types.PermGrantValue.html"},{"type":"type","title":"MscmpSystPerms.Types.PermGrantValue.t/0","doc":"A data structure describing what Scope is granted for each Right of a\nPermission.\n\nSee the conceptual documentation at `MscmpSystPerms` for more about the\navailable Rights and Scopes.","ref":"MscmpSystPerms.Types.PermGrantValue.html#t:t/0"}],"content_type":"text/markdown"}