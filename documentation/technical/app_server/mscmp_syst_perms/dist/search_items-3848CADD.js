searchNodes=[{"doc":"","ref":"DevSupport.html","title":"DevSupport","type":"module"},{"doc":"","ref":"DevSupport.html#get_datastore_context_id/0","title":"DevSupport.get_datastore_context_id/0","type":"function"},{"doc":"","ref":"DevSupport.html#start_dev_environment/1","title":"DevSupport.start_dev_environment/1","type":"function"},{"doc":"","ref":"DevSupport.html#stop_dev_environment/0","title":"DevSupport.stop_dev_environment/0","type":"function"},{"doc":"Defines a common API for the various higher level implementations which use MscmpSystPerms as a core for permission management.","ref":"MscmpSystPerms.Protocol.html","title":"MscmpSystPerms.Protocol","type":"protocol"},{"doc":"Returns the Permission Role Grant records for the given selector. On successful execution, a success tuple is returned including a map of the selected Permissions and the Rights/Scopes granted. Errors will result in the return of an error tuple. Parameters selector - this value is a struct which determines the specific implementation of this function to call and which contains the keys/values to use in selecting which Permission and Permission Role Grant records to retrieve. Specific details about what records are involved and how the selection return values are determine are implementation specific and will be documented on a case-by-case basis. opts - a Keyword List of optional parameters which may be provided. The only general option is listed below, each specific implementation of this function may extend the available options as appropriate to the implementation. permissions - a list of specific Permission names to lookup. This is usually supplied as a limiting filter; without this list the typical behavior is to return all of the permissions for a given Permission Functional Type filtered only by the selector data. Again, the details of the filtering or inclusion using this option will be implementation specific and documented for each individual implementation.","ref":"MscmpSystPerms.Protocol.html#get_perm_grants/2","title":"MscmpSystPerms.Protocol.get_perm_grants/2","type":"function"},{"doc":"","ref":"MscmpSystPerms.Protocol.html#t:t/0","title":"MscmpSystPerms.Protocol.t/0","type":"type"},{"doc":"MscmpSystPerms - Permissions System Foundation Provides a generalized foundation for user permission system implementations. The principle idea of this component is to organization permissions in a way that higher level components can introduce the concept of user and establish contexts of applicability while keeping a cohesion in permissioning capability. To this end this component provides the core concepts for use in any permissioning system using this ecosystem of components. Concepts Below are the concepts used in formulating the functional design of this component. While these concepts are generally applicable it's worth keeping in mind that any specific implementation of these concepts in an application will have its own nuance and details that will have to be understood to properly use the permissions of the system. Rights A Right is defined as the general ability to perform an action in the system. There are a small handful of Rights: &quot; View Right &quot; - the ability of a user to see data. For users lacking this Right for a certain data element, the element will either be presented as an empty field or hidden altogether. The View Right must always be at least equal to or more expansive than the &quot;Maintenance Right&quot; defined below. &quot; Maintenance Right &quot; - the ability to perform data maintenance specifically maintaining (editing) pre-existing data. This Right does not include the idea of being able to create new records or deleting existing records; just changing existing records. &quot; Administrative Right &quot; - the ability to perform data administration which is the ability to create or destroy data. While it is typical for Administrative Right holders to also be granted similar Maintenance Rights, it is not implicitly so and there are some circumstances where it can be desirable for these two rights to not be equal. &quot; Operations Right &quot; - whereas the previous Rights all concern being able to view or manipulate data, the Operations Right expresses the ability to perform system operations or processes. Such an operation might be logging into the system, scheduling a job, starting some expensive process, or launching an integration job to a third party platform. The operation or process will naturally likely be working with system data, but the user is not directly doing so and as such data related rights are not necessarily required to exercise a granted Operations Right. Scopes Scopes define the extent to which a granted Right applies. For example, a user being given View Rights to a document such as a Sales Order may be allowed to view all Sales Orders in the system or they may be limited to those Sales Orders for which they are designated as the &quot;owner&quot;. Scope is the mechanism which allows the View to be fine tuned in that way. Similar to Rights, a small number of Scopes are available for use: &quot; Deny &quot; - the Right is not actually granted to the user but instead is explicitly denied to the user. The use of the Deny Scope will become clearer when we discuss Permissions and Permission Role Grants. &quot; Same User &quot; - the Right is limited to the current user exercising the Right. This is the case from the section summary example can only view their own Sales Orders. The Right does not extend to data owned by other users. &quot; Same Group &quot; - the Right is limited to data belonging to a group or organizational designation to which the user is also assigned. The details of group membership/designation will be specific to the implementation but the concept of a group based limitation of Rights is supported by this Scope. &quot; All &quot; - the Right grant permits access to all applicable data or operations without additional limitation. From the summary example this is the case where the user can see all Sales Orders. &quot; Unused &quot; - is a special scope which indicates that a Right is not applicable to any grants in question. The use of the Unused Scope will become clearer when we discuss Permissions and Permission Role Grants. Permission Functional Types Permission Functional Types provide a grouping mechanism for Permissions and Permission Roles (discussed below). The idea here is that an application may define different applicability contexts for the permissions of the system. Consider an application which supports business operations and inventory management across multiple warehouses. A permission such as one that grants an employee the right to log into the system might have a &quot;global&quot; reach (there's only one system) but having permission to process inventory transactions may be specific to each warehouse, a &quot;warehouse&quot; reach. The application could accommodate this by implementing a &quot;Global&quot; Permission Functional Type to include all those permissions which are global in nature and a &quot;Warehouse&quot; Permission Functional Type to include all permissions which are granted warehouse by warehouse. Permission Functional Types are deeply tied to the implementation of application functionality and as such they are for the most part not end user configurable. The exception to this are the user interface representations such as the display name and description fields. This concept is conveyed via the Msdata.SystPermFunctionalTypes struct. Permissions A Permission defines the specific data point, application document, or operation for which Rights may be granted. For all Rights a Permission will define the available Scopes which may be granted; this means that any given Permission may offer all Scopes or some subset of them for a given Right. If a Permission's functional use doesn't include a specific Right, the only available Scope for the irrelevant Right will be the special &quot;Unused&quot; Scope. For example a Permission for logging into the system doesn't include the concept of viewing data, logging in is only an &quot;Operation&quot;; so the login Permission will make the &quot;Unused&quot; Scope the only available scope for its View Right. Because a Permission's functional use may include multiple Rights and it may only be appropriate to grant some of the of those Rights to the user, a Permission may include the Scope of &quot;Deny&quot; as an available Scope. An example of this would be viewing certain documents; it might be appropriate to grant a user read only access to all Purchase Orders in the system. In this case a Purchase Order Document Permission grant to the user would use the &quot;All&quot; Scope for the View Right, but would set the Maintenance and Administration Rights of that permission to &quot;Deny&quot;. Since the Purchase Order Document Permission is for all rights pertaining to Purchase Order Documents, we need that ability to selectively deny permission. This concept is conveyed via the Msdata.SystPermFuncs struct. Permission Roles Permission Roles allow for the grouping of specific Permissions and the specific grants of Rights. These Permission Roles are then the assigned to system users, giving these users the collective Rights of their assigned Permission Roles. Note that Permission Roles are intended to be additive; this means that if a two Permission Roles are granted to a user, an one Role gives the user view only access to Sales Orders but the other Role gives the user both Maintenance and Administrative Rights to Sales Orders, the Role which gives Maintenance and Administrative Rights will be the effective Role for that Permission. Its the greatest of grants from each granted Permission Roles which wins. Permission Roles may be system defined, which means they cannot be changed except for their user interface presentation elements. This component also supports arbitrarily defined user Permission Roles as user security policy dictates as appropriate. A Permission Role is defined for a specific Permission Functional Type which becomes important to the Permission Role's child Permission Role Grants. In essence this means that a single Permission Role may not span the application defined Permission Functional Type boundaries when granting Permissions to users. Permission Role Grants A child of the Permission Role, a single Permission Role Grant grants a single Permission and defines the specific Scope for each of the Rights from the available Scopes defined by the Permission itself. Only Permissions which share the same Permission Functional Type as the parent Permission Role may be granted using the Permission Role Grants. This ensures that each Permission Role functions which a cohesive application context. Permission Role Grants assume the system defined status of their parent Permission Role. If the parent Permission Role is system defined then the Permission Role Grant may not be changed or deleted nor may new Permission Role Grant records be created for that Permission Role. User defined Permission Role parents allow editing Scope assignments to Rights and the addition and removal of Permission Role Grant records. Naturally, only a single Permission Role Grant record for exist for any combination of Permission Role and Permission records. A Basis for Permissions As has been stated before, this component provides the basic concepts of what it means to have Permissions in an application and the general aspects of implementing these concepts. Notably absent is what constitutes a &quot;user&quot;, how contexts of applicability are established, or implementations of permission checks. The thinking in this regard is that higher level components or applications themselves will use MscmpSystPerms as a library providing basic Permissions data management while providing implementations for users, Permission Role assignment to those users in their correct contexts, and necessarily building on those next steps the actual evaluation of whether or not a user has a permission to do something in the system. One recommendation for implementing applications is that the Permission Role assignment to users should be the exclusive mechanism for granting Permission Rights; what we mean by this is that Permission specific, one-off grants to users are to be avoided. From a user security perspective it becomes difficult to consistently manage two paths for granting authority in the system, especially if one of those paths is genuinely exceptional. One-off revocations of Permissions Rights from specific individual users is acceptable, however, because the its immediately apparent to the user when user maintenance has overlooked the removal of a one-off revocations (the user can't dont something they expect to be able to do).","ref":"MscmpSystPerms.html","title":"MscmpSystPerms","type":"module"},{"doc":"Compares two Scope values and returns a value indicating the relative expansiveness of Scope. Scopes restrict, to varying degrees, how much data a user might access for a given Right. We can compare Scopes relative to how much more or less data a Scope grants to a user and that's what this function does. Scopes granting more expansive access to data are considered greater than Scopes granting data on more restrictive terms. Of course any two scopes may be equal as well. The return value is an atom indicating whether the Scope in the first parameter position is greater than, less than, or equal to the expansiveness of Scope in the second parameter position. These return values are: :eq - both the first and second Scopes are equal in terms of the expansiveness and are considered 'equal' to each other. :gt - the first Scope parameter confers a greater expansiveness than the second Scope parameter and is considered 'greater than' the Scope of the second parameter. :lt - the first Scope parameter confers a lesser expansiveness than the second Scope parameter and is considered 'less than' the Scope of the second parameter.","ref":"MscmpSystPerms.html#compare_scopes/2","title":"MscmpSystPerms.compare_scopes/2","type":"function"},{"doc":"Creates a new user defined Permission record. Upon creation this function returns a success tuple in the form {:ok, %Msdata.SystPerms{}} where the struct is the data of the newly created record. On error an error tuple is returned ( {:error, %MscmpSystError{}} ). Parameters perm_params - a map of values which describe the Permission record to create. For details see MscmpSystPerms.Types.perm_params/0 .","ref":"MscmpSystPerms.html#create_perm/1","title":"MscmpSystPerms.create_perm/1","type":"function"},{"doc":"Creates a new user defined Permission Role record. On successful record creation this function returns a success tuple in the form {:ok, %Msdata.SystPermRoles{}} where the struct is the data of the created record. On error an error tuple is returned ( {:error, %MscmpSystError{}} ). Parameters perm_role_params - a map describing the new Permission Role record's values. For more about see MscmpSystPerms.Types.perm_role_params/0 .","ref":"MscmpSystPerms.html#create_perm_role/1","title":"MscmpSystPerms.create_perm_role/1","type":"function"},{"doc":"Creates a new Permission Role Grant to a user defined Permission Role. On successful record creation this function returns a success tuple in the form {:ok, %Msdata.SystPermRoleGrants{}} where the struct is the data of the created record. On error an error tuple is returned ( {:error, %MscmpSystError{}} ). New Permission Role Grant records can only be created for parent Permission Role records that are not set as being system defined. Parameters perm_role_grant_params - a map describing the new Permission Role Grant record's values. For more about see MscmpSystPerms.Types.perm_role_grant_params/0 .","ref":"MscmpSystPerms.html#create_perm_role_grant/1","title":"MscmpSystPerms.create_perm_role_grant/1","type":"function"},{"doc":"Deletes a user defined Permission record. On successful deletion of the record this function returns a success tuple in the form {:ok, :deleted} . If the requested record is not found a success tuple in the form {:ok, :not_found} is returned. On error an error tuple is returned ( {:error, %MscmpSystError{}} ). Parameters perm - either a populated Msdata.SystPerms struct or the record ID value of the Permission record to delete.","ref":"MscmpSystPerms.html#delete_perm/1","title":"MscmpSystPerms.delete_perm/1","type":"function"},{"doc":"Deletes user defined Permission Role records. On successful deletion of the record this function returns a success tuple in the form {:ok, :deleted} . If the requested record is not found a success tuple in the form {:ok, :not_found} is returned. On error an error tuple is returned ( {:error, %MscmpSystError{}} ). System defined Permission Role records may not be deleted using this API. Parameters perm_role - either the record ID value of the Permission Role record to delete or a populated Msdata.SystPermRoles struct representing the Permission Role record.","ref":"MscmpSystPerms.html#delete_perm_role/1","title":"MscmpSystPerms.delete_perm_role/1","type":"function"},{"doc":"Deletes the Permission Role Grant records of user defined Permission Roles. On successful deletion of the record this function returns a success tuple in the form {:ok, :deleted} . If the requested record is not found a success tuple in the form {:ok, :not_found} is returned. On error an error tuple is returned ( {:error, %MscmpSystError{}} ). Permission Role Grant records belonging to System defined Permission Roles may not be deleted using this API. Parameters perm_role_grant - either the record ID value of the Permission Role Grant record to delete or a populated Msdata.SystPermRoleGrants struct representing the Permission Role Grant record.","ref":"MscmpSystPerms.html#delete_perm_role_grant/1","title":"MscmpSystPerms.delete_perm_role_grant/1","type":"function"},{"doc":"Updates an existing Permission record. Upon update this function returns a success tuple in the form {:ok, %Msdata.SystPerms{}} where the struct is the data of the updated record. On error an error tuple is returned ( {:error, %MscmpSystError{}} ). System defined Permission records only allow the user interface display fields to be updated ( display_name , user_description ). User defined permissions allow a broader range of changes. Parameters perm - either a fully populated Msdata.SystPerms struct representing the before-update state of the Permission record or the record ID of the Permission record to update. perm_params - a map of values which describe the desired update fields and their new values. For details see MscmpSystPerms.Types.perm_params/0 .","ref":"MscmpSystPerms.html#update_perm/2","title":"MscmpSystPerms.update_perm/2","type":"function"},{"doc":"Updates Permission Functional Type user maintainable data. This record type is usually maintained via database migrations and most changes are not possible at the application server level. However the user facing display_name and user_description fields are available for update. On successful update, a success tuple is returned including a copy of the updated Permission Functional Type record ( {:ok, &lt;record&gt;} ). On failure an error tuple is returned indicating the reason for failure ( {:error, reason} ). Parameters perm_functional_type - a required value which is either the populated Msdata.SystPermFunctionalTypes struct or ID value of the record to be updated. perm_functional_type_params - a map of values which define the change to be made to the database. For details on which fields may be maintained see MscmpSystPerms.Types.perm_functional_type_params/0 .","ref":"MscmpSystPerms.html#update_perm_functional_type/2","title":"MscmpSystPerms.update_perm_functional_type/2","type":"function"},{"doc":"Updates Permission Role records. Upon update this function returns a success tuple in the form {:ok, %Msdata.SystPermRoles{}} where the struct is the data of the updated record. On error an error tuple is returned ( {:error, %MscmpSystError{}} ). System defined Permission Role records only allow the user interface display fields to be updated ( display_name , user_description ). User defined Permission Roles allow a broader range of changes. Parameters perm_role - either the record ID of the Permission Role record to update or a populated Msdata.SystPermRoles struct representing the pre-update version of the record's data. perm_role_params - a map describing the new Permission Role record's values. For more about see MscmpSystPerms.Types.perm_role_params/0 .","ref":"MscmpSystPerms.html#update_perm_role/2","title":"MscmpSystPerms.update_perm_role/2","type":"function"},{"doc":"Updates the Permission Role Grant records of user defined Permission Roles. Upon update this function returns a success tuple in the form {:ok, %Msdata.SystPermRoleGrants{}} where the struct is the data of the updated record. On error an error tuple is returned ( {:error, %MscmpSystError{}} ). Permission Role Grant records which are children of system defined Permission Roles may not be updated using this API. Parameters perm_role_grant - either the record ID of the Permission Role Grant record to update or a populated Msdata.SystPermRoleGrants struct representing the pre-update version of the record's data. perm_role_grant_params - a map describing the Permission Role Grant record values to update. For more about see MscmpSystPerms.Types.perm_role_grant_params/0 .","ref":"MscmpSystPerms.html#update_perm_role_grant/2","title":"MscmpSystPerms.update_perm_role_grant/2","type":"function"},{"doc":"Defines the different kinds of permissions and allows those permissions to be associated with various degrees of authority. Defined in MscmpSystPerms .","ref":"Msdata.SystPermFunctionalTypes.html","title":"Msdata.SystPermFunctionalTypes","type":"module"},{"doc":"See MscmpSystPerms.Msdata.Validators.SystPermFunctionalTypes.update_changeset/3 .","ref":"Msdata.SystPermFunctionalTypes.html#update_changeset/3","title":"Msdata.SystPermFunctionalTypes.update_changeset/3","type":"function"},{"doc":"","ref":"Msdata.SystPermFunctionalTypes.html#t:t/0","title":"Msdata.SystPermFunctionalTypes.t/0","type":"type"},{"doc":"Records that grant permissions to specific roles and in specific degrees of authority. Defined in MscmpSystPerms .","ref":"Msdata.SystPermRoleGrants.html","title":"Msdata.SystPermRoleGrants","type":"module"},{"doc":"See MscmpSystPerms.Msdata.Validators.SystPermRoleGrants.insert_changeset/1 .","ref":"Msdata.SystPermRoleGrants.html#insert_changeset/1","title":"Msdata.SystPermRoleGrants.insert_changeset/1","type":"function"},{"doc":"See MscmpSystPerms.Msdata.Validators.SystPermRoleGrants.update_changeset/2 .","ref":"Msdata.SystPermRoleGrants.html#update_changeset/2","title":"Msdata.SystPermRoleGrants.update_changeset/2","type":"function"},{"doc":"","ref":"Msdata.SystPermRoleGrants.html#t:t/0","title":"Msdata.SystPermRoleGrants.t/0","type":"type"},{"doc":"Groups together individual permissions such that they can be sensibly granted to users. Defined in MscmpSystPerms .","ref":"Msdata.SystPermRoles.html","title":"Msdata.SystPermRoles","type":"module"},{"doc":"See MscmpSystPerms.Msdata.Validators.SystPermRoles.insert_changeset/2 .","ref":"Msdata.SystPermRoles.html#insert_changeset/2","title":"Msdata.SystPermRoles.insert_changeset/2","type":"function"},{"doc":"See MscmpSystPerms.Msdata.Validators.SystPermRoles.update_changeset/3 .","ref":"Msdata.SystPermRoles.html#update_changeset/3","title":"Msdata.SystPermRoles.update_changeset/3","type":"function"},{"doc":"","ref":"Msdata.SystPermRoles.html#t:t/0","title":"Msdata.SystPermRoles.t/0","type":"type"},{"doc":"Definition of a system/application permission. Defined in MscmpSystPerms .","ref":"Msdata.SystPerms.html","title":"Msdata.SystPerms","type":"module"},{"doc":"See MscmpSystPerms.Msdata.Validators.SystPerms.insert_changeset/2 .","ref":"Msdata.SystPerms.html#insert_changeset/2","title":"Msdata.SystPerms.insert_changeset/2","type":"function"},{"doc":"See MscmpSystPerms.Msdata.Validators.SystPerms.update_changeset/3 .","ref":"Msdata.SystPerms.html#update_changeset/3","title":"Msdata.SystPerms.update_changeset/3","type":"function"},{"doc":"","ref":"Msdata.SystPerms.html#t:t/0","title":"Msdata.SystPerms.t/0","type":"type"},{"doc":"Types used by the Perms component.","ref":"MscmpSystPerms.Types.html","title":"MscmpSystPerms.Types","type":"module"},{"doc":"The data type of the Permission Functional Type record.","ref":"MscmpSystPerms.Types.html#t:perm_functional_type_id/0","title":"MscmpSystPerms.Types.perm_functional_type_id/0","type":"type"},{"doc":"The data type of the Permission Functional Type Internal Name value.","ref":"MscmpSystPerms.Types.html#t:perm_functional_type_name/0","title":"MscmpSystPerms.Types.perm_functional_type_name/0","type":"type"},{"doc":"A map of user updatable Permission Functional Type attributes. While all Permission Functional Type records are considered system defined which prevents most data changes, those that effect the display of the record to system users are still permitted. Attributes display_name - a record candidate key displayed in user interfaces as the name of the record. This value is required, may not be set nil , and must be unique in the system. user_description - a custom, user defined description which overrides the system description, if any exists. This attribute is optional and may be set nil in which case the system description will be used.","ref":"MscmpSystPerms.Types.html#t:perm_functional_type_params/0","title":"MscmpSystPerms.Types.perm_functional_type_params/0","type":"type"},{"doc":"Describes the Scopes granted by a Permission for each of the Permission's Rights. See the conceptual documentation at MscmpSystPerms for more.","ref":"MscmpSystPerms.Types.html#t:perm_grant_value/0","title":"MscmpSystPerms.Types.perm_grant_value/0","type":"type"},{"doc":"Defines the return value type for certain functions returning existing Permission Grants. Functions which retrieve Permission Grant Role records for specific selection criteria will often return a simplified value indicating the Permissions granted including the Scope granted for each of the Permission's Rights. In some cases a specific requested Permission may not be granted at all. In this scenario, an Msdata.SystPermRoleGrants role record won't exist, but the function should still return a perm_grants/0 value with the default Scopes for the requested Permission's Rights (usually :deny ). The keys for this map should be perm_name/0 value of the Permission record in question.","ref":"MscmpSystPerms.Types.html#t:perm_grants/0","title":"MscmpSystPerms.Types.perm_grants/0","type":"type"},{"doc":"The type of the Permission record ID value.","ref":"MscmpSystPerms.Types.html#t:perm_id/0","title":"MscmpSystPerms.Types.perm_id/0","type":"type"},{"doc":"The Internal Name type for Permission records.","ref":"MscmpSystPerms.Types.html#t:perm_name/0","title":"MscmpSystPerms.Types.perm_name/0","type":"type"},{"doc":"A map defining the data used in creating or updating Permission records. For additional context and documentation of concepts discussed here and below see the top level MscmpSystPerms documentation. Attributes internal_name - a candidate key useful for programmatic references to individual records. This is required data and the value must be unique in the system. Update operations may only change this attribute when the record is not system defined. display_name - a candidate key used in user interface representations of the record. This is required data and the value must be unique in the system. This value may be updated for both system and user defined records so long as the new value remains unique in the system. user_description - a custom, user defined description which overrides the system description, if it exists. This attribute is optional and may be set nil in which case the system description will be used. This value may be changed for system defined Permission records. perm_functional_type_id - identifies the Permission Functional Type of which this Permission record is part. This value is required data and may only be set during the creation of user defined permissions. This attribute may not be changed for system defined Permission records or after record creation. view_scope_options - a list of MscmpSystPerms.Types.rights_scope/0 values defining the Permission record's recognized Scopes for its View Right. A value for this attribute must be set to a list containing at least one Scope; if the View Right is not used by the Permission then the value of this attribute should be set to [&quot;unused&quot;] . This attribute may only be updated for user defined Permission records. maint_scope_options - a list of MscmpSystPerms.Types.rights_scope/0 values defining the Permission record's recognized Scopes for its Maintenance Right. A value for this attribute must be set to a list containing at least one Scope; if the Maintenance Right is not used by the Permission then the value of this attribute should be set to [&quot;unused&quot;] . This attribute may only be updated for user defined Permission records. admin_scope_options - a list of MscmpSystPerms.Types.rights_scope/0 values defining the Permission record's recognized Scopes for its Administration Right. A value for this attribute must be set to a list containing at least one Scope; if the Administration Right is not used by the Permission then the value of this attribute should be set to [&quot;unused&quot;] . This attribute may only be updated for user defined Permission records. ops_scope_options - a list of MscmpSystPerms.Types.rights_scope/0 values defining the Permission record's recognized Scopes for its Operations Right. A value for this attribute must be set to a list containing at least one Scope; if the Operations Right is not used by the Permission then the value of this attribute should be set to [&quot;unused&quot;] . This attribute may only be updated for user defined Permission records.","ref":"MscmpSystPerms.Types.html#t:perm_params/0","title":"MscmpSystPerms.Types.perm_params/0","type":"type"},{"doc":"Establishes the type of the Permission Role Grant record.","ref":"MscmpSystPerms.Types.html#t:perm_role_grant_id/0","title":"MscmpSystPerms.Types.perm_role_grant_id/0","type":"type"},{"doc":"A map of attributes used in creating or updating Permission Role Grant records. Permission Role Grant records are considered either &quot;System Defined&quot; or &quot;User Defined&quot; based on their parent Msdata.SystPermRoles record's syst_defined value. The usage of some attributes described below will depend on that parent record definition. Attributes perm_role_id - a MscmpSystPerms.Types.perm_role_id/0 reference to this record's parent Permission Role. On user defined Permission Role Grant creation this is is a required value. This value may not be changed after record creation. perm_id - a MscmpSystPerms.Types.perm_id/0 reference to the Permission record for the Permission being granted by the Permission Role. On user defined Permission Role Grant creation this is is a required value. This value may not be changed after record creation time. Note that all Permissions being granted by the Permission Role Grant record must share the same Permission Functional Type as the Permission Role Grant's parent Permission Role record. view_scope - the t:MscmpSystPerms.Types.rights_scope value of the View Right being granted by the Permission Role Grant record. This value is required and must be one of the available Scopes defined by the Permission being granted. This value may not be changed if the Permission Role Grant record is considered system defined. maint_scope - the t:MscmpSystPerms.Types.rights_scope value of the Maintenance Right being granted by the Permission Role Grant record. This value is required and must be one of the available Scopes defined by the Permission being granted. This value may not be changed if the Permission Role Grant record is considered system defined. admin_scope - the t:MscmpSystPerms.Types.rights_scope value of the Administration Right being granted by the Permission Role Grant record. This value is required and must be one of the available Scopes defined by the Permission being granted. This value may not be changed if the Permission Role Grant record is considered system defined. ops_scope - the t:MscmpSystPerms.Types.rights_scope value of the Operations Right being granted by the Permission Role Grant record. This value is required and must be one of the available Scopes defined by the Permission being granted. This value may not be changed if the Permission Role Grant record is considered system defined.","ref":"MscmpSystPerms.Types.html#t:perm_role_grant_params/0","title":"MscmpSystPerms.Types.perm_role_grant_params/0","type":"type"},{"doc":"The data type of the record ID for the Permission Role record.","ref":"MscmpSystPerms.Types.html#t:perm_role_id/0","title":"MscmpSystPerms.Types.perm_role_id/0","type":"type"},{"doc":"The data type of the Permission Role record Internal Name value.","ref":"MscmpSystPerms.Types.html#t:perm_role_name/0","title":"MscmpSystPerms.Types.perm_role_name/0","type":"type"},{"doc":"A map of attributes describing Permission Role record values for use in record creation and update. Attributes internal_name - a record candidate key used to identify the record in programmatic contexts. The Internal Name value is a required data value and it must be unique in the system. User defined Permission Role records may change this value so long as the uniqueness requirement is met. System defined Permission Role records may not change this value. display_name - a record candidate key used to identify the record in user interface contexts. A non-nil, system unique value is required for the attribute. This value may be changed for both user defined and system defined Permission Role records so long as the uniqueness requirement is observed. perm_functional_type_id - a required value which establishes for which Permission Functional Type the Permission Role is being defined. Permission Roles will only be able to grant the Rights of Permissions of the same Permission Functional Type. This value may only be set at user defined Permission Role record creation time and may not be updated later. user_description - a custom, user defined description which overrides the system description, if any exists. This attribute is optional and may be set nil in which case the system description will be used. This value may updated for system defined Permission Role records.","ref":"MscmpSystPerms.Types.html#t:perm_role_params/0","title":"MscmpSystPerms.Types.perm_role_params/0","type":"type"},{"doc":"Defines the system recognized Scopes which can be assigned to Permission Rights options. Note that any given Permission may support all or only some of these Scopes. See the description of any specific Permission to understand which specific Scopes it supports. Scopes :deny - in some cases it is desirable to grant some Rights of a Permission, but not others. The :deny Scope supports not granting all rights of a Permission when other Rights are granted. :same_user - the Right of the Permission is granted to the user, but is limited to records for which they are designated as owner is some way. Precisely how this designation is determined will be specified by each function recognizing this Scope of Rights. :same_group - the Right of the Permission is granted to the user, but is limited to records for which they are designated belonging to a group or groups to which the user also has rights. Precisely how this determination made will depend on the implementation details of the functionality in question. :all - the Right of the Permission is granted to the user without any Scope dependent limitations. :unused - when a permission does not support one of the standard Rights, this value is assigned to the Right's options and any Permission Role Grant for that Right.","ref":"MscmpSystPerms.Types.html#t:rights_scope/0","title":"MscmpSystPerms.Types.rights_scope/0","type":"type"}]