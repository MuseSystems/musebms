searchData={"items":[{"type":"module","title":"MscmpSystNetwork","doc":"Simple IP address handling and convenience functionality.\n\nIP addresses in Erlang, and by extension Elixir, are expressed as tuples with an element reserved\nfor each segment of the IP address.  This works well enough, but departs from the standard CIDR\nnotation used by most professionals.  In fact, the Erlang/Elixir standard library for dealing with\nIP addresses only deals with addresses and sockets; excluded are representations or utilities for\ndealing with subnets.\n\nThis Component aims to make it simpler to work with IP addresses, allowing for CIDR notation\nparsing and for the ability to recognize subnets.\n\n> #### Naive IP Address Handling {: .warning}\n>\n> This library exists only to provide some ease in handling IP addresses in some\n> common manipulation scenarios.  However, it is a minimal implementation of the\n> most common kinds of operations and not a full-fledged and authoritative\n> implementation of IP addressing or networking standards.\n>\n> This library may allow the developer to present standards-breaking scenarios\n> to which to library will happily provide answer, albeit invalid. The handling\n> of special scenarios such as multicast, anycast, standards defined exclusions\n> or special uses, or similar simply doesn't exist.\n>\n> Therefore this library should not be relied upon as a source of IP networking\n> knowledge.","ref":"MscmpSystNetwork.html"},{"type":"module","title":"Prior Work - MscmpSystNetwork","doc":"The `MscmpSystNetwork` library was inspired by and is a re-working of Lambda, Inc.'s' and Isaac\nYonemoto's [`net_address`](https://github.com/ityonemo/net_address) Elixir library.  The Muse\nSystems  Business Management System originally used the `net_address` library, but the library\nappears to be infrequently maintained and so is being replaced by `MscmpSystNetwork` in the MuseBMS\nproject. `MscmpSystNetwork` does use some code from `net_address`.  `MscmpSystNetwork` offers\nsignificantly less functionality than `net_address` as much of that library's functionality is not\nneeded in the MuseBMS.\n\nThis library is also influenced by Bryan Weber's [`inet_cidr`](https://github.com/Cobenian/inet_cidr)\nElixir library, though to a much lesser extent than `net_address`.\n\nIn the end, much of the heavy lifting is done by the Erlang [`:inet`](https://www.erlang.org/doc/man/inet.html)\nlibrary.","ref":"MscmpSystNetwork.html#module-prior-work"},{"type":"function","title":"MscmpSystNetwork.get_host/1","doc":"Retrieves IP address from IP address structs or `nil` if the struct only\nrepresents a subnet/prefix.\n\nResults are returned in the form of an Erlang `t::inet.ip_address/0` tuple or\n`nil` when the address passed to the function doesn't represent a host\naddress.","ref":"MscmpSystNetwork.html#get_host/1"},{"type":"function","title":"Parameters - MscmpSystNetwork.get_host/1","doc":"* `addr_struct` - Either a valid `t:MscmpSystNetwork.Types.IpV4.t/0` or\n  `t:MscmpSystNetwork.Types.IpV6.t/0` struct from which a host IP address is\n  to be extracted.","ref":"MscmpSystNetwork.html#get_host/1-parameters"},{"type":"function","title":"Examples - MscmpSystNetwork.get_host/1","doc":"IPv4 Examples\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.get_host(~i\"192.168.20.125/24\")\n    {192, 168, 20, 125}\n    iex> MscmpSystNetwork.get_host(~i\"10.0.0.0/8\")\n    nil\n\n  IPv4 Examples\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.get_host(~i\"fd9b:77f8:714d:cabb:0000:0000:ab67:12/64\")\n    {64923, 30712, 29005, 51899, 0, 0, 43879, 18}\n    iex> MscmpSystNetwork.get_host(~i\"fd9b:77f8:714d:cabb::/64\")\n    nil","ref":"MscmpSystNetwork.html#get_host/1-examples"},{"type":"function","title":"MscmpSystNetwork.get_netmask/1","doc":"Retrieves the network masking bits (IPv4 subnet mask or IPv6 prefix).\n\nResults are returned in the form of an Erlang `t::inet.ip_address/0` tuple.","ref":"MscmpSystNetwork.html#get_netmask/1"},{"type":"function","title":"Parameters - MscmpSystNetwork.get_netmask/1","doc":"* `addr_struct` - Either a valid `t:MscmpSystNetwork.Types.IpV4.t/0` or\n  `t:MscmpSystNetwork.Types.IpV6.t/0` struct from which a network mask\n  should be extracted.","ref":"MscmpSystNetwork.html#get_netmask/1-parameters"},{"type":"function","title":"Examples - MscmpSystNetwork.get_netmask/1","doc":"IPv4 Examples\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.get_netmask(~i\"192.168.20.125/24\")\n    {255, 255, 255, 0}\n    iex> MscmpSystNetwork.get_netmask(~i\"10.1.1.12/32\")\n    {255, 255, 255, 255}\n\n  IPv4 Examples\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.get_netmask(~i\"fd9b:77f8:714d:cabb:0000:0000:ab67:12/64\")\n    {65535, 65535, 65535, 65535, 0, 0, 0, 0}\n    iex> MscmpSystNetwork.get_netmask(~i\"fd9b:77f8:714d:cabb::20/128\")\n    {65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535}","ref":"MscmpSystNetwork.html#get_netmask/1-examples"},{"type":"function","title":"MscmpSystNetwork.get_network/1","doc":"Retrieves the network identifying portion of an IP address.\n\nResults are returned in the form of an Erlang `t::inet.ip_address/0` tuple or\n`nil` when the address passed to the function represents a single host.","ref":"MscmpSystNetwork.html#get_network/1"},{"type":"function","title":"Parameters - MscmpSystNetwork.get_network/1","doc":"* `addr_struct` - Either a valid `t:MscmpSystNetwork.Types.IpV4.t/0` or\n  `t:MscmpSystNetwork.Types.IpV6.t/0` struct from which a network address\n  should extracted.","ref":"MscmpSystNetwork.html#get_network/1-parameters"},{"type":"function","title":"Examples - MscmpSystNetwork.get_network/1","doc":"IPv4 Examples\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.get_network(~i\"192.168.20.125/24\")\n    {192, 168, 20, 0}\n    iex> MscmpSystNetwork.get_network(~i\"10.1.1.12/32\")\n    nil\n\n  IPv4 Examples\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.get_network(~i\"fd9b:77f8:714d:cabb:0000:0000:ab67:12/64\")\n    {64923, 30712, 29005, 51899, 0, 0, 0, 0}\n    iex> MscmpSystNetwork.get_network(~i\"fd9b:77f8:714d:cabb::20/128\")\n    nil","ref":"MscmpSystNetwork.html#get_network/1-examples"},{"type":"function","title":"MscmpSystNetwork.host?/1","doc":"Evaluates an IP address struct to see if it represents a specific host or not.\n\nIf the function finds that an identifiable host is represented by the struct,\nthe function returns true.  Otherwise false.\n\nIPv4 broadcast addresses will also return false.\n\n> #### Other Non-address IPs {: .warning}\n>\n> Multicast addresses are currently not detected as will be treated as regular\n> IP addresses.  Therefore this function will return true for multicast\n> addresses where it should return false.\n>\n> Other examples of this sort of issue may exist for other, similar special\n> cases.  You should not assume that the IP address business logic in this\n> Component is authoritative or complete.  Test any special cases specifically\n> for compliance with the area in which you are working.","ref":"MscmpSystNetwork.html#host?/1"},{"type":"function","title":"Parameters - MscmpSystNetwork.host?/1","doc":"* `addr_struct` - Either a valid `t:MscmpSystNetwork.Types.IpV4.t/0` or\n  `t:MscmpSystNetwork.Types.IpV6.t/0` struct to test for representing a\n  specific host.","ref":"MscmpSystNetwork.html#host?/1-parameters"},{"type":"function","title":"Examples - MscmpSystNetwork.host?/1","doc":"IPv4 Examples\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.host?(~i\"192.168.20.125/24\")\n    true\n    iex> MscmpSystNetwork.host?(~i\"10.0.0.0/8\")\n    false\n\n  IPv4 Examples\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.host?(~i\"fd9b:77f8:714d:cabb:0000:0000:ab67:12/64\")\n    true\n    iex> MscmpSystNetwork.host?(~i\"fd9b:77f8:714d:cabb::/64\")\n    false","ref":"MscmpSystNetwork.html#host?/1-examples"},{"type":"function","title":"MscmpSystNetwork.in_network?/2","doc":"Tests to see if an IP host or subnet is contained by a specific subnet.\n\nTrue is returned when the test address is contained by the given network,\notherwise false is returned.  Any error raises an exception.","ref":"MscmpSystNetwork.html#in_network?/2"},{"type":"function","title":"Parameters - MscmpSystNetwork.in_network?/2","doc":"* `test_addr` - any valid IP address struct.  This struct can represent an\n  individual host or a subnet.\n\n  * `network_addr` - a valid IP address struct which only represents a\n  network.  Host addresses from which a network can be extracted such as\n  `10.1.1.113/24` will still cause an exception to be raised; only network\n  only addresses such as `10.1.1.0/24` are accepted.  See\n  `MscmpSystNetwork.get_network/1` for extracting a network address from a\n  host address with an identifiable network.","ref":"MscmpSystNetwork.html#in_network?/2-parameters"},{"type":"function","title":"Examples - MscmpSystNetwork.in_network?/2","doc":"IPv4 Examples\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.in_network?(~i\"10.1.1.10\", ~i\"10.1.0.0/16\")\n    true\n    iex> MscmpSystNetwork.in_network?(~i\"10.1.1.0/24\", ~i\"10.1.0.0/16\")\n    true\n    iex> MscmpSystNetwork.in_network?(~i\"10.1.1.0/24\", ~i\"10.1.1.0/24\")\n    true\n    iex> MscmpSystNetwork.in_network?(~i\"10.2.1.1/32\", ~i\"10.1.0.0/16\")\n    false\n\n  IPv6 Examples\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.in_network?(\n    ...>   ~i\"fd9b:77f8:714d:cabb::20/128\", ~i\"fd9b:77f8:714d:cabb::/64\")\n    true\n    iex> MscmpSystNetwork.in_network?(\n    ...>   ~i\"fd9b:77f8:714d:cabb:ab67::/68\", ~i\"fd9b:77f8:714d:cabb::/64\")\n    true\n    iex> MscmpSystNetwork.in_network?(\n    ...>   ~i\"fd9b:77f8:714d:cabb::/64\", ~i\"fd9b:77f8:714d:cabb::/64\")\n    true\n    iex> MscmpSystNetwork.in_network?(\n    ...>   ~i\"fd9b:77f8:714d:caab::20/128\", ~i\"fd9b:77f8:714d:cabb::/64\")\n    false","ref":"MscmpSystNetwork.html#in_network?/2-examples"},{"type":"function","title":"MscmpSystNetwork.in_range?/3","doc":"Tests if an IP address host or subnet is contained by the given range.\n\nTrue is returned when the IP address is contained, otherwise false.  Errors\nraise exceptions.","ref":"MscmpSystNetwork.html#in_range?/3"},{"type":"function","title":"Parameters - MscmpSystNetwork.in_range?/3","doc":"* `test_addr` - a valid IP address struct which must be fully contained by\n  the low and high IP addresses to obtain  a true result.\n\n  * `low_addr` - The low address of the range.  If the `low_addr` value is a\n  struct identifying a host, but from which a network could be extracted, it\n  is treated as a host only.  If the struct represents only a network or\n  subnet, the network IP address itself is treated as the lowest IP address\n  in the range; for example `10.1.0.0/16` will treat `10.1.0.0` as the lowest\n  IP address in the range.\n\n  * `high_addr` - the high address of the range.  If the `high_addr` value is\n  a struct identifying a host, but from which a network could be extracted, it\n  is treated as a host only.  If the struct represents only a network or\n  subnet, the network's largest possible IP address is considered the high\n  address of the range; for example `10.1.0.0/16` would consider\n  `10.1.255.255` as the highest address in the range.\n\nThe range boundaries are considered inclusive at both extremes.","ref":"MscmpSystNetwork.html#in_range?/3-parameters"},{"type":"function","title":"Examples - MscmpSystNetwork.in_range?/3","doc":"IPv4 Examples\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.in_range?(~i\"10.1.1.10\", ~i\"10.1.1.1\", ~i\"10.1.1.15\")\n    true\n    iex> MscmpSystNetwork.in_range?(~i\"10.1.1.0/24\", ~i\"10.1.0.0/16\", ~i\"10.1.2.254\")\n    true\n    iex> MscmpSystNetwork.in_range?(~i\"10.1.1.0/24\", ~i\"10.1.1.0/24\", ~i\"10.1.1.0/24\")\n    true\n    iex> MscmpSystNetwork.in_range?(~i\"10.3.1.1/32\", ~i\"10.1.0.0/16\", ~i\"10.2.0.0/16\")\n    false\n\n  IPv6 Examples\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.in_range?(\n    ...>   ~i\"fd9b:77f8:714d:cabb::20\",\n    ...>   ~i\"fd9b:77f8:714d:cabb::10\",\n    ...>   ~i\"fd9b:77f8:714d:cabb::30\")\n    true\n    iex> MscmpSystNetwork.in_range?(\n    ...>   ~i\"fd9b:77f8:714d:cabb:ab67::/68\",\n    ...>   ~i\"fd9b:77f8:714d:cabb::/64\",\n    ...>   ~i\"fd9b:77f8:714d:cabd::\")\n    true\n    iex> MscmpSystNetwork.in_range?(\n    ...>   ~i\"fd9b:77f8:714d:cabb::/64\",\n    ...>   ~i\"fd9b:77f8:714d:cabb::/64\",\n    ...>   ~i\"fd9b:77f8:714d:cabb::/64\")\n    true\n    iex> MscmpSystNetwork.in_range?(\n    ...>   ~i\"fd9b:77f8:714e:caab::20/128\",\n    ...>   ~i\"fd9b:77f8:714d:caba::/64\",\n    ...>   ~i\"fd9b:77f8:714d:cabc::/64\")\n    false","ref":"MscmpSystNetwork.html#in_range?/3-examples"},{"type":"function","title":"MscmpSystNetwork.network?/1","doc":"Evaluates an IP address struct to see if it represents an entire network or\nsubnet rather than a host.\n\nThis function only returns true when the supplied IP address represents only a\nnetwork or subnet.  False is returned when the provided IP address struct\nalso contains an identifiable host or is only a host.  False is even returned\nin cases where the CIDR notation would allow a network to be extracted from\nthe provided IP address struct.\n\n> #### Other Non-address IPs {: .warning}\n>\n> Multicast addresses are currently not detected as will be treated as regular\n> IP addresses.  Therefore this function will return true for multicast\n> addresses where it should return false.\n>\n> You should not assume that the IP address business logic in this Component\n> is authoritative or complete.  Test any special cases specifically for\n> compliance with the area in which you are working.","ref":"MscmpSystNetwork.html#network?/1"},{"type":"function","title":"Parameters - MscmpSystNetwork.network?/1","doc":"* `addr_struct` - Either a valid `t:MscmpSystNetwork.Types.IpV4.t/0` or\n  `t:MscmpSystNetwork.Types.IpV6.t/0` struct which to test as identifying a\n  network exclusively.","ref":"MscmpSystNetwork.html#network?/1-parameters"},{"type":"function","title":"Examples - MscmpSystNetwork.network?/1","doc":"IPv4 Examples\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.network?(~i\"192.168.20.125/24\")\n    false\n    iex> MscmpSystNetwork.network?(~i\"10.0.0.0/8\")\n    true\n\n  IPv4 Examples\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.network?(~i\"fd9b:77f8:714d:cabb:0000:0000:ab67:12/64\")\n    false\n    iex> MscmpSystNetwork.network?(~i\"fd9b:77f8:714d:cabb::/64\")\n    true","ref":"MscmpSystNetwork.html#network?/1-examples"},{"type":"function","title":"MscmpSystNetwork.parse/1","doc":"Parses common IP address and subnet text expressions from a string.\n\nFor simple IP addresses, the expected format of the string parameter is the\ncommon format for such addresses.  For IPv4 addresses, this would be\n\"dotted-decimal\" form.  For IPv6 addresses, the expected\nstring uses a textual representation of the address that complies with\n[RFC 5952](https://www.rfc-editor.org/rfc/rfc5952.html).\n\nFor subnet addresses the expected format in the CIDR addressing style\nappropriate for either IPv4 or IPv6 .\n\nIndividual host addresses may also be expressed in CIDR notation.  IPv4 host\naddresses should use the standard \"/32\" designation for mask bits and IPv6\nhosts in CIDR notation should use a prefix of \"/128\".  These are the\ntraditional or standard expressions for hosts when CIDR notation is used in\nthis way.  Note that even when the simple addressing format is used structs\nwill have a `:mask` value of 32 for IPv4 or 128 for IPv6.\n\nOn a successful parse, an `:ok` tuple is returning including either an\n`t:MscmpSystNetwork.Types.IpV4.t/0` or `t:MscmpSystNetwork.Types.IpV6.t/0`\nvalue.  If the parse fails,","ref":"MscmpSystNetwork.html#parse/1"},{"type":"function","title":"Parameters - MscmpSystNetwork.parse/1","doc":"* `addr_string` - Either a simple IP host address or an IP address or IP\n  subnet in CIDR notation.  Passed as a string.","ref":"MscmpSystNetwork.html#parse/1-parameters"},{"type":"function","title":"Examples - MscmpSystNetwork.parse/1","doc":"IPv4 addresses\n\n    iex> MscmpSystNetwork.parse(\"192.168.10.10\")\n    {:ok, %MscmpSystNetwork.Types.IpV4{address: {192, 168, 10, 10}, mask: 32}}\n\n    iex> MscmpSystNetwork.parse(\"10.1.1.10/32\")\n    {:ok, %MscmpSystNetwork.Types.IpV4{address: {10, 1, 1, 10}, mask: 32}}\n\n    iex> MscmpSystNetwork.parse(\"10.1.1.11/8\")\n    {:ok, %MscmpSystNetwork.Types.IpV4{address: {10, 1, 1, 11}, mask: 8}}\n\n    iex> MscmpSystNetwork.parse(\"172.16.0.0/16\")\n    {:ok, %MscmpSystNetwork.Types.IpV4{address: {172, 16, 0, 0}, mask: 16}}\n\n  IPv4 Error Example\n\n    iex> MscmpSystNetwork.parse(\"192.618.10.14/32\")\n    {\n      :error,\n      %Mserror.NetworkError{\n        kind: :parse,\n        message: \"Error encountered parsing string as IP address.\",\n        cause: {:error, :einval},\n        context: %MscmpSystError.Types.Context{\n          origin: {MscmpSystNetwork, :parse, 1},\n          parameters: %{addr_string: \"192.618.10.14/32\"},\n          supporting_data: nil\n        }\n      }\n    }\n\n  IPv6 addresses\n\n    iex> MscmpSystNetwork.parse(\"fd9b:77f8:714d:cabb::1\")\n    {\n      :ok,\n      %MscmpSystNetwork.Types.IpV6{\n        address: {64923, 30712, 29005, 51899, 0, 0, 0, 1},\n        mask: 128\n      }\n    }\n\n    iex> MscmpSystNetwork.parse(\"fd9b:77f8:714d:cabb::20/128\")\n    {\n      :ok,\n      %MscmpSystNetwork.Types.IpV6{\n        address: {64923, 30712, 29005, 51899, 0, 0, 0, 32},\n        mask: 128\n      }\n    }\n\n    iex> MscmpSystNetwork.parse(\"fd9b:77f8:714d:cabb:0000:0000:ab67:12/64\")\n    {\n      :ok,\n      %MscmpSystNetwork.Types.IpV6{\n        address: {64923, 30712, 29005, 51899, 0, 0, 43879, 18},\n        mask: 64\n      }\n    }\n\n    iex> MscmpSystNetwork.parse(\"fd9b:77f8:714d:cabb::/64\")\n    {\n      :ok,\n      %MscmpSystNetwork.Types.IpV6{\n        address: {64923, 30712, 29005, 51899, 0, 0, 0, 0},\n        mask: 64\n      }\n    }\n\n  IPv6 Error Example\n\n    iex> MscmpSystNetwork.parse(\"fd9b:77f8:714d:qqqq::z\")\n    {\n      :error,\n      %Mserror.NetworkError{\n        kind: :parse,\n        message: \"Error encountered parsing string as IP address.\",\n        cause: {:error, :einval},\n        context: %MscmpSystError.Types.Context{\n          origin: {MscmpSystNetwork, :parse, 1},\n          parameters: %{addr_string: \"fd9b:77f8:714d:qqqq::z\"},\n          supporting_data: nil\n        }\n      }\n    }","ref":"MscmpSystNetwork.html#parse/1-examples"},{"type":"function","title":"MscmpSystNetwork.parse!/1","doc":"Parses common IP address and subnet text expressions from a string, raising\nan exception when there are errors.\n\nOutside of the possibility of raising an exception, this function works the\nsame as `parse/1` in all other ways.","ref":"MscmpSystNetwork.html#parse!/1"},{"type":"function","title":"Parameters - MscmpSystNetwork.parse!/1","doc":"* `addr_string` - Either a simple IP host address or an IP address or IP\n  subnet in CIDR notation.  Passed as a string.","ref":"MscmpSystNetwork.html#parse!/1-parameters"},{"type":"function","title":"Examples - MscmpSystNetwork.parse!/1","doc":"IPv4 addresses\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.parse!(\"192.168.10.10\")\n    %MscmpSystNetwork.Types.IpV4{address: {192, 168, 10, 10}, mask: 32}\n    iex> MscmpSystNetwork.parse!(\"10.1.1.11/8\")\n    %MscmpSystNetwork.Types.IpV4{address: {10, 1, 1, 11}, mask: 8}\n\n  IPv4 Error Example\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.parse!(\"192.618.10.14/32\")\n    ** (Mserror.NetworkError) Error encountered parsing string as IP address.\n\n  IPv6 addresses\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.parse!(\"fd9b:77f8:714d:cabb::1\")\n    %MscmpSystNetwork.Types.IpV6{address: {64923, 30712, 29005, 51899, 0, 0, 0, 1}, mask: 128}\n    iex> MscmpSystNetwork.parse!(\"fd9b:77f8:714d:cabb:0000:0000:ab67:12/64\")\n    %MscmpSystNetwork.Types.IpV6{address: {64923, 30712, 29005, 51899, 0, 0, 43879, 18}, mask: 64}\n\n  IPv6 Error Example\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> MscmpSystNetwork.parse!(\"fd9b:77f8:714d:qqqq::z\")\n    ** (Mserror.NetworkError) Error encountered parsing string as IP address.","ref":"MscmpSystNetwork.html#parse!/1-examples"},{"type":"function","title":"MscmpSystNetwork.sigil_i/2","doc":"Handles the ~i sigil for IP addresses.\n\nCurrently there are no modifiers accepted by this sigil.  The sigil is simply\na convenience which calls `parse!/1`.\n\nReturns either a `t:MscmpSystNetwork.Types.IpV4.t/0` or\n`t:MscmpSystNetwork.Types.IpV6.t/0` struct.","ref":"MscmpSystNetwork.html#sigil_i/2"},{"type":"function","title":"Parameters - MscmpSystNetwork.sigil_i/2","doc":"* `addr_string` - Either a simple IP host address or an IP address or IP\n  subnet in CIDR notation.  Passed as a string.\n\n  * `modifiers` - Currently there are no modifiers which are to be used with\n  the sigil.  This parameter is currently ignored.","ref":"MscmpSystNetwork.html#sigil_i/2-parameters"},{"type":"function","title":"Examples - MscmpSystNetwork.sigil_i/2","doc":"IPv4 Addresses\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> ~i\"192.168.10.10\"\n    %MscmpSystNetwork.Types.IpV4{address: {192, 168, 10, 10}, mask: 32}\n    iex> ~i\"10.1.1.11/8\"\n    %MscmpSystNetwork.Types.IpV4{address: {10, 1, 1, 11}, mask: 8}\n\n  IPv4 Error Example\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> ~i\"192.618.10.14/32\"\n    ** (Mserror.NetworkError) Error encountered parsing string as IP address.\n\n  IPv6 Addresses\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> ~i\"fd9b:77f8:714d:cabb::1\"\n    %MscmpSystNetwork.Types.IpV6{address: {64923, 30712, 29005, 51899, 0, 0, 0, 1}, mask: 128}\n    iex> ~i\"fd9b:77f8:714d:cabb:0000:0000:ab67:12/64\"\n    %MscmpSystNetwork.Types.IpV6{address: {64923, 30712, 29005, 51899, 0, 0, 43879, 18}, mask: 64}\n\n  IPv6 Error Example\n\n    iex> import MscmpSystNetwork, only: [sigil_i: 2]\n    iex> ~i\"fd9b:77f8:714d:qqqq::z\"\n    ** (Mserror.NetworkError) Error encountered parsing string as IP address.","ref":"MscmpSystNetwork.html#sigil_i/2-examples"},{"type":"function","title":"MscmpSystNetwork.to_string/1","doc":"Converts an IP address struct implementing the `MscmpSystNetwork.Protocol` to\nits common string representation using CIDR notation.","ref":"MscmpSystNetwork.html#to_string/1"},{"type":"function","title":"Parameters - MscmpSystNetwork.to_string/1","doc":"* `addr_struct` - Either a valid `t:MscmpSystNetwork.Types.IpV4.t/0` or\n  `t:MscmpSystNetwork.Types.IpV6.t/0` struct which is to be converted to a\n  string.","ref":"MscmpSystNetwork.html#to_string/1-parameters"},{"type":"function","title":"Examples - MscmpSystNetwork.to_string/1","doc":"IPv4 Addresses\n\n    iex> my_host = %MscmpSystNetwork.Types.IpV4{address: {192, 168, 10, 10}, mask: 32}\n    iex> MscmpSystNetwork.to_string(my_host)\n    \"192.168.10.10/32\"\n    iex> my_subnet = %MscmpSystNetwork.Types.IpV4{address: {172, 16, 0, 0}, mask: 16}\n    iex> MscmpSystNetwork.to_string(my_subnet)\n    \"172.16.0.0/16\"\n\n  IPv6 Addresses\n\n    iex> my_host =\n    ...>   %MscmpSystNetwork.Types.IpV6{\n    ...>     address: {64923, 30712, 29005, 51899, 0, 0, 0, 1},\n    ...>     mask: 128\n    ...>   }\n    iex> MscmpSystNetwork.to_string(my_host)\n    \"fd9b:77f8:714d:cabb::1/128\"\n    iex> my_subnet =\n    ...>   %MscmpSystNetwork.Types.IpV6{\n    ...>     address: {64923, 30712, 29005, 51899, 0, 0, 43879, 18},\n    ...>     mask: 64\n    ...>   }\n    iex> MscmpSystNetwork.to_string(my_subnet)\n    \"fd9b:77f8:714d:cabb::ab67:12/64\"","ref":"MscmpSystNetwork.html#to_string/1-examples"},{"type":"function","title":"MscmpSystNetwork.to_struct/2","doc":"Turns an Erlang `t::inet.ip_address/0` tuple into either a\n`t:MscmpSystNetwork.Types.IpV4.t/0` or `t:MscmpSystNetwork.Types.IpV6.t/0`\nstruct.","ref":"MscmpSystNetwork.html#to_struct/2"},{"type":"function","title":"Parameters - MscmpSystNetwork.to_struct/2","doc":"* `addr` - a tuple representing either the IPv4 or IPv6 address to be used\n  in constructing the new struct.\n\n  * `mask` - represents either the bit length of the IPv4 subnet mask or the\n  IPv6 prefix.  This parameter is optional and if not provided or is nil will\n  default to the single host value as appropriate for the `addr` type.","ref":"MscmpSystNetwork.html#to_struct/2-parameters"},{"type":"function","title":"Returns - MscmpSystNetwork.to_struct/2","doc":"* `{:ok, addr_struct}` - A valid `t:MscmpSystNetwork.Types.IpV4.t/0` or\n  `t:MscmpSystNetwork.Types.IpV6.t/0` struct.\n\n  * `{:error, reason}` - An error tuple containing a `t:Mserror.NetworkError.t/0`\n    describing the reason for the failure.","ref":"MscmpSystNetwork.html#to_struct/2-returns"},{"type":"function","title":"Examples - MscmpSystNetwork.to_struct/2","doc":"IPv4 Examples\n\n    iex> MscmpSystNetwork.to_struct({10, 1, 1, 15})\n    {\n      :ok,\n      %MscmpSystNetwork.Types.IpV4{address: {10, 1, 1, 15}, mask: 32}\n    }\n\n    iex> MscmpSystNetwork.to_struct({10, 1, 0, 0}, 16)\n    {\n      :ok,\n      %MscmpSystNetwork.Types.IpV4{address: {10, 1, 0, 0}, mask: 16}\n    }\n\n    iex> MscmpSystNetwork.to_struct({10, 1, 1, 10}, 33)\n    {\n      :error,\n      %Mserror.NetworkError{\n        kind: :parse,\n        message: \"Error encountered parsing IP address to struct.\",\n        cause: {:error, :invalid_address_or_mask},\n        context: %MscmpSystError.Types.Context{\n          origin: {MscmpSystNetwork, :to_struct, 2},\n          parameters: %{addr: {10, 1, 1, 10}, mask: 33},\n          supporting_data: nil\n        }\n      }\n    }\n\n  IPv6 Examples\n\n    iex> MscmpSystNetwork.to_struct({64923, 30712, 29005, 51899, 0, 0, 0, 1})\n    {\n      :ok,\n      %MscmpSystNetwork.Types.IpV6{address: {64923, 30712, 29005, 51899, 0, 0, 0, 1}, mask: 128}\n    }\n\n    iex> MscmpSystNetwork.to_struct({64923, 30712, 29005, 51899, 0, 0, 0, 0}, 64)\n    {\n      :ok,\n      %MscmpSystNetwork.Types.IpV6{address: {64923, 30712, 29005, 51899, 0, 0, 0, 0}, mask: 64}\n    }\n\n    iex> MscmpSystNetwork.to_struct({64923, 30712, 29005, 51899, 0, 0, 0, 1}, 129)\n    {\n      :error,\n      %Mserror.NetworkError{\n        kind: :parse,\n        message: \"Error encountered parsing IP address to struct.\",\n        cause: {:error, :invalid_address_or_mask},\n        context: %MscmpSystError.Types.Context{\n          origin: {MscmpSystNetwork, :to_struct, 2},\n          parameters: %{addr: {64923, 30712, 29005, 51899, 0, 0, 0, 1}, mask: 129},\n          supporting_data: nil\n        }\n      }\n    }","ref":"MscmpSystNetwork.html#to_struct/2-examples"},{"type":"function","title":"MscmpSystNetwork.to_struct!/2","doc":"Converts IP address tuples to structs, raising an exception when there are\nerrors.\n\nThis function works the same as `to_struct/2`, but raises an exception instead\nof returning an error tuple.","ref":"MscmpSystNetwork.html#to_struct!/2"},{"type":"function","title":"Parameters - MscmpSystNetwork.to_struct!/2","doc":"* `addr` - An IP address tuple (either an IPv4 or IPv6 in Erlang's tuple\n    based format).\n\n  * `mask` - An optional subnet mask. If not provided, it defaults to 32 for\n    IPv4 and 128 for IPv6 (host address representation).","ref":"MscmpSystNetwork.html#to_struct!/2-parameters"},{"type":"function","title":"Examples - MscmpSystNetwork.to_struct!/2","doc":"IPv4 Examples\n\n    iex> MscmpSystNetwork.to_struct!({192, 168, 10, 10})\n    %MscmpSystNetwork.Types.IpV4{address: {192, 168, 10, 10}, mask: 32}\n\n    iex> MscmpSystNetwork.to_struct!({172, 16, 0, 0}, 16)\n    %MscmpSystNetwork.Types.IpV4{address: {172, 16, 0, 0}, mask: 16}\n\n  IPv6 Examples\n\n    iex> MscmpSystNetwork.to_struct!({64923, 30712, 29005, 51899, 0, 0, 0, 1})\n    %MscmpSystNetwork.Types.IpV6{address: {64923, 30712, 29005, 51899, 0, 0, 0, 1}, mask: 128}\n\n    iex> MscmpSystNetwork.to_struct!({64923, 30712, 29005, 51899, 0, 0, 0, 0}, 64)\n    %MscmpSystNetwork.Types.IpV6{address: {64923, 30712, 29005, 51899, 0, 0, 0, 0}, mask: 64}\n\n  Error Example\n\n    iex> MscmpSystNetwork.to_struct!({64923, 30712, 29005, 51899, 0, 0, 0, 1}, 129)\n    ** (Mserror.NetworkError) Error encountered parsing IP address to struct.","ref":"MscmpSystNetwork.html#to_struct!/2-examples"},{"type":"module","title":"MscmpSystNetwork.Guards","doc":"Provides guards which can do basic IP address tuple and IP address struct\nvalidation.","ref":"MscmpSystNetwork.Guards.html"},{"type":"macro","title":"MscmpSystNetwork.Guards.is_ip/1","doc":"A guard function which returns true when the passed value is either a valid\n`t:MscmpSystNetwork.Types.IpV4.t/0` or `t:MscmpSystNetwork.Types.IpV6.t/0`\nstruct.","ref":"MscmpSystNetwork.Guards.html#is_ip/1"},{"type":"macro","title":"Examples - MscmpSystNetwork.Guards.is_ip/1","doc":"IPv4 Examples\n\n    iex> import MscmpSystNetwork.Guards\n    iex> alias MscmpSystNetwork.Types.IpV4\n    iex> host_addr = %IpV4{address: {10, 1, 1, 10}, mask: 32}\n    iex> is_ip(host_addr)\n    true\n    iex> subnet_addr = %IpV4{address: {10, 1, 0, 0}, mask: 16}\n    iex> is_ip(subnet_addr)\n    true\n    iex> bad_addr = {10, 1, 1, 10}\n    iex> is_ip(bad_addr)\n    false\n\n  IPv6 Examples\n\n    iex> import MscmpSystNetwork.Guards\n    iex> alias MscmpSystNetwork.Types.IpV6\n    iex> host_addr = %IpV6{address: {64923, 30712, 29005, 51899, 0, 0, 0, 32}, mask: 128}\n    iex> is_ip(host_addr)\n    true\n    iex> subnet_addr =\n    ...>   %IpV6{\n    ...>     address: {64923, 30712, 29005, 51899, 0, 0, 0, 0},\n    ...>     mask: 64\n    ...>   }\n    iex> is_ip(subnet_addr)\n    true\n    iex> bad_addr = {64923, 30712, 29005, 51899, 0, 0, 0, 32}\n    iex> is_ip(bad_addr)\n    false","ref":"MscmpSystNetwork.Guards.html#is_ip/1-examples"},{"type":"macro","title":"MscmpSystNetwork.Guards.is_ip_tuple/1","doc":"A guard function which returns true when a passed value is either an Erlang\nstyle IPv4 or IPv6 tuple.","ref":"MscmpSystNetwork.Guards.html#is_ip_tuple/1"},{"type":"macro","title":"Examples - MscmpSystNetwork.Guards.is_ip_tuple/1","doc":"IPv4 Examples\n\n    iex> import MscmpSystNetwork.Guards\n    iex> is_ip_tuple({10, 1, 1, 20})\n    true\n    iex> is_ip_tuple({10, 1, 1, 0})\n    true\n    iex> is_ip_tuple(:foo)\n    false\n\n  IPv6 Examples\n\n    iex> import MscmpSystNetwork.Guards\n    iex> is_ip_tuple({64923, 30712, 29005, 51899, 0, 0, 0, 32})\n    true\n    iex> is_ip_tuple({64923, 30712, 29005, 51899, 0, 0, 0, 0})\n    true\n    iex> is_ip_tuple({0x10000, 0, 0, 0, 0, 0, 0, 1})\n    false","ref":"MscmpSystNetwork.Guards.html#is_ip_tuple/1-examples"},{"type":"macro","title":"MscmpSystNetwork.Guards.is_ipv4/1","doc":"A guard function which returns true when the passed value is a valid\n`t:MscmpSystNetwork.Types.IpV4.t/0` value.","ref":"MscmpSystNetwork.Guards.html#is_ipv4/1"},{"type":"macro","title":"Examples - MscmpSystNetwork.Guards.is_ipv4/1","doc":"iex> import MscmpSystNetwork.Guards\n    iex> alias MscmpSystNetwork.Types.IpV4\n    iex> host_addr = %IpV4{address: {10, 1, 1, 10}, mask: 32}\n    iex> is_ipv4(host_addr)\n    true\n    iex> subnet_addr = %IpV4{address: {10, 1, 0, 0}, mask: 16}\n    iex> is_ipv4(subnet_addr)\n    true\n    iex> bad_addr = {10, 1, 1, 10}\n    iex> is_ipv4(bad_addr)\n    false","ref":"MscmpSystNetwork.Guards.html#is_ipv4/1-examples"},{"type":"macro","title":"MscmpSystNetwork.Guards.is_ipv4_mask/1","doc":"A guard function which returns true when the passed value is an integer which\nis a valid IPv4 subnet mask length.","ref":"MscmpSystNetwork.Guards.html#is_ipv4_mask/1"},{"type":"macro","title":"Examples - MscmpSystNetwork.Guards.is_ipv4_mask/1","doc":"iex> import MscmpSystNetwork.Guards\n    iex> is_ipv4_mask(24)\n    true\n    iex> is_ipv4_mask(32)\n    true\n    iex> is_ipv4_mask(64)\n    false\n    iex> is_ipv4_mask(:\"24\")\n    false","ref":"MscmpSystNetwork.Guards.html#is_ipv4_mask/1-examples"},{"type":"macro","title":"MscmpSystNetwork.Guards.is_ipv4_tuple/1","doc":"A guard function which indicates whether a passed value is an Erlang style\nIPv4 tuple.","ref":"MscmpSystNetwork.Guards.html#is_ipv4_tuple/1"},{"type":"macro","title":"Examples - MscmpSystNetwork.Guards.is_ipv4_tuple/1","doc":"iex> import MscmpSystNetwork.Guards\n    iex> is_ipv4_tuple({10, 0, 0, 1})\n    true\n    iex> is_ipv4_tuple(:foo)\n    false\n    iex> is_ipv4_tuple({256, 0, 0, 0})\n    false","ref":"MscmpSystNetwork.Guards.html#is_ipv4_tuple/1-examples"},{"type":"macro","title":"MscmpSystNetwork.Guards.is_ipv6/1","doc":"A guard function which returns true when the passed value is a valid\n`t:MscmpSystNetwork.Types.IpV6.t/0` value.","ref":"MscmpSystNetwork.Guards.html#is_ipv6/1"},{"type":"macro","title":"Examples - MscmpSystNetwork.Guards.is_ipv6/1","doc":"iex> import MscmpSystNetwork.Guards\n    iex> alias MscmpSystNetwork.Types.IpV6\n    iex> host_addr = %IpV6{address: {64923, 30712, 29005, 51899, 0, 0, 0, 32}, mask: 128}\n    iex> is_ipv6(host_addr)\n    true\n    iex> subnet_addr =\n    ...>   %IpV6{\n    ...>     address: {64923, 30712, 29005, 51899, 0, 0, 0, 0},\n    ...>     mask: 64\n    ...>   }\n    iex> is_ipv6(subnet_addr)\n    true\n    iex> bad_addr = {64923, 30712, 29005, 51899, 0, 0, 0, 32}\n    iex> is_ipv6(bad_addr)\n    false","ref":"MscmpSystNetwork.Guards.html#is_ipv6/1-examples"},{"type":"macro","title":"MscmpSystNetwork.Guards.is_ipv6_mask/1","doc":"A guard function which returns true when the passed value is an integer which\nis a valid IPv6 subnet mask length.","ref":"MscmpSystNetwork.Guards.html#is_ipv6_mask/1"},{"type":"macro","title":"Examples - MscmpSystNetwork.Guards.is_ipv6_mask/1","doc":"iex> import MscmpSystNetwork.Guards\n    iex> is_ipv6_mask(64)\n    true\n    iex> is_ipv6_mask(128)\n    true\n    iex> is_ipv6_mask(68)\n    true\n    iex> is_ipv6_mask(:\"68\")\n    false","ref":"MscmpSystNetwork.Guards.html#is_ipv6_mask/1-examples"},{"type":"macro","title":"MscmpSystNetwork.Guards.is_ipv6_tuple/1","doc":"A guard function which indicates whether a passed value is an Erlang style\nIPv6 tuple.","ref":"MscmpSystNetwork.Guards.html#is_ipv6_tuple/1"},{"type":"macro","title":"Examples - MscmpSystNetwork.Guards.is_ipv6_tuple/1","doc":"iex> import MscmpSystNetwork.Guards\n    iex> is_ipv6_tuple({0, 0, 0, 0, 0, 0, 0, 1})\n    true\n    iex> is_ipv6_tuple(:foo)\n    false\n    iex> is_ipv6_tuple({0x10000, 0, 0, 0, 0, 0, 0, 1})\n    false","ref":"MscmpSystNetwork.Guards.html#is_ipv6_tuple/1-examples"},{"type":"protocol","title":"MscmpSystNetwork.Protocol","doc":"Defines the MscmpSystNetwork Protocol which all network protocols must\nimplement.\n\nMany functions in `MscmpSystNetwork` require that this protocol be implemented\nto be useful.","ref":"MscmpSystNetwork.Protocol.html"},{"type":"function","title":"MscmpSystNetwork.Protocol.get_host/1","doc":"","ref":"MscmpSystNetwork.Protocol.html#get_host/1"},{"type":"function","title":"MscmpSystNetwork.Protocol.get_netmask/1","doc":"","ref":"MscmpSystNetwork.Protocol.html#get_netmask/1"},{"type":"function","title":"MscmpSystNetwork.Protocol.get_network/1","doc":"","ref":"MscmpSystNetwork.Protocol.html#get_network/1"},{"type":"function","title":"MscmpSystNetwork.Protocol.host?/1","doc":"","ref":"MscmpSystNetwork.Protocol.html#host?/1"},{"type":"function","title":"MscmpSystNetwork.Protocol.in_network?/2","doc":"","ref":"MscmpSystNetwork.Protocol.html#in_network?/2"},{"type":"function","title":"MscmpSystNetwork.Protocol.in_range?/3","doc":"","ref":"MscmpSystNetwork.Protocol.html#in_range?/3"},{"type":"function","title":"MscmpSystNetwork.Protocol.network?/1","doc":"","ref":"MscmpSystNetwork.Protocol.html#network?/1"},{"type":"function","title":"MscmpSystNetwork.Protocol.to_string/1","doc":"","ref":"MscmpSystNetwork.Protocol.html#to_string/1"},{"type":"type","title":"MscmpSystNetwork.Protocol.t/0","doc":"All the types that implement this protocol.","ref":"MscmpSystNetwork.Protocol.html#t:t/0"},{"type":"module","title":"MscmpSystNetwork.Types","doc":"Basic types in support of the MscmpSystNetwork Component.","ref":"MscmpSystNetwork.Types.html"},{"type":"type","title":"MscmpSystNetwork.Types.addr/0","doc":"The union of Erlang IPv4 and IPv6 address tuple types.","ref":"MscmpSystNetwork.Types.html#t:addr/0"},{"type":"type","title":"MscmpSystNetwork.Types.addr_structs/0","doc":"The union of MscmpSystNetwork IP address struct types.","ref":"MscmpSystNetwork.Types.html#t:addr_structs/0"},{"type":"type","title":"MscmpSystNetwork.Types.ipv4_addr/0","doc":"An IPv4 address type in Erlang `t::inet.ip4_address/0` format.","ref":"MscmpSystNetwork.Types.html#t:ipv4_addr/0"},{"type":"type","title":"MscmpSystNetwork.Types.ipv4_mask/0","doc":"Defines the acceptable subnet mask bit length for IPv4 addresses.","ref":"MscmpSystNetwork.Types.html#t:ipv4_mask/0"},{"type":"type","title":"MscmpSystNetwork.Types.ipv6_addr/0","doc":"An IPv6 address type in Erlang `t::inet.ip6_address/0` format.","ref":"MscmpSystNetwork.Types.html#t:ipv6_addr/0"},{"type":"type","title":"MscmpSystNetwork.Types.ipv6_mask/0","doc":"Defines the acceptable prefix bit length for IPv6 addresses.","ref":"MscmpSystNetwork.Types.html#t:ipv6_mask/0"},{"type":"type","title":"MscmpSystNetwork.Types.mask/0","doc":"The union of IPv4 and IPv6 bit length definitions.","ref":"MscmpSystNetwork.Types.html#t:mask/0"},{"type":"module","title":"MscmpSystNetwork.Types.IpV4","doc":"Represents an IPv4 host or subnet CIDR address.\n\nImplements the `MscmpSystNetwork.Protocol`.\n\nThe representation of a host may also written to include an identifiable\nsubnet as well.  So for example, `10.1.1.15/24` represents\nboth a specific host (`10.1.1.15`) and a specific subnet\n`10.1.1.0/24`.","ref":"MscmpSystNetwork.Types.IpV4.html"},{"type":"type","title":"MscmpSystNetwork.Types.IpV4.t/0","doc":"Defines an IPv4 address.","ref":"MscmpSystNetwork.Types.IpV4.html#t:t/0"},{"type":"type","title":"Attributes - MscmpSystNetwork.Types.IpV4.t/0","doc":"* `address` - The IP address of the host or subnet in\n  `t:MscmpSystNetwork.Types.ipv4_addr/0` form.\n\n  * `mask` - the subnet mask bit length of the IP address.  Valid values are\n  integers between 0 and 32, inclusive.  When defining a new struct and the\n  `mask` is not provided, the resulting struct is assumed to represent a host\n  and the `mask` attribute is defaulted to 32.\n\nSee `MscmpSystNetwork.Types.IpV4` for more.","ref":"MscmpSystNetwork.Types.IpV4.html#t:t/0-attributes"},{"type":"module","title":"MscmpSystNetwork.Types.IpV6","doc":"Represents an IPv6 host or subnet CIDR address.\n\nImplements the `MscmpSystNetwork.Protocol`.\n\nThe representation of a host may also written to include an identifiable\nsubnet as well.  So for example, `fd9b:77f8:714d:cabb::ab67:12/64` represents\nboth a specific host (`fd9b:77f8:714d:cabb::ab67:12`) and a specific subnet\n`fd9b:77f8:714d:cabb::ab67:0000/64`.","ref":"MscmpSystNetwork.Types.IpV6.html"},{"type":"type","title":"MscmpSystNetwork.Types.IpV6.t/0","doc":"Defines an IPv6 address.","ref":"MscmpSystNetwork.Types.IpV6.html#t:t/0"},{"type":"type","title":"Attributes - MscmpSystNetwork.Types.IpV6.t/0","doc":"* `address` - The IP address of the host or subnet in\n  `t:MscmpSystNetwork.Types.ipv6_addr/0` form.\n\n  * `mask` - the prefix bit length of the IP address.  Valid values are\n  integers between 0 and 128, inclusive.  When defining a new struct and the\n  `mask` is not provided, the resulting struct is assumed to represent a host\n  and the `mask` attribute is defaulted to 128.\n\nSee `MscmpSystNetwork.Types.IpV6` for more.","ref":"MscmpSystNetwork.Types.IpV6.html#t:t/0-attributes"},{"type":"exception","title":"Mserror.NetworkError","doc":"Defines errors and related metadata for MscmpSystNetwork component errors.","ref":"Mserror.NetworkError.html"},{"type":"function","title":"Mserror.NetworkError.new/3","doc":"Creates a new error struct with the given kind, message, and options.","ref":"Mserror.NetworkError.html#new/3"},{"type":"function","title":"Parameters - Mserror.NetworkError.new/3","doc":"* `kind` - The kind of error, see `t:kinds/0` for the available Kinds.\n\n  * `message` - A string describing the error.\n\n  * `opts` - A keyword list of additional options.","ref":"Mserror.NetworkError.html#new/3-parameters"},{"type":"function","title":"Options - Mserror.NetworkError.new/3","doc":"* `:context` - contextual information for better understanding the\n    error.  If provided, the context should be of type\n    `t:MscmpSystError.Types.Context.t/0`.\n\n  * `:cause` - The cause of the error, which can be an exception, an error tuple,\n    or any other term.","ref":"Mserror.NetworkError.html#new/3-options"},{"type":"function","title":"Returns - Mserror.NetworkError.new/3","doc":"Returns a struct of this error type with the error details.","ref":"Mserror.NetworkError.html#new/3-returns"},{"type":"type","title":"Mserror.NetworkError.kinds/0","doc":"Represents the available Kinds of error allowed by this Error type.","ref":"Mserror.NetworkError.html#t:kinds/0"},{"type":"type","title":"Available Kinds - Mserror.NetworkError.kinds/0","doc":"* `:parse` - Indicates that there were problems attempting to parse an IP Address or\nNetwork represented as a string.\n\n  * `:invalid_network` - The value provided does not represent a valid network.","ref":"Mserror.NetworkError.html#t:kinds/0-available-kinds"},{"type":"type","title":"Mserror.NetworkError.t/0","doc":"Describes the structure of an error of generated by this exception.\n\nThe `cause` attribute allows for errors to be nested.","ref":"Mserror.NetworkError.html#t:t/0"},{"type":"type","title":"Attributes - Mserror.NetworkError.t/0","doc":"The following attributes are those which are set or modified by the\nuser when working with errors.\n\n  * `kind` - The kind of error, see `t:kinds/0` for the available Kinds.\n\n  * `message` - A string describing the error.\n\n  * `context` - contextual information for better understanding the\n    error.  If provided, the context should be of type\n    `t:MscmpSystError.Types.Context.t/0`.\n\n  * `cause` - The cause of the error, which can be an exception, an error tuple,\n    or any other term.","ref":"Mserror.NetworkError.html#t:t/0-attributes"},{"type":"type","title":"Internal Attributes - Mserror.NetworkError.t/0","doc":"These attributes have their values set at compile time and are used\ninternally by the MscmpSystError framework.  They are not to be altered\nby user code.  Reading these attributes in user code is safe, however.\n\n  * `__mserror__` - Always true, indicates that this error is compatible\n    with the MscmpSystError framework.\n\n  * `__mscomponent__` - The component that generated the error.","ref":"Mserror.NetworkError.html#t:t/0-internal-attributes"}],"content_type":"text/markdown","producer":{"name":"ex_doc","version":[48,46,51,52,46,50]}}